<chapter label="1" id="expressions" xreflabel="Expressions">
	<title>Expressions in OpenCReports</title>
	<sect1>
		<title>Introduction</title>
		<para>
			Expressions in OpenCReports are based on Flex lexer and Bison grammar
			that provide a solid and extensible basis for report expressions.
		</para>
		<para>
			There are four data types in OpenCReports:
			<literal>numeric</literal>, <literal>string</literal>,
			<literal>datetime</literal> and <literal>error</literal>.
		</para>
		<para>
			A <literal>numeric</literal> expression stores a high precision
			number. Most functions and operators deal with numbers.
		</para>
		<para>
			A <literal>string</literal> expression stores a string literal.
			String can be concatenated or processed by string functions.
		</para>
		<para>
			A <literal>datetime</literal> expression may store a date,
			a time (with or without timezone) or both. Also, it may store
			a time interval, e.g. <literal>2 months</literal> that can be
			added to or subtracted from another <literal>datetime</literal>
			value.
		</para>
		<para>
			An <literal>error</literal> expression is a special case of
			<literal>string</literal>: it stores a string literal (which
			is an error message) but it cannot be further processed by
			functions or operators. Instead, an error is propagated up
			from subexpressions to the final result of the expression.
		</para>
	</sect1>
	<sect1 id="constants" xreflabel="Constants">
		<title>Constants</title>
		<sect2 id="stringliterals" xreflabel="String literals">
			<title>String literals</title>
			<para>
				String literals in OpenCReports can be either single or double quoted.
				Some examples:
				<programlisting>
"apple"
&#8217;apple&#8217;
"I&#8217;ve eaten an apple"
&#8217;This an "apple".&#8217;
				</programlisting>
				The values of these strings are:
				<programlisting>
apple
apple
I&#8217;ve eaten an apple
This an "apple".
				</programlisting>
				We can see how the other quoting character can be used as part
				of the string value.
			</para>
			<para>
				String literals can also use BASIC language style double quoting
				to embed a single quoting character used for quoting the string
				itself:
				<programlisting>
&#8217;apple&#8217;&#8217;&#8217;
&#8217;apple&#8217;&#8217;pear&#8217;
&#8217;apple&#8217;&#8217;&#8217;&#8217;pear&#8217;
"apple"""
"apple""pear"
"apple""""pear"
				</programlisting>			
				The values of these strings are:
				<programlisting>
apple&#8217;
apple&#8217;pear
apple&#8217;&#8217;pear
apple"
apple"pear
apple""pear
				</programlisting>
			</para>
			<para>
				String literals can also use C language string continuation if
				there's at least one whitespace character (space, TAB or new line)
				between doubled quoting characters. String continuation can also
				switch quoting characters without whitespace between quoting.
				<programlisting>
"apple" "pear"
"apple" &#8217;pear&#8217;
"apple"&#8217;pear&#8217;
				</programlisting>
				The value of all these strings is:
				<programlisting>
applepear
				</programlisting>
			</para>
		</sect2>
		<sect2 id="numericconstants" xreflabel="Numeric constants">
			<title>Numeric constants</title>
			<para>
				Numeric values in OpenCReports are handled with GNU MPFR with
				arbitrary precision, by default 256 bits. This allows for
				very high precision, i.e. very long numbers. This is good
				for directly using e.g. arbitrary precision
				<literal>numeric</literal> type columns from PostgreSQL.
			</para>
			<para>
				Numeric constants can be integer or fractional numbers with or
				without the so called <emphasis>e-notation</emphasis> or
				scientific nottion. Some examples:
				<programlisting>
1
1.234
1e4
1e-4
1.234e-5
				</programlisting>
				E-notation means that that number preceding the letter "e" or
				"E" is multiplied by ten to the power of the number after the
				letter "e" or "E", the latter being an integer value. The
				values of the above examples are:
				<programlisting>
1
1.234
10000
0.0001
0.00001234
				</programlisting>
			</para>
			<para>
				Numbers greater than 0 and less than 1 can be written with
				or without the leading zero.
				<programlisting>
0.123
.123
				</programlisting>
			</para>
		</sect2>
		<sect2 id="boolconstants" xreflabel="Boolean constants">
			<title>Boolean constants</title>
			<para>
				Boolean constants evalutate to numeric constans
				<literal>1</literal> and <literal>0</literal>.
				The boolean constants are:
				<programlisting>
yes
no
true
false
				</programlisting>
			</para>
		</sect2>
		<sect2 id="datetimeconstants" xreflabel="Datetime constants">
			<title>Datetime constants</title>
			<para>
				There are no datetime constants per se, although expressions
				like <literal>stodt('1980-06-30 16:00:00')</literal> (i.e.
				function calls with constant arguments that result in a
				<literal>datetime</literal> value) implicitly turn into
				constants through expression optimization.
			</para>
		</sect2>
	</sect1>
	<sect1 id="identifiers" xreflabel="Identifiers">
		<title>Identifiers</title>
		<para>
			In OpenCReports expressions, identifiers can reference query column
			names, environment variables, internal variables and custom
			report variables. Their values are evaluated or computed
			during the report execution.
		</para>
		<para>
			Identifiers are in the format <literal>[[domain].]identifier</literal>
			where the domain name or the dot are optional.
		</para>
		<para>
			OpenCReports is using the UTF-8 encoding. This means that valid
			<literal>domain</literal> and <literal>identifier</literal>
			names may start with an underscore or UTF-8 letters and may
			contain underscore, UTF-8 letters and numbers in subsequent
			characters. Examples:
			<programlisting>
valid_field_name
_valid_field_name5
query2.column1
mező_név
lekérdezés.mező_név
			</programlisting>
		</para>
		<para>
			Both <literal>domain</literal> and <literal>identifier</literal>
			names may be quoted or unquoted. Quoting identifiers allows
			using semi-reserved and reserved words as identifers and also
			allow special characters in identifier names. Examples:
			<programlisting>
query.column1
query."column2"
query."column with space in the name"
"query2".column3
"query2"."and"
			</programlisting>
		</para>
		<para>
			Semi-reserved words are the boolean constants. They can be used
			as identifiers with dot-prefixed identifier names without
			a domain name:
			<programlisting>
.yes
.no
.true
.false
yes.no
			</programlisting>
			These can also be used as quoted identifiers:
			<programlisting>
."yes"
."no"
."true"
."false"
"true"."false"
			</programlisting>
			They can also be used in domain-qualified identifiers with
			or without quoting either the domain name or the identifier.
		</para>
		<para>
			Reserved words are the ones that can appear as operator names:
			<literal>and</literal> and <literal>or</literal>. They cannot
			be used with dot-prefixed operator names, as it would cause
			an expression syntax error. But they can be used as quoted
			identifiers, in case you would want to use such a query name
			and column name:
			<programlisting>
."and"
."or"
"and"."or"
			</programlisting>
		</para>
		<sect2 id="speciddomains" xreflabel="Special identifier domains">
			<title>Special identifier domains</title>
			<para>
				Unquoted domain <literal>m</literal> indicates the domain
				of environment variables. The list of environment variables
				depend on the languange binding. In C, it's the variables
				in the operating environment. In PHP, they are the global
				PHP variables. Example:
				<programlisting>
m.current_date
				</programlisting>
			</para>
			<para>
				Unquoted domain <literal>r</literal> indicates the domain
				of internal report variables, like the current page of the
				report or total number of pages. The latter implies delayed
				evaluation, where the complete report is paginated. Example:
				<programlisting>
r.totpages
				</programlisting>
			</para>
			<para>
				Domain <literal>v</literal> signifies custom report variables,
				used e.g. in breaks or to shortcut expressions. Example:
				<programlisting>
v.break1
				</programlisting>
			</para>
			<para>
				When these identifier domains are quoted, they lose their
				special meaning and these identifiers become query
				identifiers. Of course, in this case, such a query name must
				exist and the query must have such a column name specified
				in the identifier. Examples:
				<programlisting>
"m".current_date
"r".totpages
"v".break1
				</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="opsandfunc" xreflabel="Operators and functions">
		<title>Operators and functions</title>
		<para>
			OpenCReports expressions can use several operators and functions.
			The operator precedence is mostly as expected from the C
			programming language. One notable exception is implicit
			multiplication. The precedence classes are as below,
			in increasing order of precedence.
		</para>
		<sect2>
			<title>Ternary operator</title>
			<para>
				The ternary operator is as in the C language:
				<programlisting>
expression1 ? expression2 : expression3
				</programlisting>
				It's evaluated as follows: if the value of numeric
				<literal>expression1</literal> is <literal>true</literal>
				(i.e. non-zero), then the result is the <literal>expression2</literal>,
				otherwise it's <literal>expression3</literal>.
				Type of <literal>expression2</literal> and
				<literal>expression3</literal> may differ, i.e. the
				result type will be the type of the underlying expression
				but it can result in runtime errors.
			</para>
		</sect2>
		<sect2>
			<title>Logical operators with two operands</title>
			<para>
				Logical OR can be written as <literal>||</literal> or
				<literal>or</literal>. Example: <literal>a || b</literal>
			</para>
			<para>
				Logical AND can be written as <literal>&&</literal> or
				<literal>and</literal>. Logical AND has precedence over OR.
				Example: <literal>a && b</literal>
			</para>
		</sect2>
		<sect2>
			<title>Bitwise operators with two operands</title>
			<para>
			The bitwise operators in this precedence class and in their
			increasing order of precedence are:
			bitwise OR (<literal>|</literal>),
			bitwise XOR (<literal>^</literal>) and
			bitwise AND (<literal>&</literal>).
			</para>
		</sect2>
		<sect2>
			<title>Equality and inequality comparison operators</title>
			<para>
				The equality comparison operator can be written as
				<literal>=</literal> or <literal>==</literal>.
			</para>
			<para>
				The inequality comparison operator can be written as
				<literal>&lt;&gt;</literal> or <literal>!=</literal>.
			</para>
		</sect2>
		<sect2>
			<title>Other comparison operators</title>
			<para>
				Less-than (<literal>&lt;</literal>),
				less-or-equal (<literal>&lt;=</literal>),
				greater-than (<literal>&gt;</literal>) and
				greater-or-equal (<literal>&gt;=</literal>).
			</para>
		</sect2>
		<sect2>
			<title>Bitwise shifts</title>
			<para>
				Bitwise shift left (<literal>a &gt;&gt; b</literal>) and
				bitwise shift right (<literal>a &lt;&lt; b</literal>).
			</para>
		</sect2>
		<sect2>
			<title>Addition and subtraction</title>
			<para>
				<literal>a + b</literal> and <literal>a - b</literal>.
			</para>
		</sect2>
		<sect2>
			<title>Multiplication, division and modulo (remainder)</title>
			<para>
				<literal>a * b</literal>, <literal>a / b</literal> and
				<literal>a % b</literal>.
			</para>
		</sect2>
		<sect2>
			<title>Factorial operator</title>
			<para>
				<literal>a!</literal>, the '!' sign used as postfix operator.
			</para>
		</sect2>
		<sect2>
			<title>Unary plus and minus, logical and bitwise NOT, prefix increment and decrement</title>
			<para>
				Unary plus (<literal>+a</literal>), unary minus (<literal>-a</literal>),
				logical NOT (<literal>!a</literal>, '!' used as prefix operator),
				bitwise NOT (<literal>~a</literal>), prefix increment (<literal>++a</literal>)
				and prefix decrement (<literal>--a</literal>).
			</para>
		</sect2>
		<sect2>
			<title>Postfix increment and decrement</title>
			<para>
				Postfix increment (<literal>a++</literal>) and decrement
				(<literal>a--</literal>).
			</para>
		</sect2>
		<sect2>
			<title>Function calls and implicit multiplication</title>
			<para>
				Function calls execute a function on operands:
				<literal>function(operand[, ...])</literal>. A function name
				is a single word known by OpenCReports at the time of parsing,
				either as a built-in function, or a user-supplied one.
				The function name cannot have a leading dot or be a
				domain-qualified identifier.
			</para>
			<para>
				Implicit multiplication is when two distinct operands are in
				juxtaposition, in other words they are written side by side
				without any whitespace. In this case, there is an implied
				multiplication between them that acts with higher precedence
				than regular multiplication or division. Implicit multiplication
				is applicable in these situations:
				<itemizedlist>
					<listitem>
						<para>
							A numeric constant juxtaposed with an identifier,
							the numeric constant is the on the left side.
						</para>
					</listitem>
					<listitem>
						<para>
							A numeric constant juxtaposed with an expression inside
							parentheses. The constant can be on either side of the
							expression.
						</para>
					</listitem>
					<listitem>
						<para>
							An identifier juxtaposed with an expression inside
							parentheses, the identifier is on the left side of the
							expression. This is only treated as implicit
							multiplication if the identifier name is not known as
							a function name at the time of parsing and there is
							a single expression inside the parentheses.
							No expressions, a single expression with a known function
							name as the identifier, or a series of comma delimited
							series of expressions are treated as a function call and
							the function call validity is checked against the number
							of operands, with a potential parser error. If there's
							an ambiguity between function names and identifiers
							provided by data sources, it can be avoided by using
							dot-prefixed or dot-prefixed and quoted identifiers,
							or fully qualified identifiers in the form of
							<literal>query.identifier</literal>.
						</para>
					</listitem>
					<listitem>
						<para>
							An expression inside parentheses juxtaposed with an identifier
							on the right side.
						</para>
					</listitem>
					<listitem>
						<para>
							Two expressions inside parentheses juxtaposed with each other.
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				Implicit multiplication is NOT applicable in these situations,
				besides the exceptions already explained above:
				<itemizedlist>
					<listitem>
						<para>
							An identifier juxtaposed with a numeric constant,
							the numeric constant is the on the right side.
							Since an identifier name can include digits as the
							second and subsequent characters, the numeric
							constant, or at least its integer part is simply
							recognized as part of the identifier name itself
							according to the token matching. This can also result
							in syntax errors when not handled with care.
						</para>
					</listitem>
					<listitem>
						<para>
							An identifier juxtaposed with another identifier.
							The reason is the same as in the preceding case:
							there is only a single identifier according to
							token matching.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2>
			<title>Parentheses</title>
			<para>
				Parenthesized expressions are always computed first.
			</para>
		</sect2>
		<sect2>
			<title>Token matching, precendence and syntax errors</title>
			<para>
				Expression parsing works on two levels: token matching (the
				job of Flex) and applying grammar (the job of Bison).
				Token matching breaks up the expression string into tokens
				in a greedy way: without whitepace delimiters, the longest
				possible token is chosen.
			</para>
			<para>
				This may lead to slight confusion when coupled with
				implicit multiplication. For example, the expression
				<literal>2e-1e</literal> is broken up into two tokens:
				<literal>2e-1</literal> juxtaposed with
				<literal>e</literal>. The first token is interpreted as
				a numeric constant using <emphasis>e-notation</emphasis>
				(so that it will mean <literal>2 * 10^(-1)</literal>) and
				the second is the identifier <literal>e</literal>, leading
				to the meaning <literal>0.2 * e</literal>. This is
				unambiguous for the computer, but can be somewhat confusing
				to the the user reading or writing expressions. To avoid
				any confusion, don't use implicit multiplication and use
				whitespace and parentheses gratituously.
			</para>
			<para>
				Expression parsing handles precedence and whitespaces.
				For example, these below do not mean the same thing:
				<programlisting>
a++ + ++b
a+++++b
				</programlisting>
				The former is obvious, but the latter may be a little
				surprising: <literal>(a++)++ + b</literal>, but not when
				considering precedence and the Flex lexer behaviour to
				match the the longest known token first. In this case,
				to make the expression unambiguous, whitespace or parenthesis
				should be used. Another ambiguous example:
				<programlisting>
a++b
				</programlisting>
				The above may be interpreted as <literal>a + +b</literal>
				but since no whitespace is used, Flex is free to interpret
				it as <literal>a++ b</literal>, because <literal>++</literal>
				is longer than <literal>+</literal>, so the former is matched
				first as an operator token. This is a syntax error and
				expression parsing throws an error for it.
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Alphabetical list of functions</title>
		<para>
			Most functions below operate in this way, unless noted otherwise:
			<itemizedlist>
				<listitem>
					<para>
						numeric and bitwise functions with more than 2 operands
						take their first operand and perform the same operation
						using the second, third, etc. operands repeatedly.
					</para>
				</listitem>
				<listitem>
					<para>
						if any of the operands is an error (resulting from
						runtime processing of a subexpression), then the
						result will use the exact error of the first operand
						that is an error.
					</para>
				</listitem>
				<listitem>
					<para>
						if any of the operands is NULL (e.g. the data source
						is SQL and the field value is SQL NULL) then the
						result will also be NULL.
					</para>
				</listitem>
				<listitem>
					<para>
						Boolean logic functions treat their operands with
						0 being false and anything else (even fractions less
						than 0.5) as true.
					</para>
				</listitem>
				<listitem>
					<para>
						Bitwise functions treat their operands as 64-bit
						numeric values, with rounding if they are fractions.
					</para>
				</listitem>
				<listitem>
					<para>
						String arithmetics operate on UTF-8 encoded strings
						and count in number of UTF-8 characters instead of
						byte length.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<sect2>
			<title>abs()</title>
			<para>
				Absolute value. Operator <literal>|...|</literal>
				is a shortcut for this function. It takes a single
				numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>add()</title>
			<para>
				Addition. Operator <literal>+</literal> is a shortcut for
				this function. It accepts 2 or more operands of the same
				type, with all of them being either numeric or string.
				For string operands, it is equivalent with concatenation,
				i.e. <literal>concat()</literal> below.
			</para>
		</sect2>
		<sect2>
			<title>and()</title>
			<para>
				Bitwise AND. Operator <literal>&</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>ceil()</title>
			<para>
				Rounds its operand to the next higher or equal integer.
				It accepts 1 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>concat()</title>
			<para>
				String concatenation. Accepts 2 or more string operands.
			</para>
		</sect2>
		<sect2>
			<title>dec()</title>
			<para>
				Decrement by one. Accepts 1 numeric operand.
				The operator <literal>++</literal> is the shortcut for it,
				either in prefix or postfix uses.
			</para>
		</sect2>
		<sect2>
			<title>div()</title>
			<para>
				Division. Operator <literal>/</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands.
				The way it works is: take the first operand and divide
				it by the second and subsequent operands in sequence.
			</para>
		</sect2>
		<sect2>
			<title>eq()</title>
			<para>
				Equivalence. Operator <literal>=</literal> and <literal>==</literal>
				are a shortcuts for this function. It accepts 2 numeric or
				string operands. The result is numeric value 1 or 0,
				if the two operands are equal or non-equal, respectively.
			</para>
		</sect2>
		<sect2>
			<title>error()</title>
			<para>
				Returns an artificially generated error. Accepts 1
				string operand. The result will use the string operand's
				value as error message. Good for unit testing OpenCReports
				as done in the <literal>ocrpt_expr_test</literal> example.
			</para>
		</sect2>
		<sect2>
			<title>factorial()</title>
			<para>
				Factorial function. Accepts 1 numeric operand.
				The postfix operator <literal>!</literal> is the alias for
				this function.
			</para>
		</sect2>
		<sect2>
			<title>floor()</title>
			<para>
				Rounds its operand to the next lower or equal integer.
				It accepts 1 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>fmod()</title>
			<para>
				The result to the value of <literal>x - ny</literal>
				(<literal>x</literal> and <literal>y</literal> being
				its two numeric operands), rounded according to the
				report rounding mode set via <literal>ocrpt_set_rounding_mode()</literal>,
				where <literal>n</literal> is the integer quotient of
				<literal>x</literal> divided by <literal>y</literal>,
				<literal>n</literal> is rounded toward zero.
				It accepts 2 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>ge()</title>
			<para>
				Greater-or-equal. Accepts 2 operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&gt;=</literal> is the shortcut for it.
			</para>
		</sect2>
		<sect2>
			<title>gt()</title>
			<para>
				Greater-than. Accepts 2 operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&gt;</literal> is the shortcut for it.
			</para>
		</sect2>
		<sect2>
			<title>iif()</title>
			<para>
				Trinary function. Accepts 3 operands of which the first one
				is numeric, the second and third operands can be of any type.
				If the first operand is non-zero (i.e.: "true") then
				the result will be the value of the second operand,
				else it will be the third operand.
				The trinary operator <literal>exp1 ? exp2 : exp3</literal>
				is the shortcut for it.
			</para>
		</sect2>
		<sect2>
			<title>inc()</title>
			<para>
				Increment by one. Accepts 1 numeric operand.
				The operator <literal>--</literal> is the shortcut for it,
				either in prefix or postfix uses.
			</para>
		</sect2>
		<sect2>
			<title>isnull()</title>
			<para>
				Returns numeric 1 if the operand is NULL, 0 otherwise.
				Accepts 1 operand of any type.
			</para>
		</sect2>
		<sect2>
			<title>land()</title>
			<para>
				Boolean logic AND. Operator <literal>&&</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands that
				are treated as boolean logic values. The function is executed
				until the result is fully determined, i.e. it stops at
				the first false value.
			</para>
		</sect2>
		<sect2>
			<title>le()</title>
			<para>
				Less-or-equal. Accepts 2 operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&lt;=</literal> is the shortcut for it.
			</para>
		</sect2>
		<sect2>
			<title>left()</title>
			<para>
				Returns the leftmost N characters of a string.
				It accepts 2 operands, the first operand is the string,
				the second is the numeric that is handled as an integer
				and used to determine the returned string length.
			</para>
		</sect2>
		<sect2>
			<title>lnot()</title>
			<para>
				Boolean logic NOT. Prefix operator <literal>!</literal> is
				the shortcut for this function. It returns the negated
				boolean value of its operand. Accepts 1 numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>lor()</title>
			<para>
				Boolean logic OR. Operator <literal>||</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands that
				are treated as boolean logic values, with 0 being false and
				true for anything else. The function is executed until the result is
				determined fully, i.e. it stops at the first true value.
			</para>
		</sect2>
		<sect2>
			<title>lt()</title>
			<para>
				Less-than. Accepts 2 operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&lt;</literal> is the shortcut for it.
			</para>
		</sect2>
		<sect2>
			<title>mid()</title>
			<para>
				Return characters from the middle of the string.
				It accepts 3 operands, the first operand is the string,
				the second and third are numeric values that are handled
				as an integers. The second operand is the offset to start
				from and the third operand is the length of the result
				string in UTF-8 characters. The offset is 1-based just like
				in BASIC, with offset value 0 being identical to 1.
				Negative offsets count from the right end of the string,
				i.e. <literal>mid(s,-n,n)</literal> is equivalent to
				<literal>right(s,n)</literal>.
			</para>
		</sect2>
		<sect2>
			<title>mod()</title>
			<para>
				An alias of <literal>remainder()</literal>.
				It accepts 2 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>mul()</title>
			<para>
				Multiplication. Operator <literal>*</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>ne()</title>
			<para>
				Not equal. Accepts 2 operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>!=</literal> and <literal>&lt;&gt;</literal>
				are shortcuts for it.
			</para>
		</sect2>
		<sect2>
			<title>not()</title>
			<para>
				Bitwise NOT. Prefix operator <literal>~</literal> is
				the shortcut for this function. It returns the bit-by-bit
				negated value of its operand. Accepts 1 numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>null()</title>
			<para>
				Generate NULL value using the type of its operand.
				Accepts 1 operand of any type.
			</para>
		</sect2>
		<sect2>
			<title>nulldt()</title>
			<para>
				Generate NULL of the datetime type. Accepts 0 operands.
			</para>
		</sect2>
		<sect2>
			<title>nulln()</title>
			<para>
				Generate NULL of the numeric type. Accepts 0 operands.
			</para>
		</sect2>
		<sect2>
			<title>nulls()</title>
			<para>
				Generate NULL of the string type. Accepts 0 operands.
			</para>
		</sect2>
		<sect2>
			<title>or()</title>
			<para>
				Bitwise OR. Operator <literal>|</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>random()</title>
			<para>
				Generate a pseudo-random numeric value between 0 and 1.
				Accepts 0 operands.
			</para>
		</sect2>
		<sect2>
			<title>remainder()</title>
			<para>
				The result to the value of <literal>x - ny</literal>
				(<literal>x</literal> and <literal>y</literal> being
				its two numeric operands), rounded according to the
				report rounding mode set via <literal>ocrpt_set_rounding_mode()</literal>,
				where <literal>n</literal> is the integer quotient of
				<literal>x</literal> divided by <literal>y</literal>,
				<literal>n</literal> is rounded toward to the nearest integer.
				It accepts 2 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>right()</title>
			<para>
				Returns the rightmost N characters of a string.
				It accepts 2 operands, the first operand is the string,
				the second is the numeric that is handled as an integer
				and used to determine the returned string length.
			</para>
		</sect2>
		<sect2>
			<title>rint()</title>
			<para>
				Rounds its operand using the rounding mode set via
				<literal>ocrpt_set_rounding_mode()</literal>.
				It accepts 1 numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>round()</title>
			<para>
				Rounds its operand to the nearest representable integer,
				rounding halfway cases away from zero.
				It accepts 1 numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>shl()</title>
			<para>
				Bitwise shift left. Shifts the first operand left with the
				number of bits set indicated the second operand. The operand
				<literal>&lt;&lt;</literal> is the shortcut for this
				function. It accepts 2 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>shr()</title>
			<para>
				Bitwise shift right. Shifts the first operand right with the
				number of bits indicated by the second operand. The operand
				<literal>&gt;&gt;</literal> is the shortcut for this
				function. It accepts 2 numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>sub()</title>
			<para>
				Subtraction. Operator <literal>-</literal> is a shortcut for
				this function. It accepts 2 or more numeric operands.
			</para>
		</sect2>
		<sect2>
			<title>trunc()</title>
			<para>
				Rounds its operand to the next representable integer toward
				zero. It accepts 1 numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>uminus()</title>
			<para>
				Unary minus. Changes the sign of its numeric operand
				from positive to negative, or vice versa. Operator unary
				<literal>-</literal> is the shortcut of this function.
				It accepts 1 numeric operand.
			</para>
		</sect2>
		<sect2>
			<title>val()</title>
			<para>
				Numeric value. If a string operand is given, it returns
				the converted numeric value. The value of a numeric operand
				is passed through as is.
				It accepts 1 numeric or string operand.
			</para>
		</sect2>
		<sect2>
			<title>xor()</title>
			<para>
				Bitwise exclusive OR. Operator <literal>^</literal> is
				the shortcut for this function.
				It accepts 2 or more numeric operands.
			</para>
		</sect2>
	</sect1>
</chapter>

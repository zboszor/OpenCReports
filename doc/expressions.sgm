<chapter id="expressions" xreflabel="Expressions">
	<title>Expressions in OpenCReports</title>
	<sect1 id="exprintro">
		<title>Introduction</title>
		<para>
			The previous section described <xref linkend="datasources"/>
			and <xref linkend="queries"/> which provide
			<emphasis>raw data</emphasis>. Raw data can be used as is,
			or can be processed further for the purposes of the report.
			This is where <emphasis>expressions</emphasis> come in.
		</para>
		<para>
			There are three main data types in OpenCReports:
			<literal>numeric</literal>, <literal>string</literal>,
			and <literal>datetime</literal>.
			OpenCReports automatically detects the type of raw data
			supplied by <xref linkend="queries"/> for SQL and some
			file based <xref linkend="datasources"/>, and the
			application can supply extra data to indicate column
			data types.
		</para>
		<para>
			Expressions can use and result in any of these types.
		</para>
		<para>
			A <literal>numeric</literal> expression's result is
			a number. It uses high numeric precision. Most functions
			and operators deal with numbers.
		</para>
		<para>
			For historic record, RLIB was designed for the US
			and for slower computers. It used a fixed point numeric
			representation. For the US, with its strong currency
			and prices expressed in low numbers, this was an
			acceptable design decision at the time. But for countries,
			where currencies are a few orders of magnitude weaker and
			conversely, the prices are similarly higher, the fixed
			point numeric value range was easily overflown (especially
			in report variables that added values), leading
			to wrong data in the report output.
		</para>
		<para>
			Another potential problem with fixed point numeric
			representation is that converting numbers from the
			input data to this internal representation always
			rounds down. The numeric error (i.e. the difference
			between floating point values and fixed point values)
			can be demonstrated even with small data sets that
			add up percentages.
		</para>
		<para>
			OpenCReports uses high precision floating point values.
			Technically, it's 256-bit precision GNU MPFR numerics by default,
			and the precision can be modified by the application if needed.
			This allows handling very large and very small numbers
			and directly consuming the SQL <literal>numeric</literal>
			and <literal>decimal</literal> types or arbitrary precision,
			or using <literal>bcmath</literal> numerics in PHP.
			This also allows scientific computation or monetary
			calculations even with late stage
			<ulink url="https://en.wikipedia.org/wiki/Hyperinflation">hyperinflation</ulink>
			prices.
		</para>
		<para>
			A <literal>string</literal> expression's result is arbitrary
			text. Strings can be concatenated or otherwise processed
			by string functions.
		</para>
		<para>
			A <literal>datetime</literal> expression may store a date,
			a time (with or without timezone) or both. Also, it may store
			a time interval, e.g. <literal>2 months</literal> that can be
			added to or subtracted from another <literal>datetime</literal>
			value.
		</para>
		<para>
			There is a further data type: <literal>error</literal>.
			Errors usually occur if there is an error in processing,
			e.g. when a function argument does not match its expected
			parameter data type. The <literal>error</literal> type is
			a special case of strings: it stores a string literal,
			the <emphasis>error message</emphasis>. As opposed to the
			string data type, an <literal>error</literal> cannot be
			processed further by passing them as function arguments or
			operator operands. Instead, the first error is propagated
			up from subexpressions to the final result of the expression.
		</para>
	</sect1>
	<sect1 id="constants" xreflabel="Constants">
		<title>Constants</title>
		<sect2 id="stringliterals" xreflabel="String literals">
			<title>String literals</title>
			<para>
				String literals in OpenCReports can be either single or double quoted.
				Some examples:
				<programlisting>"apple"
&#8217;apple&#8217;
"I&#8217;ve eaten an apple"
&#8217;This an "apple".&#8217;</programlisting>
				The values of these strings are:
				<programlisting>apple
apple
I&#8217;ve eaten an apple
This an "apple".</programlisting>
				We can see how the other quoting character can be used as part
				of the string value.
			</para>
			<para>
				String literals can also use BASIC language style double quoting
				to embed a single quoting character used for quoting the string
				itself:
				<programlisting>&#8217;apple&#8217;&#8217;&#8217;
&#8217;apple&#8217;&#8217;pear&#8217;
&#8217;apple&#8217;&#8217;&#8217;&#8217;pear&#8217;
"apple"""
"apple""pear"
"apple""""pear"</programlisting>			
				The values of these strings are:
				<programlisting>apple&#8217;
apple&#8217;pear
apple&#8217;&#8217;pear
apple"
apple"pear
apple""pear</programlisting>
			</para>
			<para>
				String literals can also use C language string continuation if
				there's at least one whitespace character (space, TAB or new line)
				between doubled quoting characters. String continuation can also
				switch quoting characters without whitespace between quoting.
				<programlisting>"apple" "pear"
"apple" &#8217;pear&#8217;
"apple"&#8217;pear&#8217;</programlisting>
				The value of all these strings is:
				<programlisting>applepear</programlisting>
			</para>
		</sect2>
		<sect2 id="numericconstants" xreflabel="Numeric constants">
			<title>Numeric constants</title>
			<para>
				Numeric constants can be integer or fractional numbers with or
				without the so called <emphasis>e-notation</emphasis> or
				scientific notation. Some examples:
				<programlisting>1
1.234
1e4
1e-4
1.234e-5</programlisting>
				E-notation means that that number preceding the letter "e" or
				"E" is multiplied by ten to the power of the number after the
				letter "e" or "E", the latter being an integer value. The
				values of the above examples are:
				<programlisting>1
1.234
10000
0.0001
0.00001234</programlisting>
			</para>
			<para>
				Numbers greater than 0 and less than 1 can be written with
				or without the leading zero.
				<programlisting>0.123
.123</programlisting>
			</para>
			<para>
				Technically, there are no negative numeric constants.
				Instead, the number and the unary minus operator
				(see <xref linkend="unaryprefixops"/>) are initially
				handled separately. Then the expression optimizer
				merges them, creating the negative numeric constant.
			</para>
		</sect2>
		<sect2 id="boolconstants" xreflabel="Boolean constants">
			<title>Boolean constants</title>
			<para>
				Boolean constants evalutate to numeric constans
				<literal>1</literal> and <literal>0</literal>.
				The boolean constants are:
				<programlisting>yes
no
true
false</programlisting>
			</para>
		</sect2>
		<sect2 id="datetimeconstants" xreflabel="Datetime constants">
			<title>Datetime constants</title>
			<para>
				There are no datetime constants per se, although expressions
				like <literal>stodt('1980-06-30 16:00:00')</literal> or
				<literal>interval('2 months')</literal> (i.e. function calls
				with constant arguments that result in a
				<literal>datetime</literal> value) are implicitly turned into
				constants by the expression optimizer.
			</para>
		</sect2>
		<sect2 id="constexpr" xreflabel="Constant expressions">
			<title>Constant expressions</title>
			<para>
				Constant expressions are ones that only contain
				constant values (of any type) and operators or
				functions.
			</para>
		</sect2>
	</sect1>
	<sect1 id="precalcexpr" xreflabel="precalculated">
		<title>Delayed (precalculated) expressions</title>
		<para>
			Reports internally go through the data set twice,
			the second run generates the report output.
			The data set does not (must not) change between the
			two runs. This makes it possible to use so called
			<emphasis>delayed</emphasis> or
			<emphasis>precalculated</emphasis> values. A precalculated
			expression keeps the value computed for the last row
			of the data set during the first run. The second run
			uses this value.
		</para>
		<para>
			By default, expressions are not precalculated.
			Let's call non-precalculated expressions and values
			<emphasis>normal</emphasis>.
		</para>
		<para>
			Expressions need to be explicitly marked as precalculated.
			Marking expressions as precalculated is possible via
			the report XML description, or by the OpenCReports API.
			See <xref linkend="textelemdelayed"/>,
			<xref linkend="setexprdelayed"/>, and
			<xref linkend="phpexprsetdelayed"/>.
		</para>
		<para>
			OpenCReports allows mixing normal and precalculated
			values in the same expression. For example, if a normal
			expression references <xref linkend="precalcvar"/>,
			the result would be intuitively expected.
		</para>
	</sect1>
	<sect1 id="identifiers" xreflabel="Identifiers">
		<title>Identifiers</title>
		<para>
			Expressions may reference query column names, environment
			variables, internal variables and user defined
			<xref linkend="variables"/>.
			These references are called <emphasis>identifiers</emphasis>.
			Their values are evaluated during the report execution.
		</para>
		<sect2 id="identnames">
			<title>Identifier names</title>
			<para>
				Identifiers are in the format <literal>domain.identifier</literal>
				where the domain name or the dot are optional.
			</para>
			<para>
				OpenCReports uses UTF-8 encoding even in identifier
				names. National or accented characters are accepted
				in identifiers.
			</para>
			<para>
				Valid names for <literal>domain</literal> and
				<literal>identifier</literal> may start with an underscore
				or UTF-8 letters and may contain underscore, UTF-8 letters
				and numbers in subsequent characters.
			</para>
		</sect2>
		<sect2 id="queryidents">
			<title>Query field identifiers</title>
			<para>
				Any valid identifier is by default a query column
				reference, with or without the domain name. Examples:
				<programlisting>field_name
field_name5
myquery1.field_name
oszlop_név
lekérdezés.oszlop_név</programlisting>
				In the above example,
				<literal>oszlop_név</literal> means
				<literal>field_name</literal>, and
				<literal>lekérdezés.oszlop_név</literal> means
				<literal>query.field_name</literal> in Hungarian.
				The accented characters are a courtesy of UTF-8.
			</para>
			<para>
				Query field identifiers in expressions are resolved
				by matching them against query names (used as the
				domain) and their field names.
			</para>
			<para>
				If the domain name is specified, a query matching
				the domain name name must be declared for the report,
				either as the primary query, a follower query, or an
				independent query. That query must have a column name
				that matches the identifier name.
			</para>
			<para>
				If the domain name is not specified, the field name
				references are matched against all the queries of the
				report in the order of their declaration. The first
				query with a matching column name will be used for
				that reference.
			</para>
			<para>
				For exceptions (and exceptions from under the exceptions!),
				see below.
			</para>
		</sect2>
		<sect2 id="uservariables" xreflabel="User defined variables">
			<title>User defined variables</title>
			<para>
				Domain <literal>v</literal> signifies user defined
				report variables, which can be used to shortcut expressions.
				Example:
				<programlisting>v.my_variable</programlisting>
			</para>
			<para>
				For details, see <xref linkend="variables"/>
				and <xref linkend="variablenode"/>.
			</para>
		</sect2>
		<sect2 id="speciddomains" xreflabel="Special purpose identifier domains">
			<title>Special purpose identifier domains</title>
			<para>
				Some domain names carry special meaning for the report.
			</para>
			<sect3 id="envidents">
				<title>Environment variables</title>
				<para>
					Domain <literal>m</literal> indicates the domain
					of environment variables.
				</para>
				<para>
					The nature of environment variables depends on the
					languange binding. For example in C, it's the
					environment variables in the operating system.
					In PHP, the identifier name is first matched against
					global PHP variables, and if not found, against
					the operating system environment variables.
					Example:
					<programlisting>m.current_date</programlisting>
				</para>
				<para>
					Since such a setting is controlled outside the report,
					and for the duration of running the report, its value
					cannot (or <emphasis>shouldn't</emphasis>) change,
					environment variable references are optimized into
					constants at the beginning of the report execution.
				</para>
				<para>
					Environment variables can't change during report
					execution in single threaded applications,
					<emphasis>but they can in multi-threaded ones</emphasis>.
					By optimizing environment variables into constants
					in expressions instead of querying the environment
					every time the same expression is evaluated,
					potential data races (that may result in inconsistent
					results) are eliminated.
				</para>
			</sect3>
			<sect3 id="internalvaridents">
				<title>Internal report variables</title>
				<para>
					Domain <literal>r</literal> indicates the domain
					of internal report variables.
				</para>
				<sect4 id="currpage">
					<title>Current page number</title>
					<para>
						<programlisting>r.pageno</programlisting>
						The current page of the report is maintained by
						the report layout during the report run.
						For example, if an expression is evaluated
						on page 4 of the report, and happens to reference
						the current page number variable, then this variable
						will have the value 4 in the result.
					</para>
					<para>
						PDF output supports pagination. Other output formats
						do not. For them the value of this variable is 1.
					</para>
				</sect4>
				<sect4 id="totpages" xreflabel="r.totpages">
					<title>Total number of pages</title>
					<para>
						<programlisting>r.totpages</programlisting>
						This variable carries the total number of pages
						in the report. Its value is maintained by the
						report.
					</para>
					<para>
						Only the PDF output format supports pagination.
						For output formats not supporting pagination,
						the value of this variable is 1 throughout the
						report.
					</para>
					<para>
						This variable is inherently <xref linkend="precalcexpr"/>.
						Expressions like this will intuitively produce the
						expected result:
						<programlisting>printf("Page: %d / %d", r.pageno, r.totpages)</programlisting>
						For example, on the 3rd page of a 5-page report,
						the value would be:
						<programlisting>Page: 3 / 5</programlisting>
					</para>
				</sect4>
				<sect4 id="lineno" xreflabel="Line number variable">
					<title>Line number</title>
					<para>
						<programlisting>r.lineno</programlisting>
						This variable gives the current row (line) number in the
						data set.
					</para>
					<para>
						It can be thought as an alias to the
						<xref linkend="rownumfunc"/> which does
						the same by default. But functions may be overridden
						by user defined functions, while this variable will
						always work as described.
					</para>
				</sect4>
				<sect4 id="detailcount">
					<title>Detail count</title>
					<para>
						<programlisting>r.detailcnt</programlisting>
						This variable works similarly to the
						<xref linkend="lineno"/> and
						<xref linkend="rownumfunc"/>,
						except it restarts from 1 when
						a field header is emitted on the report.
						See <xref linkend="detailnode"/>.
					</para>
					<para>
						With the default behaviour of the field header
						regarding breaks (see
						<xref linkend="reportfhpriority"/>),
						i.e. when field header is printed on the top of every page,
						<literal>r.detailcnt</literal> works as a per page
						line count value.
					</para>
					<para>
						When the report field header priority is set to
						<emphasis>low</emphasis>, the effect may be more
						emphasized because the value of this variable is
						reset more often.
					</para>
				</sect4>
				<sect4 id="fieldval">
					<title>Field value</title>
					<para>
						<programlisting>r.value</programlisting>
						Data on the report is represented by field
						description. Along with the data expression,
						supplementary expressions are used for metadata
						that make up the displaying of the value.
						Such supplementary expression exist for the
						foreground and background colors, the formatting
						of the value, and others.
					</para>
					<para>
						The supplementary expressions may reference the field
						value, without having to type out the field expression
						multiple times.
					</para>
					<para>
						Using <literal>r.value</literal> also helps reducing
						the report runtime because the value expression is not
						computed multiple times. This is a manual
						optimization.
					</para>
					<para>
						Referencing <literal>r.value</literal> is only possible
						for supplementary expressions in the same field
						description. This variable cannot cross-reference other
						field descriptions, or anything not in the same scope.
						For this purpose, there are user
						<xref linkend="variables"/>.
					</para>
				</sect4>
				<sect4 id="outputformatname">
					<title>Report output format value</title>
					<para>
						<programlisting>r.format</programlisting>
						This variable returns the current output format
						name as a string. For example: <literal>PDF</literal>,
						<literal>HTML</literal>, etc.
					</para>
				</sect4>
				<sect4 id="exprself" xreflabel="Expression self reference">
					<title>Expression self reference</title>
					<para>
						<programlisting>r.self</programlisting>
						This variable references the previous result of
						the expression. It is used in iterative expressions,
						like in user-defined <xref linkend="variables"/>.
						It can also be used in any user defined expression.
					</para>
				</sect4>
				<sect4 id="uservarsubexpr">
					<title>Subexpressions of user-defined variables</title>
					<para>
						<programlisting>r.baseexpr
r.ignoreexpr
r.intermedexpr
r.intermed2expr</programlisting>
						These variables are references for the four
						subexpressions that potentially make up a
						user-defined custom variable. The expressions in
						order are: base expression, the row ignoring
						expression and two intermediary expressions.
					</para>
					<para>
						Actually, there's a fifth subexpression that exists
						in every user defined variable, namely the result
						expression. It's reference is simply the user variable
						reference, see <xref linkend="uservariables"/> and
						<xref linkend="customvarattrs"/>.
					</para>
					<para>
						They are evaluated in this order:
						<itemizedlist>
							<listitem override="bullet">
								<para>
									<literal>r.baseexpr</literal>
								</para>
								<para>
									The base expression must not reference
									any of the others of
									<literal>r.ignoreexpr</literal>,
									<literal>r.intermedexpr</literal>,
									and <literal>r.intermed2expr</literal>.
								</para>
							</listitem>
							<listitem override="bullet">
								<para>
									<literal>r.ignoreexpr</literal>
								</para>
								<para>
									The data row ignoring expression must not reference
									<literal>r.intermedexpr</literal> and
									<literal>r.intermed2expr</literal>,
									but it can reference
									<literal>r.baseexpr</literal>.
								</para>
							</listitem>
							<listitem override="bullet">
								<para>
									<literal>r.intermedexpr</literal>
								</para>
								<para>
									The first intermediary expression can
									reference <literal>r.baseexpr</literal>
									and <literal>r.ignoreexpr</literal>,
									but it must not reference <literal>r.intermed2expr</literal>.
								</para>
							</listitem>
							<listitem override="bullet">
								<para>
									<literal>r.intermed2expr</literal>
								</para>
								<para>
									The second intermediary expression can
									reference any of
									<literal>r.baseexpr</literal>,
									<literal>r.ignoreexpr</literal>,
									and <literal>r.intermedexpr</literal>.
								</para>
							</listitem>
							<listitem override="bullet">
								<para>
									The result expression, which has no internal
									variable name. It can reference all of
									<literal>r.baseexpr</literal>,
									<literal>r.ignoreexpr</literal>,
									<literal>r.intermedexpr</literal> and
									<literal>r.intermed2expr</literal>.
								</para>
							</listitem>
						</itemizedlist>
					</para>
					<para>
						For example, a running average over a data series
						needs two intermediary expressions: one for
						the sum of the values, the other for the number
						of values in the series. The result is the
						sum of values divided by the number of values.
					</para>
					<para>
						Their usage is only valid when declaring a custom
						user defined variable.
					</para>
				</sect4>
			</sect3>
			<sect3 id="quotedidents">
				<title>Quoted and dot-prefixed identifiers</title>
				<para>
					Both <literal>domain</literal> and <literal>identifier</literal>
					names may be quoted or unquoted. Quoting names allow using
					semi-reserved and reserved words as identifiers and also
					allow special characters in identifier names. Examples:
					<programlisting>query.field_name1
query."field_name2"
query."field with space in the name"
"query2".field_name3
"query2"."and"</programlisting>
				</para>
			</sect3>
			<sect3 id="dotprefixedidents">
				<title>Dot-prefixed identifiers</title>
				<para>
					A dot-prefixed identifier is one where the domain name
					is not specified, but the identifier name is prefixed
					with a dot. Examples:
					<programlisting>.field_name
."field_name"</programlisting>
				</para>
				<para>
					The boolean constants are semi-reserved words.
					They can be used as identifiers with dot-prefixed
					identifier names without a domain name and without
					quoting:
					<programlisting>.yes
.no
.true
.false
yes.no</programlisting>
					The above unquoted identifiers are equivalent with
					these quoted ones below:
					<programlisting>."yes"
."no"
."true"
."false"
"yes"."no"</programlisting>
				</para>
				<para>
					Operator names are reserved words, e.g. <literal>and</literal>
					and <literal>or</literal>. They cannot be used with dot-prefixed
					operator names without quoting, as it would cause an
					expression syntax error. But they can be used as quoted
					identifiers, in case you would want to use such a query name
					and column name:
					<programlisting>."and"
."or"
"and"."or"</programlisting>
				</para>
			</sect3>
			<sect3 id="quotedinternaldomains">
				<title>Quoted special purpose identifier domains</title>
				<para>
					When identifier domains are quoted, they lose their special
					meaning and the identifiers become query field identifiers.
					Of course, in this case, such a query name must exist and
					the query must have a field name specified in the identifier.
					Examples:
					<programlisting>"m".current_date
"r".totpages
"v".my_variable</programlisting>
				</para>
			</sect3>
		</sect2>
	</sect1>
	<sect1 id="opsandfunc" xreflabel="Operators and functions">
		<title>Operators and functions</title>
		<para>
			OpenCReports expressions can use several operators and functions.
			The operator precedence is mostly as expected from the C
			programming language. One notable exception is implicit
			multiplication. The precedence classes are as below,
			in increasing order of precedence.
		</para>
		<para>
			Note that all of the operators are implemented internally
			as a function call to the equivalent function. Since every
			function may be overridden by user functions, the operators
			may work differently than the documentation.
		</para>
		<sect2 id="ternaryop" xreflabel="Ternary operator">
			<title>Ternary operator</title>
			<para>
				The ternary operator works as in the C, PHP and other
				languages:
				<programlisting>expression1 ? expression2 : expression3</programlisting>
				It's evaluated as follows: if the value of numeric
				<literal>expression1</literal> is <literal>true</literal>
				(i.e. non-zero), then the result is the <literal>expression2</literal>,
				otherwise it's <literal>expression3</literal>.
				Type of <literal>expression2</literal> and
				<literal>expression3</literal> may differ, i.e. the
				result type will be the type of the underlying expression
				but it can result in runtime errors.
			</para>
			<para>
				Internally, it's implemented using the
				<xref linkend="iiffunc"/>.
			</para>
		</sect2>
		<sect2 id="logicops">
			<title>Boolean logic operators with two operands</title>
			<para>
				Logic OR can be written as <literal>||</literal> or
				<literal>or</literal>. Example: <literal>a || b</literal>
			</para>
			<para>
				Logic AND can be written as <literal>&amp;&amp;</literal> or
				<literal>and</literal>. Logic AND has precedence over OR.
				Example: <literal>a &amp;&amp; b</literal>
			</para>
			<para>
				Internally, they are implemented using the
				<xref linkend="landfunc"/> and
				<xref linkend="lorfunc"/> functions.
			</para>
		</sect2>
		<sect2 id="bitwiseops">
			<title>Bitwise operators with two operands</title>
			<para>
			The bitwise operators in this precedence class and in their
			increasing order of precedence are:
			bitwise OR (<literal>|</literal>) and
            bitwise AND (<literal>&amp;</literal>).
			</para>
		</sect2>
		<sect2 id="eqneops">
			<title>Equality and inequality comparison operators</title>
			<para>
				The equality comparison operator can be written as
				<literal>=</literal> or <literal>==</literal>.
			</para>
			<para>
				The inequality comparison operator can be written as
				<literal>&lt;&gt;</literal> or <literal>!=</literal>.
			</para>
			<sect3 id="vecteqneops">
				<title>Equality and inequality comparison operators on vectors</title>
				<para>
					Vector equality and inequality comparisons
					have the same precedence as scalar comparisons.
					These are not vectors in the mathematical sense,
					but a comma separated list of scalars inside
					brackets (<literal>[ ... ]</literal>), with
					<literal>op</literal> being any of the
					equality or inequality comparison operators:
					<programlisting>[ expa1, expa2, ... ] op [ expb1, expb2, ... ]</programlisting>
				</para>
				<para>
					Such comparisons are expanded into a logic operator
					form:
					<programlisting>(expa1 op expb1) and (expa2 op expb2) and ...</programlisting>
				</para>
				<para>
					Please, note that because of the mechanical conversion
					from the vector form to the expanded logic operator form,
					the following two lines have different meaning:
					<programlisting>not ([ expa1, expa2, ... ] = [ expb1, expb2, ... ])
[ expa1, expa2, ... ] != [ expb1, expb2, ... ]</programlisting>
				</para>
			</sect3>
		</sect2>
		<sect2 id="cmpops">
			<title>Other comparison operators</title>
			<para>
				Less-than (<literal>&lt;</literal>),
				less-or-equal (<literal>&lt;=</literal>),
				greater-than (<literal>&gt;</literal>) and
				greater-or-equal (<literal>&gt;=</literal>).
			</para>
			<sect3 id="vectcmpops">
				<title>Other comparison operators on vectors</title>
				<para>
					Vector comparisons using <literal>&lt;</literal>,
					<literal>&gt;</literal>, etc. operators have
					the same precedence as their scalar counterpart.
					These are also expanded into the logic form, see
					<xref linkend="vecteqneops"/> above.
				</para>
			</sect3>
		</sect2>
		<sect2 id="shiftops">
			<title>Bitwise shifts</title>
			<para>
				Bitwise shift left (<literal>a &gt;&gt; b</literal>) and
				bitwise shift right (<literal>a &lt;&lt; b</literal>).
			</para>
		</sect2>
		<sect2 id="addsubops">
			<title>Addition and subtraction</title>
			<para>
				<literal>a + b</literal> and <literal>a - b</literal>.
			</para>
		</sect2>
		<sect2 id="muldivmodops">
			<title>Multiplication, division and modulo (remainder)</title>
			<para>
				<literal>a * b</literal>, <literal>a / b</literal> and
				<literal>a % b</literal>.
			</para>
		</sect2>
		<sect2 id="powop">
			<title>Power-of operator</title>
			<para>
				<literal>a ^ b</literal> works as a-to-the-power-of-b.
			</para>
		</sect2>
		<sect2 id="factop">
			<title>Factorial operator</title>
			<para>
				<literal>a!</literal>, the '!' sign used as postfix operator.
			</para>
		</sect2>
		<sect2 id="unaryprefixops" xreflabel="Unary operators">
			<title>Unary plus and minus, logical and bitwise NOT, prefix increment and decrement</title>
			<para>
				Unary plus (<literal>+a</literal>), unary minus (<literal>-a</literal>),
				logical NOT (<literal>!a</literal>, '!' used as prefix operator),
				bitwise NOT (<literal>~a</literal>), prefix increment (<literal>++a</literal>)
				and prefix decrement (<literal>--a</literal>).
			</para>
		</sect2>
		<sect2 id="postfixops">
			<title>Postfix increment and decrement</title>
			<para>
				Postfix increment (<literal>a++</literal>) and decrement
				(<literal>a--</literal>).
			</para>
		</sect2>
		<sect2 id="funccalls">
			<title>Function calls and implicit multiplication</title>
			<para>
				Function calls execute a function on operands:
				<literal>function(operand[, ...])</literal>. A function name
				is a single word known by OpenCReports at the time of parsing,
				either as a built-in function, or a user-supplied one.
				The function name cannot have a leading dot or be a
				domain-qualified identifier.
			</para>
			<para>
				Implicit multiplication is when two distinct operands are in
				juxtaposition, in other words they are written side by side
				without any whitespace. In this case, there is an implied
				multiplication between them that acts with higher precedence
				than regular multiplication or division. Implicit multiplication
				is applicable in these situations:
				<itemizedlist>
					<listitem>
						<para>
							A numeric constant juxtaposed with an identifier,
							the numeric constant is the on the left side.
							<programlisting>2x</programlisting>
						</para>
					</listitem>
					<listitem>
						<para>
							A numeric constant juxtaposed with an expression inside
							parentheses. The constant can be on either side of the
							expression.
							<programlisting>2(a+b)
(a+b)2</programlisting>
						</para>
					</listitem>
					<listitem>
						<para>
							An identifier juxtaposed with an expression inside
							parentheses, the identifier is on the left side of the
							expression.
							<programlisting>x(a+b)</programlisting>
						</para>
						<para>
							This is only treated as implicit multiplication
							if the following conditions are met:
							<itemizedlist>
								<listitem>
									<para>
										the <literal>x</literal> identifier
										is not a function name at the time
										of parsing
									</para>
								</listitem>
								<listitem>
									<para>
										there is a single expression
										inside the parentheses
									</para>
								</listitem>
							</itemizedlist>
						</para>
						<para>
							If any of the conditions below are true,
							the expression is treated as a function call:
							<itemizedlist>
								<listitem>
									<para>
										<literal>x</literal> is a known
										function name
									</para>
								</listitem>
								<listitem>
									<para>
										there is no expression inside the parentheses
									</para>
								</listitem>
								<listitem>
									<para>
										a series of comma delimited
										expressions is inside the
										parentheses
									</para>
								</listitem>
							</itemizedlist>
							The function call validity is checked against the number
							of operands, with a potential parser error. If there's
							an ambiguity between function names and identifiers
							provided by data sources, it can be avoided by using
							dot-prefixed or dot-prefixed and quoted identifiers,
							or fully qualified identifiers in the form of
							<literal>query.identifier</literal>.
						</para>
					</listitem>
					<listitem>
						<para>
							An expression inside parentheses juxtaposed with an identifier
							on the right side.
							<programlisting>(a+b)a</programlisting>
						</para>
					</listitem>
					<listitem>
						<para>
							Two expressions inside parentheses juxtaposed with each other.
							<programlisting>(a+b)(c+d)</programlisting>
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				Implicit multiplication is NOT applicable in these situations,
				besides the exceptions already explained above:
				<itemizedlist>
					<listitem>
						<para>
							An identifier juxtaposed with a numeric constant,
							the numeric constant is the on the right side.
							<programlisting>x2</programlisting>
						</para>
						<para>
							Since an identifier name may include digits as the
							second and subsequent characters, the numeric
							constant, or at least its integer part is simply
							recognized as part of the identifier name itself
							according to the token matching. This can also result
							in syntax errors when not handled with care.
						</para>
					</listitem>
					<listitem>
						<para>
							An identifier juxtaposed with another identifier.
							<programlisting>ab</programlisting>
						</para>
						<para>
							The reason is the same as in the preceding case:
							there is only a single identifier according to
							token matching.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="parens">
			<title>Parentheses</title>
			<para>
				Parenthesized expressions are always computed first.
			</para>
		</sect2>
		<sect2 id="tokmatchandprec">
			<title>A note on token matching, precendence and syntax errors</title>
			<para>
				Expression parsing works on two levels: token matching and
				applying grammar. Token matching breaks up the expression
				string into tokens in a greedy way: without whitepace
				delimiters, the longest possible token is chosen.
			</para>
			<para>
				This may lead to slight confusion when coupled with
				implicit multiplication. For example, the expression
				<literal>2e-1e</literal> is broken up into two tokens:
				<literal>2e-1</literal> juxtaposed with
				<literal>e</literal>. The first token is interpreted as
				a numeric constant using <emphasis>e-notation</emphasis>
				(so that it will mean <literal>2 * 10^(-1)</literal>) and
				the second is the identifier <literal>e</literal>, leading
				to the meaning <literal>0.2 * e</literal>. This is
				unambiguous for the computer, but can be somewhat confusing
				to the the user reading or writing expressions. To avoid
				any confusion, don't use implicit multiplication and use
				whitespace and parentheses gratituously.
			</para>
			<para>
				Expression parsing handles precedence and whitespaces.
				For example, these below do not mean exactly the same:
				<programlisting>a++ + ++b
a+++++b</programlisting>
				The former is obvious, but the latter may be a little
				surprising: <literal>(a++)++ + b</literal>.
				This is how the lexer or token matching works, i.e.
				it matches the longest applicable token first.
			</para>
			<para>
				If <literal>a</literal> and <literal>b</literal> are
				numbers, then the result of both expressions is
				<literal>a + b + 2</literal>, but the way it's arrived at
				is different.
			</para>
			<para>
				However, the <literal>++</literal> (increment) and
				<literal>--</literal> (decrement) operators may be
				interpreted differently for other types. For example,
				if both <literal>a</literal> and <literal>b</literal> are
				of the <literal>datetime</literal> type, then the result
				also depends on whether one of them is an interval datetime,
				and the other (regular) datetime value has valid time or not.
				To make the expression unambiguous, whitespace and/or
				parenthesis should be used.
			</para>
			<para>
				Another ambiguous example: <programlisting>a++b</programlisting>
				The above may be interpreted as <literal>a + +b</literal>
				but since no whitespace is used, the tokenizer is free to
				interpret it as <literal>a++ b</literal>, because
				<literal>++</literal> is longer than <literal>+</literal>,
				so the former is matched first as an operator token.
				This is a syntax error and expression parsing throws
				an error for it.
			</para>
		</sect2>
	</sect1>
</chapter>

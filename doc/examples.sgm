<chapter id="examples" xreflabel="Examples">
	<title>Examples</title>
	<sect1 id="example1">
		<title>Simple report example</title>
		<para>
			This example below uses a PostgreSQL query
			to generate a report in PDF output format,
			with many settings used as default:
			<itemizedlist>
				<listitem override="bullet">
					<para>
						Courier font
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						12 points font size
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						automatically calculated field width
						where it's not specified (note the
						header and footer fields)
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						black font color
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						white background
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						default paper size
					</para>
					<para>
						Note that this particular default setting
						depends on your location, or rather, the
						computer's country settings. For example,
						the U.S. uses the Letter page size as default.
						On the other hand, most of Europe uses the A4
						page size.
					</para>
				</listitem>
			</itemizedlist>
			and so on.
		</para>
		<sect2 id="example1data">
			<title>Data</title>
			<para>
				Data is created as follows in a database called
				<literal>ocrpttest</literal> using the user
				<literal>ocrpt</literal>
				<programlisting>create table flintstones (id serial, name text, property text, age int, adult bool);
insert into flintstones (name, property, age, adult)
values
('Fred Flintstone','strong',31,true),
('Wilma Flintstone','charming',28,true),
('Pebbles Flintstone','young',0.5,false);</programlisting>
			</para>
			<para>
				The data looks like this when queried:
				<programlisting>ocrpttest=&gt; select * from flintstones;
 id |        name        | property | age | adult 
----+--------------------+----------+-----+-------
  1 | Fred Flintstone    | strong   |  31 | t
  2 | Wilma Flintstone   | charming |  28 | t
  3 | Pebbles Flintstone | young    |   1 | f
(3 rows)</programlisting>
			</para>
		</sect2>
		<sect2 id="example1codec">
			<title>C program code</title>
			<para>
				The program code uses a minimalistic approach,
				putting everything into the report XML instead.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();

    if (!ocrpt_parse_xml(o, "example1.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}</programlisting>
			</para>
		</sect2>
		<sect2 id="example1codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();

if (!$o-&gt;parse_xml("example1.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example1codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				<programlisting>&lt;?php
$r = rlib_init();

if (!rlib_add_report($r, "example1.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example1xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example1.xml</literal>.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE OpenCReport SYSTEM "opencreport.dtd"&gt;
&lt;OpenCReport&gt;
    &lt;Datasources&gt;
        &lt;Datasource name="pgsql" type="postgresql" dbname="ocrpttest" user="ocrpt" /&gt;
    &lt;/Datasources&gt;

    &lt;Queries&gt;
        &lt;Query name="q" datasource="pgsql"&gt;select * from flintstones;&lt;/Query&gt;
    &lt;/Queries&gt;

    &lt;Report query="q"&gt;
        &lt;PageHeader&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;literal width="20"&gt;The Flintstones&lt;/literal&gt;
                    &lt;field value="printf('Page %d / %d', r.pageno, r.totpages)" align="right" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/PageHeader&gt;

        &lt;PageFooter&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;literal&gt;The Flintstones&lt;/literal&gt;
                    &lt;field value="printf('Page %d / %d', r.pageno, r.totpages)" align="right" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/PageFooter&gt;

        &lt;Detail&gt;
            &lt;FieldHeaders&gt;
                &lt;Output&gt;
                    &lt;Line&gt;
                        &lt;literal width="4" align="'right'"&gt;ID&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="20"&gt;Name&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="8" align="'center'"&gt;Property&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="6"&gt;Age&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="5" align="'center'"&gt;Adult&lt;/literal&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldHeaders&gt;

            &lt;FieldDetails&gt;
                &lt;Output&gt;
                    &lt;Line&gt;
                        &lt;field width="4" align="right" value="id" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="20" value="name" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="8" align="'center'" value="property" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="6" align="'right'" value="age" format="'%.2d'" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field value="adult ? 'yes' : 'no'" width="5" align="'center'"/&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldDetails&gt;
        &lt;/Detail&gt;
    &lt;/Report&gt;
&lt;/OpenCReport&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example1pdf">
			<title>Report PDF result</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/example1.png" align="center" />
					</imageobject>
				</inlinemediaobject>
			</para>
		</sect2>
	</sect1>
	<sect1 id="example2">
		<title>Simple report example with data access in code</title>
		<para>
			This example below is mostly the same as the
			previous one, with one exception: the database
			access is done from program code instead of
			putting it into the report XML description file.
		</para>
		<sect2 id="example2data">
			<title>Data</title>
			<para>
				As the same data is used as in the previous example,
				it's not duplicated here.
			</para>
		</sect2>
		<sect2 id="example2codec">
			<title>C program code</title>
			<para>
				The program code adds the datasource and
				the query before loading the report XML
				description. The order of these are not
				important, as the <literal>ocrpt_execute()</literal>
				call performs matching expressions with
				query column names internally.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();
    ocrpt_datasource *ds = ocrpt_datasource_add_postgresql(o, "pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);

    ocrpt_query_add_postgresql(ds, "q", "select * from flintstones;");

    if (!ocrpt_parse_xml(o, "example2.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}</programlisting>
			</para>
		</sect2>
		<sect2 id="example2codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();
$ds = $o-&gt;datasource_add_postgresql("pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);

$ds-&gt;query_add("q", "select * from flintstones;");

if (!$o-&gt;parse_xml("example2.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example2codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				<programlisting>&lt;?php
$r = rlib_init();

rlib_add_datasource_postgres($r, "pgsql", "dbname=ocrpttest user=ocrpt");
rlib_add_query_as($r, "pgsql", "select * from flintstones;", "q");

if (!rlib_add_report($r, "example2.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example2xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example2.xml</literal>.
				Note that the <literal>&lt;Datasources&gt;</literal>
				and <literal>&lt;Queries&gt;</literal> nodes
				that describe the database access and the query
				in the previous example are missing here.
				The equivalent code was added to the different
				program codes above.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE OpenCReport SYSTEM "opencreport.dtd"&gt;
&lt;OpenCReport&gt;
    &lt;Report query="q"&gt;
        &lt;PageHeader&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;literal width="20"&gt;The Flintstones&lt;/literal&gt;
                    &lt;field value="printf('Page %d / %d', r.pageno, r.totpages)" align="right" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/PageHeader&gt;

        &lt;PageFooter&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;literal&gt;The Flintstones&lt;/literal&gt;
                    &lt;field value="printf('Page %d / %d', r.pageno, r.totpages)" align="right" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/PageFooter&gt;

        &lt;Detail&gt;
            &lt;FieldHeaders&gt;
                &lt;Output&gt;
                    &lt;Line&gt;
                        &lt;literal width="4" align="'right'"&gt;ID&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="20"&gt;Name&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="8" align="'center'"&gt;Property&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="6"&gt;Age&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="5" align="'center'"&gt;Adult&lt;/literal&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldHeaders&gt;

            &lt;FieldDetails&gt;
                &lt;Output&gt;
                    &lt;Line&gt;
                        &lt;field width="4" align="right" value="id" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="20" value="name" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="8" align="'center'" value="property" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="6" align="'right'" value="age" format="'%.2d'" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field value="adult ? 'yes' : 'no'" width="5" align="'center'"/&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldDetails&gt;
        &lt;/Detail&gt;
    &lt;/Report&gt;
&lt;/OpenCReport&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example2pdf">
			<title>Report PDF result</title>
			<para>
				The result is identical to the previous example,
				it's not duplicated here.
			</para>
		</sect2>
	</sect1>
	<sect1 id="example3">
		<title>Colors, images, horizontal lines and fonts</title>
		<para>
			This example below shows that reports may be more
			exciting, with colors and images and other visual
			elements and settings.
		</para>
		<sect2 id="example3data">
			<title>Data</title>
			<para>
				Data is created as follows in the same database
				as the first example.
				<programlisting>create table flintstones2
(id serial primary key, name text, filename text);

insert into flintstones2 (name, filename)
values
('Fred Flintstone', 'FredFlintstone.png'),
('Wilma Flintstone', 'WilmaFlintstone.png'),
('Pebbles Flintstone', 'PebblesFlintstone.png'),
('Barney Rubble', 'BarneyRubble.png'),
('Betty Rubble', 'BettyRubble.png'),
('Bamm-Bamm Rubble', 'BammBammRubble.png'),
('The Great Gazoo', 'TheGreatGazoo.png');</programlisting>
			</para>
			<para>
				The data looks like this when queried:
				<programlisting>ocrpttest=&gt; select * from flintstones2;
 id |        name        |       filename        
----+--------------------+-----------------------
  1 | Fred Flintstone    | FredFlintstone.png
  2 | Wilma Flintstone   | WilmaFlintstone.png
  3 | Pebbles Flintstone | PebblesFlintstone.png
  4 | Barney Rubble      | BarneyRubble.png
  5 | Betty Rubble       | BettyRubble.png
  6 | Bamm-Bamm Rubble   | BammBammRubble.png
  7 | The Great Gazoo    | TheGreatGazoo.png
(7 rows)</programlisting>
			</para>
		</sect2>
		<sect2 id="example3codec">
			<title>C program code</title>
			<para>
				The program code is almost identical to the
				second example with the database connection
				and the query added to program code, but
				it loads a different report XML description.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();
    ocrpt_datasource *ds = ocrpt_datasource_add_postgresql(o, "pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);

    ocrpt_query_add_postgresql(ds, "q", "select * from flintstones2;");

    if (!ocrpt_parse_xml(o, "example3.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}</programlisting>
			</para>
		</sect2>
		<sect2 id="example3codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();
$ds = $o-&gt;datasource_add_postgresql("pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);

$ds-&gt;query_add("q", "select * from flintstones2;");

if (!$o-&gt;parse_xml("example3.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example3codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				<programlisting>&lt;?php
$r = rlib_init();

rlib_add_datasource_postgres($r, "pgsql", "dbname=ocrpttest user=ocrpt");
rlib_add_query_as($r, "pgsql", "select * from flintstones2;", "q");

if (!rlib_add_report($r, "example3.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example3xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example3.xml</literal>.
			</para>
			<para>
				Note the new settings:
				<literal>fontName="..."</literal>,
				<literal>fontSize="..."</literal>,
				<literal>bold="..."</literal>,
				<literal>italic="..."</literal>,
				<literal>color="..."</literal>,
				<literal>bgcolor="..."</literal>
				and others.
			</para>
			<para>
				Also note that the <literal>value="..."</literal>
				setting indicates the file names that are used with
				<literal>&lt;Image&gt;</literal> elements in the
				report XML description. These files must be
				present in the report application work directory,
				or can be found in <xref linkend="searchpaths"/>
				added either in the report XML description or via
				programming code.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE OpenCReport SYSTEM "opencreport.dtd"&gt;
&lt;OpenCReport&gt;
    &lt;Report query="q"&gt;
        &lt;PageHeader&gt;
            &lt;Output&gt;
                &lt;Image width="227" height="92" value="'A_Flintstones_logo.png'" /&gt;
                &lt;Line&gt;
                    &lt;field fontName="'Arial'" fontSize="20" value="printf('Page %d / %d', r.pageno, r.totpages)" align="right" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/PageHeader&gt;

        &lt;PageFooter&gt;
            &lt;Output&gt;
                &lt;Image width="227" height="92" value="'A_Flintstones_logo.png'" /&gt;
                &lt;Line&gt;
                    &lt;field fontName="'Times New Roman'" fontSize="20" value="printf('Page %d / %d', r.pageno, r.totpages)" align="right" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/PageFooter&gt;

        &lt;Detail&gt;
            &lt;FieldHeaders&gt;
                &lt;Output&gt;
                    &lt;HorizontalLine size="2" color="'black'" /&gt;
                    &lt;HorizontalLine size="2" color="'green'" /&gt;
                    &lt;Line bgcolor="'green'" bold="yes" fontSize="18"&gt;
                        &lt;literal fontName="'Petaluma Script'" width="7" align="'center'"&gt;Picture&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal fontName="'Carlito'" italic="yes"&gt;Name&lt;/literal&gt;
                    &lt;/Line&gt;
                    &lt;HorizontalLine size="2" color="'green'" /&gt;
                    &lt;HorizontalLine size="2" color="'black'" /&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                &lt;/Output&gt;
            &lt;/FieldHeaders&gt;

            &lt;FieldDetails&gt;
                &lt;Output&gt;
                    &lt;Line fontSize="18"&gt;
                        &lt;Image textWidth="7" bgcolor="'yellow'" align="'center'" value="filename" /&gt;
                        &lt;literal width="1" bgcolor="'yellow'" /&gt;
                        &lt;field color="'red'" bgcolor="'yellow'" value="name" /&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldDetails&gt;
        &lt;/Detail&gt;
    &lt;/Report&gt;
&lt;/OpenCReport&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example3pdf">
			<title>Report PDF result</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/example3.png" align="center" />
					</imageobject>
				</inlinemediaobject>
			</para>
		</sect2>
	</sect1>
	<sect1 id="example4">
		<title>Report variables and breaks</title>
		<para>
			This example below exercises report variables and breaks.
			Breaks use changes in a data series, like a different
			last name. For more information, see <xref linkend="breaksnode"/>.
		</para>
		<sect2 id="example4data">
			<title>Data</title>
			<para>
				Data is created as follows in the same database
				using the same user as the first example.
				<programlisting>create table flintstones3 (id serial, firstname text, lastname text, age int);

insert into flintstones3 (firstname, lastname, age)
values
('Fred', 'Flintstone', 31),
('Wilma', 'Flintstone', 28),
('Pebbles', 'Flintstone', 2),
('Barney', 'Rubble', 28),
('Betty', 'Rubble', 27),
('Bamm-Bamm', 'Rubble', 2),
('The Great', 'Gazoo', 600);</programlisting>
			</para>
			<para>
				The data looks like this when queried:
				<programlisting>ocrpttest=&gt; select * from flintstones3;
 id | firstname |  lastname  | age 
----+-----------+------------+-----
  1 | Fred      | Flintstone |  31
  2 | Wilma     | Flintstone |  28
  3 | Pebbles   | Flintstone |   2
  4 | Barney    | Rubble     |  28
  5 | Betty     | Rubble     |  27
  6 | Bamm-Bamm | Rubble     |   2
  7 | The Great | Gazoo      | 600
(7 rows)</programlisting>
			</para>
		</sect2>
		<sect2 id="example4codec">
			<title>C program code</title>
			<para>
				The program code is identical to the second and
				third examples, except that it uses a different
				report XML description.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();
    ocrpt_datasource *ds = ocrpt_datasource_add_postgresql(o, "pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);

    ocrpt_query_add_postgresql(ds, "q", "select * from flintstones3;");

    if (!ocrpt_parse_xml(o, "example4.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}</programlisting>
			</para>
		</sect2>
		<sect2 id="example4codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();
$ds = $o-&gt;datasource_add_postgresql("pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);

$ds-&gt;query_add("q", "select * from flintstones3;");

if (!$o-&gt;parse_xml("example4.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example4codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				<programlisting>&lt;?php
$r = rlib_init();

rlib_add_datasource_postgres($r, "pgsql", "dbname=ocrpttest user=ocrpt");
rlib_add_query_as($r, "pgsql", "select * from flintstones3;", "q");

if (!rlib_add_report($r, "example4.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example4xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example4.xml</literal>.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE OpenCReport SYSTEM "opencreport.dtd"&gt;
&lt;OpenCReport&gt;
    &lt;Report query="q"&gt;
        &lt;Variables&gt;
            &lt;Variable name="var1" value="id" type="count" /&gt;
            &lt;Variable name="var2" value="age" type="average" precalculate="yes" resetonbreak="family" /&gt;
            &lt;Variable name="var3" value="age" type="average" precalculate="yes" /&gt;
            &lt;Variable name="var4" value="age" type="sum" /&gt;
            &lt;Variable name="var5" value="age" type="sum" precalculate="yes" /&gt;
        &lt;/Variables&gt;

        &lt;Breaks&gt;
            &lt;Break name="family"&gt;
                &lt;BreakFields&gt;
                    &lt;BreakField value="lastname" /&gt;
                &lt;/BreakFields&gt;
            &lt;/Break&gt;
        &lt;/Breaks&gt;

        &lt;Detail&gt;
            &lt;FieldHeaders&gt;
                &lt;Output&gt;
                    &lt;HorizontalLine size="2" color="'black'" /&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                    &lt;Line bold="yes"&gt;
                        &lt;literal width="2" align="'center'"&gt;ID&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="20"&gt;Name&lt;/literal&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="8" align="'right'"&gt;Age&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;Count&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;Avg age&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;Avg age&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;Age sum&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;Age sum&lt;/literal&gt;
                    &lt;/Line&gt;
                    &lt;Line bold="yes"&gt;
                        &lt;literal width="2"/&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="20"/&gt;
                        &lt;literal width="1"/&gt;
                        &lt;literal width="8"/&gt;
                        &lt;literal width="8"/&gt;
                        &lt;literal width="8" align="'right'"&gt;per fam&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;global&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;running&lt;/literal&gt;
                        &lt;literal width="8" align="'right'"&gt;total&lt;/literal&gt;
                    &lt;/Line&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                    &lt;HorizontalLine size="2" color="'black'" /&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                &lt;/Output&gt;
            &lt;/FieldHeaders&gt;

            &lt;FieldDetails&gt;
                &lt;Output&gt;
                    &lt;Line&gt;
                        &lt;field width="2" align="'right'" value="id" /&gt;
                        &lt;literal width="1" /&gt;
                        &lt;field width="20" value="firstname + ' ' + lastname" /&gt;
                        &lt;literal width="1"/&gt;
                        &lt;field width="8" value="age" format="'%.2d'" align="'right'" /&gt;
                        &lt;field width="8" value="v.var1" format="'%.2d'" align="'right'" /&gt;
                        &lt;field width="8" value="v.var2" format="'%.2d'" align="'right'" /&gt;
                        &lt;field width="8" value="v.var3" format="'%.2d'" align="'right'" /&gt;
                        &lt;field width="8" value="v.var4" format="'%.2d'" align="'right'" /&gt;
                        &lt;field width="8" value="v.var5" format="'%.2d'" align="'right'" /&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldDetails&gt;
        &lt;/Detail&gt;
    &lt;/Report&gt;
&lt;/OpenCReport&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example4pdf">
			<title>Report PDF result</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/example4.png" align="center" />
					</imageobject>
				</inlinemediaobject>
			</para>
		</sect2>
	</sect1>
	<sect1 id="example5">
		<title>Follower queries</title>
		<para>
			This example below exercises a basic follower query along
			with the main query.
			For more information, see <xref linkend="followerqueries"/>.
		</para>
		<sect2 id="example5data">
			<title>Data</title>
			<para>
				Data is created as follows in the same database
				using the same user as the first example.
				<programlisting>create table flintstones4 (id serial, firstname text);
create table flintstones5 (id serial, lastname text);

insert into flintstones4 (firstname)
values
('Fred'),
('Wilma'),
('Pebbles'),
('Barney'),
('Betty'),
('Bamm-Bamm'),
('The Great');

insert into flintstones5 (lastname)
values
('Flintstone'),
('Flintstone'),
('Flintstone'),
('Rubble'),
('Rubble'),
('Rubble'),
('Gazoo');</programlisting>
			</para>
			<para>
				The data looks like this when queried:
				<programlisting>ocrpttest=&gt; select * from flintstones4;
 id | firstname 
----+-----------
  1 | Fred
  2 | Wilma
  3 | Pebbles
  4 | Barney
  5 | Betty
  6 | Bamm-Bamm
  7 | The Great
(7 rows)

ocrpttest=&gt; select * from flintstones5;
 id |  lastname  
----+------------
  1 | Flintstone
  2 | Flintstone
  3 | Flintstone
  4 | Rubble
  5 | Rubble
  6 | Rubble
  7 | Gazoo
(7 rows)</programlisting>
			</para>
		</sect2>
		<sect2 id="example5codec">
			<title>C program code</title>
			<para>
				The program code adds the two queries and
				establishes the follower link between them.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();
    ocrpt_datasource *ds = ocrpt_datasource_add_postgresql(o, "pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);
    ocrpt_query *q1 = ocrpt_query_add_postgresql(ds, "q1", "select * from flintstones4;");
    ocrpt_query *q2 = ocrpt_query_add_postgresql(ds, "q2", "select * from flintstones5;");

    ocrpt_query_add_follower(q1, q2);

    if (!ocrpt_parse_xml(o, "example5.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}</programlisting>
			</para>
		</sect2>
		<sect2 id="example5codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();
$ds = $o-&gt;datasource_add_postgresql("pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);
$q1 = $ds-&gt;query_add("q1", "select * from flintstones4;");
$q2 = $ds-&gt;query_add("q2", "select * from flintstones5;");

$q1-&gt;add_follower($q2);

if (!$o-&gt;parse_xml("example5.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example5codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				<programlisting>&lt;?php
$r = rlib_init();

rlib_add_datasource_postgres($r, "pgsql", "dbname=ocrpttest user=ocrpt");

rlib_add_query_as($r, "pgsql", "select * from flintstones4;", "q1");
rlib_add_query_as($r, "pgsql", "select * from flintstones5;", "q2");

rlib_add_resultset_follower($r, "q1", "q2");

if (!rlib_add_report($r, "example5.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example5xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example5.xml</literal>.
			</para>
			<para>
				Note that when using multiple queries in the same
				report, column names may be identical. Because
				of this, using <literal>queryname.columnname</literal>
				will indicate which one is needed. When using
				<literal>columnname</literal> then it will mean
				the first query's column.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE OpenCReport SYSTEM "opencreport.dtd"&gt;
&lt;OpenCReport&gt;
    &lt;Report query="q1"&gt;
        &lt;Detail&gt;
            &lt;FieldHeaders&gt;
                &lt;Output&gt;
                    &lt;HorizontalLine size="2" color="'black'" /&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                    &lt;Line bold="yes"&gt;
                        &lt;literal width="20"&gt;First name&lt;/literal&gt;
                        &lt;literal width="20"&gt;Last name&lt;/literal&gt;
                    &lt;/Line&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                    &lt;HorizontalLine size="2" color="'black'" /&gt;
                    &lt;HorizontalLine size="2" color="'white'" /&gt;
                &lt;/Output&gt;
            &lt;/FieldHeaders&gt;

            &lt;FieldDetails&gt;
                &lt;Output&gt;
                    &lt;Line&gt;
                        &lt;field width="20" value="q1.firstname" /&gt;
                        &lt;field width="20" value="q2.lastname" /&gt;
                    &lt;/Line&gt;
                &lt;/Output&gt;
            &lt;/FieldDetails&gt;
        &lt;/Detail&gt;
    &lt;/Report&gt;
&lt;/OpenCReport&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example5pdf">
			<title>Report PDF result</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/example5.png" align="center" />
					</imageobject>
				</inlinemediaobject>
			</para>
			<para>
				Note that compared to
				<ulink url="https://github.com/SICOM/rlib">RLIB</ulink>,
				<literal>OpenCReports</literal> may or may not
				produce the same output. This is due to the incomplete
				and faulty implementation of follower queries in
				<literal>RLIB</literal>.
			</para>
		</sect2>
	</sect1>
	<sect1 id="example6">
		<title>N:1 follower queries</title>
		<para>
			This example below exercises two N:1 (N-to-one) follower queries
			along with the main query.
			For more information, see <xref linkend="followerqueries"/>.
		</para>
		<sect2 id="example6data">
			<title>Data</title>
			<para>
				Data is created as follows in the same database
				using the same user as the first example.
				<programlisting>create table data (id serial unique, name text);

create table more_data (
id serial unique,
boss_id int,
name text,
foreign key (boss_id) references data (id));

create table moar_data (
sk_id int,
name text,
foreign key (sk_id) references more_data (id));

insert into data (name)
values
('Snow White'),
('Batman'),
('Cinderella'),
('Hansel'),
('Little Red Riding Hood'),
('Robin Hood');

insert into more_data (boss_id, name)
values
(1, 'Doc'),
(1, 'Dopey'),
(1, 'Sneezy'),
(1, 'Happy'),
(1, 'Bashful'),
(1, 'Sleepy'),
(1, 'Grumpy'),
(2, 'Robin'),
(3, 'Fairy Godmother'),
(3, 'Mice'),
(3, 'Pidgeons'),
(4, 'Gretel'),
(6, 'Little John');

insert into moar_data (sk_id, name)
values
(3, 'Coughy'),
(3, 'Crippley'),
(9, 'Prince Charming'),
(9, 'Shrek'),
(13, 'Will Scarlet'),
(13, 'Brother Tuck');</programlisting>
			</para>
			<para>
				The query that the N:1 followers in this report simulate is:
				<programlisting>ocrpttest=&gt; select * from data left outer join more_data on (data.id = more_data.boss_id)
ocrpttest-> left outer join moar_data on (more_data.id = moar_data.sk_id)
ocrpttest-> order by data.id, more_data.id;
 id |          name          | id | boss_id |      name       | sk_id |      name       
----+------------------------+----+---------+-----------------+-------+-----------------
  1 | Snow White             |  1 |       1 | Doc             |       | 
  1 | Snow White             |  2 |       1 | Dopey           |       | 
  1 | Snow White             |  3 |       1 | Sneezy          |     3 | Coughy
  1 | Snow White             |  3 |       1 | Sneezy          |     3 | Crippley
  1 | Snow White             |  4 |       1 | Happy           |       | 
  1 | Snow White             |  5 |       1 | Bashful         |       | 
  1 | Snow White             |  6 |       1 | Sleepy          |       | 
  1 | Snow White             |  7 |       1 | Grumpy          |       | 
  2 | Batman                 |  8 |       2 | Robin           |       | 
  3 | Cinderella             |  9 |       3 | Fairy Godmother |     9 | Shrek
  3 | Cinderella             |  9 |       3 | Fairy Godmother |     9 | Prince Charming
  3 | Cinderella             | 10 |       3 | Mice            |       | 
  3 | Cinderella             | 11 |       3 | Pidgeons        |       | 
  4 | Hansel                 | 12 |       4 | Gretel          |       | 
  5 | Little Red Riding Hood |    |         |                 |       | 
  6 | Robin Hood             | 13 |       6 | Little John     |    13 | Will Scarlet
  6 | Robin Hood             | 13 |       6 | Little John     |    13 | Brother Tuck
(17 rows)</programlisting>
			</para>
		</sect2>
		<sect2 id="example6codec">
			<title>C program code</title>
			<para>
				The program code adds the three queries and establishes
				the follower links between them. Note that the match
				expressions can be anything, just like in SQL using
				the <literal>LEFT OUTER JOIN ON ( ... )</literal> clause.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();
    ocrpt_datasource *ds = ocrpt_datasource_add_postgresql(o, "pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);
    ocrpt_query *q1 = ocrpt_query_add_postgresql(ds, "q1", "select * from data;");
    ocrpt_query *q2 = ocrpt_query_add_postgresql(ds, "q2", "select * from more_data;");
    ocrpt_query *q3 = ocrpt_query_add_postgresql(ds, "q3", "select * from moar_data;");

    ocrpt_expr *match = ocrpt_expr_parse(o, "q1.id = q2.boss_id", NULL);
    ocrpt_query_add_follower_n_to_1(q1, q2, match);

    ocrpt_expr *match2 = ocrpt_expr_parse(o, "q2.id = q3.sk_id", NULL);
    ocrpt_query_add_follower_n_to_1(q2, q3, match2);

    if (!ocrpt_parse_xml(o, "example6.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}}</programlisting>
			</para>
		</sect2>
		<sect2 id="example6codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();
$ds = $o-&gt;datasource_add_postgresql("pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);
$q1 = $ds-&gt;query_add("q1", "select * from data;");
$q2 = $ds-&gt;query_add("q2", "select * from more_data;");
$q3 = $ds-&gt;query_add("q3", "select * from moar_data;");

$match1 = $o-&gt;expr_parse("q1.id = q2.boss_id");
$q1-&gt;add_follower_n_to_1($q2, $match1);

$match2 = $o-&gt;expr_parse("q2.id = q3.sk_id");
$q2-&gt;add_follower_n_to_1($q3, $match2);

if (!$o-&gt;parse_xml("example6.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example6codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				Note that the RLIB compatible API is more limited
				as it expects a single field name matching.
				<programlisting>&lt;?php
$r = rlib_init();

rlib_add_datasource_postgres($r, "pgsql", "dbname=ocrpttest user=ocrpt");
rlib_add_query_as($r, "pgsql", "select * from data;", "q1");
rlib_add_query_as($r, "pgsql", "select * from more_data;", "q2");
rlib_add_query_as($r, "pgsql", "select * from moar_data;", "q3");

rlib_add_resultset_follower_n_to_1($r, "q1", "id", "q2", "boss_id");
rlib_add_resultset_follower_n_to_1($r, "q2", "id", "q3", "sk_id");

if (!rlib_add_report($r, "example6.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example6xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example6.xml</literal>.
			</para>
			<para>
				Note that when using multiple queries in the same
				report, column names may be identical. Because
				of this, using <literal>queryname.columnname</literal>
				will indicate which one is needed. When using
				<literal>columnname</literal> then it will mean
				the first query's column.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE report &gt;
&lt;OpenCReport&gt;
&lt;Report orientation="landscape"&gt;
    &lt;Detail&gt;
        &lt;FieldHeaders&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;literal width="30"&gt;Boss name&lt;/literal&gt;
                    &lt;literal width="1"/&gt;
                    &lt;literal width="30"&gt;Sidekick name&lt;/literal&gt;
                    &lt;literal width="1"/&gt;
                    &lt;literal width="30"&gt;Sidekick's sidekick name&lt;/literal&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/FieldHeaders&gt;
        &lt;FieldDetails&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;field value="q1.name" width="30" align="left" /&gt;
                    &lt;literal width="1"/&gt;
                    &lt;field value="q2.name" width="30" align="left" /&gt;
                    &lt;literal width="1"/&gt;
                    &lt;field value="q3.name" width="30" align="left" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/FieldDetails&gt;
    &lt;/Detail&gt;
&lt;/Report&gt;
&lt;/OpenCReport&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example6pdf">
			<title>Report PDF result</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/example6.png" align="center" />
					</imageobject>
				</inlinemediaobject>
			</para>
			<para>
				Note that compared to
				<ulink url="https://github.com/SICOM/rlib">RLIB</ulink>,
				<literal>OpenCReports</literal> likely do not
				produce the same output. This is due to the incomplete
				and faulty implementation of follower queries in
				<literal>RLIB</literal>. <literal>OpenCReports</literal>
				faithfully implements <literal>LEFT OUTER JOIN</literal>.
			</para>
		</sect2>
	</sect1>
	<sect1 id="example7">
		<title>N:1 follower queries (RLIB compatibility limits)</title>
		<para>
			This example below exercises two N:1 (N-to-one) follower queries
			along with the main query.
			For more information, see <xref linkend="followerqueries"/>.
		</para>
		<sect2 id="example7data">
			<title>Data</title>
			<para>
				The same data is used as in the previous example.
			</para>
			<para>
				The query that the RLIB compatible method for
				N:1 followers in this report simulates is:
				<programlisting>ocrpttest=&gt; select * from data
ocrpttest-> left outer join lateral (select * from more_data
ocrpttest->      where data.id = more_data.boss_id
ocrpttest->      order by more_data.id limit 1) x on (true)
ocrpttest-> left outer join lateral (select * from moar_data
ocrpttest->      where x.id = moar_data.sk_id
ocrpttest->      order by moar_data.sk_id limit 1) y on (true);
 id |          name          | id | boss_id |      name       | sk_id |      name       
----+------------------------+----+---------+-----------------+-------+-----------------
  1 | Snow White             |  1 |       1 | Doc             |       | 
  2 | Batman                 |  8 |       2 | Robin           |       | 
  3 | Cinderella             |  9 |       3 | Fairy Godmother |     9 | Prince Charming
  4 | Hansel                 | 12 |       4 | Gretel          |       | 
  5 | Little Red Riding Hood |    |         |                 |       | 
  6 | Robin Hood             | 13 |       6 | Little John     |    13 | Will Scarlet
(6 rows)</programlisting>
			</para>
			<para>
				Note the amount of hoops the SQL query has
				to jump through to implement the <literal>LIMIT 1</literal>
				clause on both lateral derived queries that results
				in limiting the number of rows to the main query's
				number of rows.
			</para>
		</sect2>
		<sect2 id="example7codec">
			<title>C program code</title>
			<para>
				The program code is identical to the previous example,
				except that it uses a different report XML description.
				<programlisting>#include &lt;stdio.h&gt;
#include &lt;opencreport.h&gt;

int main(int argc, char **argv) {
    opencreport *o = ocrpt_init();
    ocrpt_datasource *ds = ocrpt_datasource_add_postgresql(o, "pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);
    ocrpt_query *q1 = ocrpt_query_add_postgresql(ds, "q1", "select * from data;");
    ocrpt_query *q2 = ocrpt_query_add_postgresql(ds, "q2", "select * from more_data;");
    ocrpt_query *q3 = ocrpt_query_add_postgresql(ds, "q3", "select * from moar_data;");

    ocrpt_expr *match = ocrpt_expr_parse(o, "q1.id = q2.boss_id", NULL);
    ocrpt_query_add_follower_n_to_1(q1, q2, match);

    ocrpt_expr *match2 = ocrpt_expr_parse(o, "q2.id = q3.sk_id", NULL);
    ocrpt_query_add_follower_n_to_1(q2, q3, match2);

    if (!ocrpt_parse_xml(o, "example7.xml")) {
        printf("XML parse error\n");
        ocrpt_free(o);
        return 0;
    }

    ocrpt_set_output_format(o, OCRPT_OUTPUT_PDF);
    ocrpt_execute(o);
    ocrpt_spool(o);
    ocrpt_free(o);

    return 0;
}}</programlisting>
			</para>
		</sect2>
		<sect2 id="example7codephp">
			<title>PHP program code</title>
			<para>
				Here's the equivalent program code in PHP.
				<programlisting>&lt;?php
$o = new OpenCReport();
$ds = $o-&gt;datasource_add_postgresql("pgsql", NULL, NULL, "ocrpttest", "ocrpt", NULL);
$q1 = $ds-&gt;query_add("q1", "select * from data;");
$q2 = $ds-&gt;query_add("q2", "select * from more_data;");
$q3 = $ds-&gt;query_add("q3", "select * from moar_data;");

$match1 = $o-&gt;expr_parse("q1.id = q2.boss_id");
$q1-&gt;add_follower_n_to_1($q2, $match1);

$match2 = $o-&gt;expr_parse("q2.id = q3.sk_id");
$q2-&gt;add_follower_n_to_1($q3, $match2);

if (!$o-&gt;parse_xml("example7.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

$o-&gt;execute();
$o-&gt;spool();</programlisting>
			</para>
		</sect2>
		<sect2 id="example7codephprlib">
			<title>RLIB compatible PHP program code</title>
			<para>
				Here's the equivalent program code in PHP,
				using the RLIB compatibility functions.
				Note that the RLIB compatible API is more limited
				as it expects a single field name matching.
				<programlisting>&lt;?php
$r = rlib_init();

rlib_add_datasource_postgres($r, "pgsql", "dbname=ocrpttest user=ocrpt");
rlib_add_query_as($r, "pgsql", "select * from data;", "q1");
rlib_add_query_as($r, "pgsql", "select * from more_data;", "q2");
rlib_add_query_as($r, "pgsql", "select * from moar_data;", "q3");

rlib_add_resultset_follower_n_to_1($r, "q1", "id", "q2", "boss_id");
rlib_add_resultset_follower_n_to_1($r, "q2", "id", "q3", "sk_id");

if (!rlib_add_report($r, "example7.xml")) {
    echo "XML parse error" . PHP_EOL;
    exit(0);
}

rlib_execute($r);
rlib_spool($r);</programlisting>
			</para>
		</sect2>
		<sect2 id="example7xml">
			<title>Report description</title>
			<para>
				The program code uses this file contents
				from <literal>example7.xml</literal>.
				It is different in one detail from the previous
				example: the toplevel XML node is
				<literal>&lt;Report&gt;</literal> instead of
				<literal>&lt;OpenCReport&gt;</literal>.
				This results in the RLIB compatibility flag
				to be enabled automatically. See the
				<xref linkend="xmlfollowermatchsingle"/>
				or the equivalent calls in the C and PHP API
				documentation) to be enabled automatically.
				<programlisting>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE report &gt;
&lt;Report orientation="landscape"&gt;
    &lt;Detail&gt;
        &lt;FieldHeaders&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;literal width="30"&gt;Boss name&lt;/literal&gt;
                    &lt;literal width="1"/&gt;
                    &lt;literal width="30"&gt;Sidekick name&lt;/literal&gt;
                    &lt;literal width="1"/&gt;
                    &lt;literal width="30"&gt;Sidekick's sidekick name&lt;/literal&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/FieldHeaders&gt;
        &lt;FieldDetails&gt;
            &lt;Output&gt;
                &lt;Line&gt;
                    &lt;field value="q1.name" width="30" align="left" /&gt;
                    &lt;literal width="1"/&gt;
                    &lt;field value="q2.name" width="30" align="left" /&gt;
                    &lt;literal width="1"/&gt;
                    &lt;field value="q3.name" width="30" align="left" /&gt;
                &lt;/Line&gt;
            &lt;/Output&gt;
        &lt;/FieldDetails&gt;
    &lt;/Detail&gt;
&lt;/Report&gt;</programlisting>
			</para>
		</sect2>
		<sect2 id="example7pdf">
			<title>Report PDF result</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/example7.png" align="center" />
					</imageobject>
				</inlinemediaobject>
			</para>
			<para>
				Note that compared to
				<ulink url="https://github.com/SICOM/rlib">RLIB</ulink>,
				<literal>OpenCReports</literal> likely do not
				produce the same output. This is due to the incomplete
				and faulty implementation of follower queries in
				<literal>RLIB</literal>. <literal>OpenCReports</literal>
				faithfully implements <literal>LEFT OUTER JOIN</literal>
				with limiting the number of dependent matching rows to 1
				that <emphasis>approximates</emphasis> the RLIB behaviour.
			</para>
		</sect2>
	</sect1>
</chapter>

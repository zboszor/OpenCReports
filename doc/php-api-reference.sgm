<chapter id="php-api-reference" xreflabel="C API Reference">
	<title>PHP language API reference</title>
	<sect1 id="phpmodule">
		<title>The OpenCReports PHP module</title>
		<para>
			<literal>OpenCReports</literal> comes with a PHP module,
			which must be enabled in the PHP configuration:
			<programlisting>extension=opencreports.so</programlisting>
		</para>
	</sect1>
	<sect1 id="mainclass" xreflabel="The OpenCReport class">
		<title>The OpenCReport class</title>
		<para>
			The main class in OpenCReports is called
			<literal>OpenCReport</literal>. (Note that the project
			name is used as singular.)
			<programlisting>class OpenCReport {
    public const RESULT_ERROR;
    public const RESULT_STRING;
    public const RESULT_NUMBER;
    public const RESULT_DATETIME;

    public const VARIABLE_EXPRESSION;
    public const VARIABLE_COUNT;
    public const VARIABLE_COUNTALL;
    public const VARIABLE_SUM;
    public const VARIABLE_AVERAGE;
    public const VARIABLE_AVERAGEALL;
    public const VARIABLE_LOWEST;
    public const VARIABLE_HIGHEST;

    public final __construct();

    public final parse_xml(string $filename): bool;
    public final parse_xml_from_buffer(string $buffer): bool;

    public const OUTPUT_UNSET;
    public const OUTPUT_PDF;
    public const OUTPUT_HTML;
    public const OUTPUT_TXT;
    public const OUTPUT_CSV;
    public const OUTPUT_XML;
    public final set_output_format(long $format): void;

    public final execute(): bool;
    public final spool(): void;
    public final get_output(): string|false;
    public final get_content_type(): array|false;

    public static final version(): string;

    public final set_numeric_precision_bits(
                     string $expr_string): void;
    public final set_rounding_mode(
                     string $expr_string): void;

    public final bindtextdomain(
                     string $domainname,
                     string $dirname): void;
    public final set_locale(string $locale): void;

    public final datasource_add_array(string $source_name):
                     ?OpenCReport\Datasource;
    public final datasource_add_csv(string $source_name):
                     ?OpenCReport\Datasource;
    public final datasource_add_json(string $source_name):
                     ?OpenCReport\Datasource;
    public final datasource_add_xml(string $source_name):
                     ?OpenCReport\Datasource;
    public final datasource_add_postgresql(
                     string $source_name,
                     string $host = null,
                     string $port = null,
                     string $dbname = null,
                     string $user = null,
                     string $password = null):
                     ?OpenCReport\Datasource;
    public final datasource_add_postgresql2(
                     string $source_name,
                     string $connection_info = null):
                     ?OpenCReport\Datasource;
    public final datasource_add_mariadb(
                     string $source_name,
                     string $host = null,
                     string $port = null,
                     string $dbname = null,
                     string $user = null,
                     string $password = null,
                     string $unix_socket = null):
                     ?OpenCReport\Datasource;
    public final datasource_add_mariadb2(
                     string $source_name,
                     string $option_file = null,
                     string $group = null):
                     ?OpenCReport\Datasource;
    public final datasource_add_odbc(
                     string $source_name,
                     string $dbname = null,
                     ?string $user,
                     ?string $password):
                     ?OpenCReport\Datasource;
    public final datasource_add_odbc2(
                     string $source_name,
                     string $connection_info = null):
                     ?OpenCReport\Datasource;

    public final datasource_get(string $source_name):
                     ?OpenCReport\Datasource;
    public final query_get(string $query_name):
                     ?OpenCReport\Query;

    public static final query_refresh(): void;

    public final expr_parse(string $expr_string):
                     ?OpenCReport\Expr;
    public final expr_error(): ?string;

    public final part_new(): OpenCReport\Part;
    public final part_get_next(): OpenCReport\Part;

    public final function_add(
                     string $expr_func_name,
                     string $zend_func_name,
                     long $n_ops,
                     bool $commutative,
                     bool $associative,
                     bool $left_associative,
                     bool $dont_optimize): bool;

    public final add_precalculation_done_cb(
                     string $callback): void;
    public final add_part_added_cb(
                     string $callback): void;
    public final add_report_added_cb(
                     string $callback): void;

    public final env_get(string $var_name):
                     OpenCReport\Result;

    public final result_new():
                     OpenCReport\Result;

    public final add_search_path(
                     string $path): void;
    public static final canonicalize_path(
                     string $path): string;
    public final find_file(string $path): $string;

    public static final get_color(
                     string $color_name,
                     ?bool $bgcolor = false): array;

    public final set_paper(string $paper): void;

    public final set_size_unit(string $expr_string):
                     void;
    public final set_noquery_show_nodata(
                     string $expr_string): void;
    public final set_report_height_after_last(
                     string $expr_string): void;
}</programlisting>
		</para>
	</sect1>
	<sect1 id="phphighlevelapi" xreflabel="High level PHP API">
		<title>High level PHP API</title>
		<para>
			Here is an example code using the high level
			PHP API where everything concerning the report
			(including the data source) is described in
			the report XML:
			<programlisting>&lt;?php
$o = new OpenCReport();

if (!$o->parse_xml(o, "report.xml")) {
    printf("XML parse error\n");
    exit(1);
}

$o->set_output_format(o, OpenCReport::OUTPUT_PDF);
$o->execute();
$->spool();</programlisting>
		</para>
		<para>
			This code will load <literal>report.xml</literal>,
			set the output format to PDF, runs the report and dumps
			the result on <literal>stdout</literal>, which ends up
			in your browser if the PHP code is run behind a webserver.
		</para>
		<para>
			Most of the class methods are direct wrappers
			of the corresponding C API functions.
		</para>
		<sect2 id="mainclassconstr">
			<title>Constructor</title>
			<para>
				The class constructor creates an
				<literal>OpenCReport</literal> object.
				<programlisting>public final
OpenCReport::__construct();</programlisting>
			</para>
		</sect2>
		<sect2 id="phploadxml">
			<title>Load a report XML description</title>
			<para>
				These methods load the report description
				either from the specified XML file or
				from the XML content provided in the string.
				They return
				<literal>true</literal> for success,
				<literal>false</literal> for failure.
				<programlisting>public final
OpenCReport::parse_xml(string $filename): bool;

public final
OpenCReport::parse_xml_from_buffer(string $buffer): bool;
</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetoutputformat">
			<title>Set report output format</title>
			<para>
				<programlisting>public const OpenCReport::OUTPUT_UNSET;
public const OpenCReport::OUTPUT_PDF;
public const OpenCReport::OUTPUT_HTML;
public const OpenCReport::OUTPUT_TXT;
public const OpenCReport::OUTPUT_CSV;
public const OpenCReport::OUTPUT_XML;

public final
OpenCReport::set_output_format(int $format): void;</programlisting>
			</para>
			<para>
				Note that these constants are not to be overridden
				in subclasses. With PHP 8.1 and newer, the
				<literal>final</literal> flag is added so overriding
				these constants will throw an exception.
			</para>
		</sect2>
		<sect2 id="phprunreport">
			<title>Run the report</title>
			<para>
				This method executes the report, constructs
				the result in memory. It returns <literal>true</literal>
				for success, <literal>false</literal> for failure.
				It is a failure if the output format is unset.
				<programlisting>public final
OpenCReport::execute(): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpdumpreport">
			<title>Dump report result</title>
			<para>
				Dump the report output on the program's
				standard output channel.
				<programlisting>public final
OpenCReport::spool(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportgetresult">
			<title>Get report result</title>
			<para>
				Get the report output. The application
				then can save it as a file.
				This method returns the output in a
				<literal>string</literal> if report execution
				succeeded, otherwise it returns
				<literal>false</literal>.
				<programlisting>public final
OpenCReport::get_output(): string|false;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportgetcontenttype">
			<title>Get report content type</title>
			<para>
				Get the report content type. The application
				then can add it as HTTP header line(s)
				to the request. This method returns an
				array of strings with
				<literal>Content-Type:</literal>,
				<literal>Content-Length:</literal> and
				other header lines if report execution succeeded.
				Otherwise it returns <literal>false</literal>.
				<programlisting>public final
OpenCReport::get_content_type(): array|false;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpgetlibver">
			<title>Get library version</title>
			<para>
				This method reports the OpenCReports
				library version.
				<programlisting>public final static
OpenCReport::version(): string;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phplowlevelapi" xreflabel="Low level PHP API">
		<title>Low level PHP API</title>
		<para>
			The <xref linkend="phphighlevelapi"/> is also part of the
			low level API. The class methods described below allow
			creating a report using program code, or simply
			fine tuning the report behavior by mostly using the
			<xref linkend="phphighlevelapi"/>.
		</para>
		<para>
			Note that whenever the method argument is
			<literal>string $expr_string</literal>,
			such arguments are treated as
			<xref linkend="expressions"/> and are only
			parsed when calling the method. Evaluation
			of the expressions is delayed to report
			execution time.
		</para>
		<para>
			Also note that for class methods that return
			objects, the parent object must not be
			<literal>unset()</literal> before using
			such a derived object. These derived objects
			are merely wrappers over C pointers in
			their parent objects' C representation.
			Such a "use after free" is a sure way to
			crash the PHP process.
		</para>
		<sect2 id="phpnumerictuning" xreflabel="Numeric behavior related methods">
			<title>Numeric behavior related methods</title>
			<sect3 id="phpsetnumprec">
				<title><literal>Set numeric precision</literal></title>
				<para>
					The default is 256 bits of floating point precision.
				<programlisting>public final
OpenCReport::set_numeric_precision_bits(
                     string $expr_string): void;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpsetroundingmode">
				<title>Set rounding mode</title>
				<para>
					The rounding modes may be
					<literal>nearest</literal>,
					<literal>to_minus_inf</literal>,
					<literal>to_inf</literal>,
					<literal>to_zero</literal>,
					<literal>away_from_zero</literal> and
					<literal>faithful</literal>.
					The default is <literal>nearest</literal>.
					<programlisting>final public
OpenCReport::set_rounding_mode(
                     string $expr_string): void;</programlisting>
				</para>
			</sect3>
		</sect2>
		<sect2 id="phplocalemethods">
			<title>Locale related methods</title>
			<sect3 id="phpsetupxlate">
				<title>Set up translation</title>
				<para>
					Setting up the translation needs two parameters:
					the so called <emphasis>translation domain</emphasis>
					and the toplevel directory for the translations.
					It relies on GNU Gettext.
					<programlisting>public final 
OpenCReport::bindtextdomain(
                     string $domainname,
                     string $dirname): void;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpsetlocale">
				<title>Set report locale</title>
				<para>
					Setting the locale for the report does not affect
					the main program or other threads. Locale setting
					includes the language, the country. The UTF-8 suffix
					is necessary. E.g.: <literal>en_GB.UTF-8</literal> or
					<literal>de_DE.UTF-8</literal>
					<programlisting>public final
OpenCReport::set_locale(string $locale): void;</programlisting>
				</para>
			</sect3>
		</sect2>
		<sect2 id="phpdsmethods">
			<title>Data source and query related methods</title>
			<sect3 id="phpaddarrayds">
				<title>Add an array datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>
					<programlisting>public final
OpenCReport::datasource_add_array(string $source_name):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpaddcsvds">
				<title>Add a CSV datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>
					<programlisting>public final
OpenCReport::datasource_add_csv(string $source_name):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpaddjsonds">
				<title>Add a JSON datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>.
					<programlisting>public final
OpenCReport::datasource_add_json(string $source_name):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpaddxmlds">
				<title>Add an XML datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>.
					<programlisting>public final
OpenCReport::datasource_add_xml(string $source_name):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpaddpgds">
				<title>Add an PostgreSQL datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>.
					<programlisting>public final
OpenCReport::datasource_add_postgresql(
                     string $source_name,
                     string $host = null,
                     string $port = null,
                     string $dbname = null,
                     string $user = null,
                     string $password = null):
                     ?OpenCReport\Datasource;

public final
OpenCReport::datasource_add_postgresql2(
                     string $source_name,
                     string $connection_info = null):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpaddmariads">
				<title>Add a MariaDB datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>.
					<programlisting>public final
OpenCReport::datasource_add_mariadb(
                     string $source_name,
                     string $host = null,
                     string $port = null,
                     string $dbname = null,
                     string $user = null,
                     string $password = null,
                     string $unix_socket = null):
                     ?OpenCReport\Datasource;

public final
OpenCReport::datasource_add_mariadb2(
                     string $source_name,
                     string $option_file = null,
                     string $group = null):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpaddodbcds">
				<title>Add an ODBC datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>.
					<programlisting>public final
OpenCReport::datasource_add_odbc(
                     string $source_name,
                     string $dbname = null,
                     ?string $user,
                     ?string $password):
                     ?OpenCReport\Datasource;

public final
OpenCReport::datasource_add_odbc2(
                     string $source_name,
                     string $connection_info = null):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
				<para>
					For the parameters, see <xref linkend="odbcds"/>.
				</para>
			</sect3>
			<sect3 id="phpgetds">
				<title>Get a named datasource</title>
				<para>
					For the <literal>OpenCReport\Datasource</literal>
					class methods, see <xref linkend="phpdsclass"/>.
					<programlisting>public final
OpenCReport:: datasource_get(string $source_name):
                     ?OpenCReport\Datasource;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpgetquery">
				<title>Get a named query</title>
				<para>
					For the <literal>OpenCReport\Query</literal>
					class methods, see <xref linkend="phpqueryclass"/>.
					<programlisting>public final
OpenCReport::query_get(string $query_name):
                     ?OpenCReport\Query;</programlisting>
				</para>
			</sect3>
			<sect3 id="phprefreshquery" xreflabel="OpenCReport::query_refresh()">
				<title>Refresh the internal representation of array queries</title>
				<para>
					When adding an array query, the PHP array
					is internally transformed into a C array
					representation, decoupling it from the source data.
					The PHP array may be modified during
					executing the report, e.g. in an event callback.
					This method makes the internal representation
					reflect the new data.
					<programlisting>public static final
query_refresh(): void;</programlisting>
				</para>
				<para>
					There are some limitations what may be
					done to the source PHP array, though.
					<itemizedlist>
						<listitem override="bullet">
							<para>
								Changes to the first row of data
								(the column names) are ignored.
							</para>
						</listitem>
						<listitem override="bullet">
							<para>
								The number of rows and columns
								in the data must not change.
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</sect3>
		</sect2>
		<sect2 id="phpexprfunc" xreflabel="Expression related methods">
			<title>Expression related methods</title>
			<para>
				Expressions in OpenCReports is explained in the
				<xref linkend="expressions"/> chapter.
			</para>
			<sect3 id="phpparseexpr">
				<title>Parse an expression</title>
				<para>
					The expression string may not reference
					report specific identifiers.
					<programlisting>public final
OpenCReport::expr_parse(string $expr_string):
                     ?OpenCReport\Expr;</programlisting>
				</para>
				<para>
					If the expression is in any way invalid,
					<literal>OpenCReport::expr_parse()</literal>
					returns <literal>null</literal>. The error
					is returned by:
					<programlisting>public final
OpenCReport::expr_error(): ?string;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpadduserfunc">
				<title>Add a custom report function</title>
				<para>
					<programlisting>public final
OpenCReport::function_add(
                     string $expr_func_name,
                     string $zend_func_name,
                     long $n_ops,
                     bool $commutative,
                     bool $associative,
                     bool $left_associative,
                     bool $dont_optimize): bool;</programlisting>
				</para>
				<para>
					After this function returns with
					success, subsequently parsed expressions
					may use the function named as the
					value of <literal>$expr_func_name</literal>.
					During evaluation of the function, the
					PHP function named as the value of
					<literal>$zend_func_name</literal> is called.
					The expressions that use the new function
					may call it with either the number of arguments
					given in <literal>$n_ops</literal>, or
					if the value is <literal>-1</literal>,
					any number of arguments.
				</para>
				<para>
					The remaining <literal>bool</literal>
					arguments indicate the named properties
					of the function that the expression optimizer
					considers.
				</para>
				<para>
					The declaration of the PHP function named
					as the value of <literal>$zend_func_name</literal>
					must follow this:
					<programlisting>function my_function(OpenCReport\Expr $e)</programlisting>
				</para>
				<para>
					The function implementation may return
					any PHP base type (<literal>string</literal>,
					<literal>long</literal>, <literal>double</literal>
					or <literal>bool</literal>) or it may not return
					a value at all (i.e. <literal>void</literal>).
					In the latter case, the function must set the
					return value in the passed-in
					<literal>$e</literal> object.
				</para>
				<para>
					For class methods of
					<literal>OpenCReport\Expr</literal>,
					please see <xref linkend="phpexprclass"/>.
				</para>
			</sect3>
		</sect2>
		<sect2  id="phplayoutmethods">
			<title>Layout part related methods</title>
			<sect3 id="phpaddpart">
				<title>Add a new report (layout) part</title>
				<para>
					For class methods of
					<literal>OpenCReport\Part</literal>,
					see <xref linkend="phppartclass"/>.
					<programlisting>public final
OpenCReport::part_new(): OpenCReport\Part;</programlisting>
				</para>
			</sect3>
			<sect3 id="phpgetfirstpart">
				<title>Get first (layout) part</title>
				<para>
					This function returns an object
					of the <literal>OpenCReport\Part</literal>
					class. The object is internally marked
					as an "iterator object", so
					<literal>OpenCReport\Part::get_next()</literal>
					may be called on it again to iterate
					through every report part of the
					parent <literal>OpenCReport</literal> object.
					<programlisting>public final
OpenCReport::part_get_first(): OpenCReport\Part;</programlisting>
				</para>
			</sect3>
			<sect3 id="phppartsetpapertype">
				<title>Set paper type</title>
				<para>
					Set the paper type using the paper name,
					i.e. <literal>'letter'</literal>,
					<literal>'A4'</literal>, etc.
					<programlisting>public final
OpenCReport::set_paper(string $paper): void;</programlisting>
				</para>
			</sect3>
			<sect3 id="phppartsetsizeunit">
				<title>Set size unit</title>
				<para>
					Set the size unit.
					See <xref linkend="sizeunit"/>.
					Possible settings are
					<literal>points</literal> and <literal>rlib</literal>.
					Default is <literal>rlib</literal>
					for RLIB compatibility.
					<programlisting>public final
OpenCReport::set_size_unit(string $expr_string): void;</programlisting>
				</para>
			</sect3>
			<sect3 id="phppartsetnqsnd">
				<title>Set "no query show NoData" property</title>
				<para>
					<programlisting>public final
OpenCReport::set_noquery_show_nodata(
                     string $expr_string): void;</programlisting>
				</para>
			</sect3>
			<sect3 id="phppartsetrhal">
				<title>Set "report height after last" property</title>
				<para>
					<programlisting>public final
OpenCReport::set_report_height_after_last(
                     string $expr_string): void;</programlisting>
				</para>
			</sect3>
		</sect2>
		<sect2 id="phpcallbackmethods">
			<title>Callback related methods</title>
			<para>
				These methods add a callback function
				that are called at certain points
				during executing the report.
				<programlisting>public final
OpenCReport::add_precalculation_done_cb(
                     string $callback): void;

public final
OpenCReport::add_part_added_cb(
                     string $callback): void;

public final
OpenCReport::add_report_added_cb(
                     string $callback): void;</programlisting>
			</para>
			<para>
				The "precalculation done" callback
				is called after the first phase of the
				report is finished. The interface of
				the callback function must follow this:
				<programlisting>function
my_callback(OpenCReport $o)</programlisting>
			</para>
			<para>
				The "part added" callback is called when
				either <literal>OpenCReport::part_new()</literal>
				is called, or a report XML description is parsed
				via either <literal>OpenCReport::parse_xml()</literal>
				or <literal>OpenCReport::parse_xml_from_buffer()</literal>
				and a <literal>&lt;Part&gt;</literal> node is being parsed.
				The interface of the callback function must follow this:
				<programlisting>function
my_callback(OpenCReport $o,
            OpenCReport\Part $p)</programlisting>
			</para>
			<para>
				The "report added" callback is called when
				either <literal>OpenCReport\Column::report_new()</literal>
				is called, or a report XML description is parsed
				via either <literal>OpenCReport::parse_xml()</literal>
				or <literal>OpenCReport::parse_xml_from_buffer()</literal>
				and a <literal>&lt;Report&gt;</literal> node is being parsed.
				The interface of the callback function must follow this:
				<programlisting>function
my_callback(OpenCReport $o,
            OpenCReport\Report $r)</programlisting>
			</para>
		</sect2>
		<sect2 id="phpenvmethods">
			<title>Environment related methods</title>
			<para>
				In PHP, the "environment" includes both
				global variables and actual environment
				variables. If a global variable name exists
				in the PHP environment, its value is returned
				as <literal>OpenCReport\Result</literal>.
				If such a PHP global variable doesn't exist,
				the variable from operating (e.g. UNIX)
				environment is used and its value is returned
				if it exists. Otherwise <literal>NULL</literal>
				is returned.
				<programlisting>public final
OpenCReport::env_get(string $var_name):
                     OpenCReport\Result;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultmethods">
			<title>Result related methods</title>
			<para>
				This method creates an uninitialized
				<literal>OpenCReport\Result</literal>
				with no value. See <xref linkend="phpresultclass"/>
				to set the value.
				<programlisting>public final
OpenCReport::result_new(): OpenCReport\Result;</programlisting>
			</para>
		</sect2>
		<sect2  id="phppathmethods">
			<title>Path related methods</title>
				<sect3 id="phpaddsearchpath">
					<title>Add a search path</title>
					<para>
						<programlisting>public final
OpenCReport::add_search_path(string $path): void;</programlisting>
					</para>
				</sect3>
				<sect3 id="phpgetcanonfile">
					<title>Canonicalize path</title>
					<para>
						This method returns (a possibly modified)
						path that will create a canonical
						absolute path that doesn't contain
						<literal>.</literal> and <literal>..</literal>
						references, symlinks are replaced with
						the actual target directory, etc.
						<programlisting>public static final
OpenCReport::canonicalize_path(string $path): string;</programlisting>
					</para>
				</sect3>
				<sect3 id="phpfindfile">
					<title>Find a file</title>
					<para>
						Find a (possibly relative) file using
						the search paths and return the canonical
						absolute path if found.
						<programlisting>public final
OpenCReport::find_file(string $path): $string;</programlisting>
					</para>
				</sect3>
		</sect2>
		<sect2 id="phpcolormethods">
			<title>Color related methods</title>
			<para>
				Get an array with <literal>double</literal>
				components for the color name or color
				specification.
				<programlisting>public static
OpenCReport::final get_color(
                     string $color_name,
                     ?bool $bgcolor = false): array;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpdsclass" xreflabel="The OpenCReport\Datasource class">
		<title>The OpenCReport\Datasource class</title>
		<para>
			This class has no constructor, so such an object
			cannot be created or used on its own. A datasource
			only is only useful as part of a report. The
			<literal>OpenCReport::datasource_add_*</literal>
			methods return an object of this class.
			<programlisting>class OpenCReport\Datasource {
    public final free(): void;

    public final query_add(string $name,
                           string $array_or_file_or_sql,
                           ?string $coltypes = null):
                           OpenCReport\Query;

    public final set_encoding(string $encoding): void;
}</programlisting>
		</para>
		<sect2 id="phpdsfree">
			<title>Free a datasource</title>
			<para>
				The datasource is freed for the
				parent <literal>OpenCReport</literal>
				object.
				<programlisting>public final
OpenCReport\Datasource::free(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpdsqueryadd">
			<title>Add a query to the datasource</title>
			<para>
				Add a query to the parent
				<literal>OpenCReport</literal> object
				associated with the
				<literal>OpenCReport\Datasource</literal>.
				<programlisting>public final
OpenCReport\Datasource::query_add(string $name,
                           string $array_or_file_or_sql,
                           ?string $coltypes = null):
                           OpenCReport\Query;</programlisting>
			</para>
			<para>
				<literal>$name</literal> is the query name
				that <xref linkend="expressions"/> may use
				as the identifier domain.
			</para>
			<para>
				<literal>$array_or_file_or_sql</literal>
				contains the array name (for an array datasource),
				the file name (for a file based datasource,
				like JSON, CSV or XML), or the SQL query statement
				for SQL based datasources (like MariaDB, PostgreSQL
				or ODBC).
			</para>
			<para>
				Passing <literal>$coltypes</literal> is
				optional and is only valid for array or
				file based datasources. File based datasources
				may or may not include column type specification.
				Array datasources don't. The <literal>$coltypes</literal>
				array contains long values
				<literal>OpenCReport::RESULT_*</literal>.
				See <xref linkend="mainclass"/>. It helps
				the engine to add automatic data conversion
				for query column data.
				SQL based datasources provide the data type
				for query columns.
			</para>
		</sect2>
		<sect2 id="phpdssetencoding">
			<title>Set datasource encoding</title>
			<para>
				Set encoding for the datasource.
				By default, UTF-8 is expected.
				<programlisting>public final
OpenCReport\Datasource::set_encoding(string $encoding): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpqueryclass" xreflabel="The OpenCReport\Query class">
		<title>The OpenCReport\Query class</title>
		<para>
			<programlisting>class OpenCReport\Query {
    public final get_result():
                     OpenCReport\QueryResult;

    public final navigate_start(): void;
    public final navigate_next(): bool;

    public final add_follower(
                     OpenCReport\Query $follower):
                     bool;
    public final add_follower_n_to_1(
                     OpenCReport\Query $follower,
                     OpenCReport\Expr $match):
                     bool;

    public final free(): void;
}</programlisting>
		</para>
		<sect2 id="phpquerygetresult">
			<title>Get result for a query's current row</title>
			<para>
				The result is <literal>OpenCReport\QueryResult</literal>.
				See <xref linkend="phpqueryresultclass"/>.
				<programlisting>public final
OpenCReport\Query::get_result():
                     OpenCReport\QueryResult;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpquerynavstart">
			<title>Start navigation for a query</title>
			<para>
				Reset query (and all its followers) to go
				before the first row.
				<programlisting>public final
OpenCReport\Query::navigate_start(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpquerynavnext">
			<title>Navigate to the next row</title>
			<para>
				Navigate the query to the next row and return
				if the new row is valid. The current row of
				the query's follower queries are also moved
				to the next valid row.
				<programlisting>public final
OpenCReport\Query::navigate_next(): bool;</programlisting>
			</para>
			<para>
				Usually queries do not have a uniform
				way to report the total number of rows,
				although some datasource types may have
				such a facility. Instead, they can report
				that the dataset has ended.
			</para>
		</sect2>
		<sect2 id="phpqueryaddfollower">
			<title>Add a query follower</title>
			<para>
				Add a query as an 1:1 follower to the main
				query object. The method returns whether
				the call succeeded.
				<programlisting>public final
OpenCReport\Query::add_follower(
                     OpenCReport\Query $follower):
                     bool;</programlisting>
			</para>
			<para>
				Adding a circular reference between queries
				would fail.
			</para>
		</sect2>
		<sect2 id="phpqueryaddn1follower">
			<title>Add an N:1 query follower</title>
			<para>
				Add a query and the matching expression
				as a follower to the main query object.
				The method returns whether the call
				succeeded.
				<programlisting>public final
OpenCReport\Query::add_follower_n_to_1(
                     OpenCReport\Query $follower,
                     OpenCReport\Expr $match):
                     bool;</programlisting>
			</para>
			<para>
				Adding a circular reference between queries
				would fail.
			</para>
			<para>
				The call takes over ownership of the
				match object and it must not be
				explicitly freed.
			</para>
		</sect2>
		<sect2 id="phpqueryfree">
			<title>Free a query</title>
			<para>
				<programlisting>public final
OpenCReport\Query::free(): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpqueryresultclass">
		<title>The OpenCReport\QueryResult class</title>
		<para>
			<programlisting>class OpenCReport\QueryResult {
    public final columns(): long;

    public final column_name(long $index): ?string;

    public final column_result(long $index):
                     ?OpenCReport\Result;
}</programlisting>
		</para>
		<sect2 id="phpqueryresultcolumns">
			<title>Get number of columns for a query result</title>
			<para>
				This method returns the number of columns
				for the query result.
				<programlisting>public final
OpenCReport\QueryResult::columns(): long;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpqueryresultcolname">
			<title>Get the nth column name for a query result</title>
			<para>
				This method returns the column name
				for the query result at <literal>$index</literal>.
				It returns <literal>NULL</literal> for invalid indices.
				<programlisting>public final
OpenCReport\QueryResult::column_name(long $index):
                     ?string;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpqueryresultcolresult">
			<title>Get the nth column result for a query result</title>
			<para>
				This method returns the column result
				for the query result at <literal>$index</literal>.
				It returns <literal>NULL</literal> for invalid indices.
				<programlisting>public final
OpenCReport\QueryResult::column_result(long $index):
                     ?OpenCReport\Result;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpexprclass" xreflabel="The OpenCReport\Expr class">
		<title>The OpenCReport\Expr class</title>
		<para>
			<programlisting>class OpenCReport\Expr {
    public final free(): void;

    public final print(): void;

    public final nodes(): long;

    public final resolve(): void;
    public final optimize(): void;
    public final eval():
                     ?OpenCReport\Result;

    public final get_result():
                     ?OpenCReport\Result;
    public final set_string_value(
                     string $value): void;
    public final set_long_value(
                     long $value): void;
    public final set_double_value(
                     double $value): void;

    public final get_num_operands(): long;

    public final operand_get_result(
                     long $opidx):
                     ?OpenCReport\Result;

    public final cmp_results(): bool;

    public final init_results(long $result_type):
                     void;

    public final set_nth_result_string_value(
                     long $which,
                     string $value): void;

    public final set_nth_result_long_value(
                     long $which,
                     long $value): void;

    public final set_nth_result_double_value(
                     long $which,
                     double $value): void;

    public final set_iterative_start_value(
                     bool $value): void;

    public final set_delayed(
                     bool $value): void;
}</programlisting>
		</para>
		<sect2 id="phpexprfree">
			<title>Free an expression</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Expr::free(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprprint">
			<title>Print an expression</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Expr::print(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprnodes">
			<title>Get the number of expression tree nodes</title>
			<para>
				Used by unit tests to compare the expression
				tree before and after optimization.
				<programlisting>public final
OpenCReport\Expr::nodes(): long;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprresolve">
			<title>Resolve an expression</title>
			<para>
				<programlisting>public final
OpenCReport\Expr::resolve(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexproptimize">
			<title>Optimize an expression</title>
			<para>
				<programlisting>public final
OpenCReport\Expr::optimize(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexpreval">
			<title>Evaluate an expression</title>
			<para>
				<programlisting>public final
OpenCReport\Expr::eval():
						 ?OpenCReport\Result;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprgetresult">
			<title>Get the result of an expression</title>
			<para>
				<programlisting>public final
OpenCReport\Expr::get_result():
						 ?OpenCReport\Result;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetstringvalue">
			<title>Set expression result to a string value</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Expr::set_string_value(
						 string $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetlongvalue">
			<title>Set expression result to a long value</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Expr::set_long_value(
						 long $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetdoublevalue">
			<title>Set expression result to a double value</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Expr::set_double_value(
						 double $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprgetnumops">
			<title>Get number of operands of a expression</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Expr::get_num_operands(): long;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexpropgetresult">
			<title>Get nth operands' result of a expression</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Expr::operand_get_result(
						 long $opidx):
						 ?OpenCReport\Result;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprcmpresults">
			<title>Compare the expression's current and previous results</title>
			<para>
				Used internally by the report executor
				and unit tests. Useful for implementing
				a custom report executor with breaks.
				<programlisting>public final
OpenCReport\Expr::cmp_results(): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprinitresults">
			<title>Initialize expression results</title>
			<para>
				Used internally by the report executor
				and unit tests. Useful for implementing
				a custom report executor.
				<programlisting>public final
OpenCReport\Expr::init_results(long $result_type):
						 void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetnthstringvalue">
			<title>Set nth result of an expression to a string value</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Expr::set_nth_result_string_value(
						 long $which,
						 string $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetnthlongvalue">
			<title>Set nth result of an expression to a long value</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Expr::set_nth_result_long_value(
						 long $which,
						 long $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetnthdoublevalue">
			<title>Set nth result of an expression to a double value</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Expr::set_nth_result_double_value(
						 long $which,
						 double $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetiterativestartflag">
			<title>Set iterative start flag of an expression</title>
			<para>
				Used internally by the report executor
				and by unit tests.
				<programlisting>public final
OpenCReport\Expr::set_iterative_start_value(
						 bool $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpexprsetdelayed">
			<title>Set expression to delayed</title>
			<para>
				A delayed expression's final value is
				precalculated, and this value is used
				in the output in every row of the report.
				<programlisting>public final
OpenCReport\Expr::set_delayed(
						 bool $value): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpresultclass" xreflabel="The OpenCReport\Result class">
		<title>The OpenCReport\Result class</title>
		<para>
			<programlisting>class OpenCReport\Result {
    public final free(): void;

    public final copy(
                     OpenCReport\Result $src_result):
                     void;

    public final print(): void;

    public final get_type(): long;

    public final is_null(): bool;
    public final is_string(): bool;
    public final is_number(): bool;
    public final get_string(): ?string;
    public final get_number(?string $format): ?string;
}</programlisting>
		</para>
		<sect2 id="phpresultfree">
			<title>Free a result object</title>
			<para>
				Only use it for separately created
				result objects, like via
				<literal>OpenCReport::env_get()</literal> and
				<literal>OpenCReport::result_new()</literal>.
				Not needed for freeing an expression.
				<programlisting>public final
OpenCReport\Result::free(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultcopy">
			<title>Copy a result object</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Result::copy(
                     OpenCReport\Result $src_result):
                     void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultprint">
			<title>Print a result object</title>
			<para>
				Used by unit tests.
				<programlisting>public final
OpenCReport\Result::print(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultgettype">
			<title>Get result object value type</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Result::get_type(): long;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultisnull">
			<title>Detect whether result object value is NULL</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Result::is_null(): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultisstring">
			<title>Detect whether result object value is a string</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Result::is_string(): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultisnumber">
			<title>Detect whether result object value is a number</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Result::is_number(): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultgetstring">
			<title>Get string value of a result object</title>
			<para>
				Useful for user functions.
				<programlisting>public final
OpenCReport\Result::get_string(): ?string;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpresultgetnumber">
			<title>Get numeric value of a result object as a string</title>
			<para>
				Useful for user functions.
				The method may optionally use a format string
				to specify the number of decimal digits.
				The returned value may be used with
				<ulink url="https://www.php.net/manual/en/book.bc.php">BC Math</ulink>
				in PHP or (if the precision is small enough)
				converted to <literal>double</literal> or
				<literal>long</literal>.
				<programlisting>public final
OpenCReport\Result::get_number(?string $format): ?string;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phppartclass" xreflabel="The OpenCReport\Part class">
		<title>The OpenCReport\Part class</title>
		<para>
			<programlisting>class OpenCReport\Part {
    public final get_next():
                     ?OpenCReport\Part;

    public final row_new():
                     OpenCReport\Row;

    public final row_get_first():
                     ?OpenCReport\Row;

    public final add_iteration_cb(
                     string $callback): void;

    public final equals(
                     OpenCReport\Part $part): bool;

    public final set_iterations(
                     ?string $expr_string = null): void;

    public final set_font_name(
                     ?string $expr_string = null): void;

    public final set_font_size(
                     ?string $expr_string = null): void;

    public final set_paper(
                     ?string $expr_string = null): void;

    public final set_orientation(
                     ?string $expr_string = null): void;

    public final set_top_margin(
                     ?string $expr_string = null): void;

    public final set_bottom_margin(
                     ?string $expr_string = null): void;

    public final set_left_margin(
                     ?string $expr_string = null): void;

    public final set_right_margin(
                     ?string $expr_string = null): void;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_suppress_pageheader_firstpage(
                     ?string $expr_string = null): void;

    public final page_header():
                     ?OpenCReport\Output;

    public final page_header_set_report(
                     OpenCReport\Report $report):
                     void;

    public final page_footer():
                     ?OpenCReport\Output;

    public final page_footer_set_report(
                     OpenCReport\Report $report):
                     void;
}</programlisting>
		</para>
		<sect2 id="phppartgetnext">
			<title>Get the next report part</title>
			<para>
				Get the next object in the chain of report parts.
				This method may only be used on an object created
				with <literal>OpenCReport::part_get_first()</literal>,
				i.e. one that was internally marked as an iterator
				object.
				<programlisting>public final
OpenCReport\Part::get_next():
                     ?OpenCReport\Part;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartrownew">
			<title>Create a new report part row</title>
			<para>
				For class methods of <literal>OpenCReport\Row</literal>,
				see <xref linkend="phppartrowclass"/>
				<programlisting>public final
OpenCReport\Part::row_new():
                     OpenCReport\Row;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartrowgetfirst">
			<title>Get the first report part row</title>
			<para>
				Get the first part row from the part.
				The object is marked internally as an iterator.
				For class methods of <literal>OpenCReport\Row</literal>,
				see <xref linkend="phppartrowclass"/>
				<programlisting>public final
OpenCReport\Part::row_get_first():
                     ?OpenCReport\Row;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartadditerationcb">
			<title>Add iteration callback for the part</title>
			<para>
				Add an "iteration done" event callback
				for the part object.
				<programlisting>public final
OpenCReport\Part::add_iteration_cb(
                     string $callback): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartequals">
			<title>Check whether two parts are identical</title>
			<para>
				Check whether two part objects refer to
				the same internal part structure of the report.
				Used by unit tests.
				<programlisting>public final
OpenCReport\Part::equals(
                     OpenCReport\Part $part): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetiterations">
			<title>Check whether two parts are identical</title>
			<para>
				Set the number of iterations for the part.
				The expression must evaluate to a numeric
				(integer) value. The part and all of its
				subsections will be calculated and rendered
				this many times. Default is 1.
				<programlisting>public final
OpenCReport\Part::set_iterations(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetfontname">
			<title>Set part font name</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_font_name(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetfontsize">
			<title>Set part font size</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_font_size(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetpaper">
			<title>Set part font size</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_paper(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetorientation">
			<title>Set part orientation</title>
			<para>
				The expression must evaluate
				to a string value. The possible
				values are <literal>portrait</literal>
				and <literal>landscape</literal>.
				Default is <literal>portrait</literal>.
				<programlisting>public final
OpenCReport\Part::set_orientation(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsettopmargin">
			<title>Set part top margin</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_top_margin(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetbottommargin">
			<title>Set part bottom margin</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_bottom_margin(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetleftmargin">
			<title>Set part left margin</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_left_margin(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetrightmargin">
			<title>Set part right margin</title>
			<para>
				<programlisting>public final
OpenCReport\Part::set_right_margin(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetsuppress">
			<title>Set part suppression</title>
			<para>
				Set whether the part is suppressed, i.e.
				all its subsections are omitted from calculating
				and rendering. Default is <literal>false</literal>.
				<programlisting>public final
OpenCReport\Part::set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartsetsphf">
			<title>Set suppression of the page header on the first page</title>
			<para>
				Set whether the page header of the part is
				suppressed on the first page. The expression
				must evaluate to a numeric value, which is
				treated as a boolean (i.e. 0 or non-0).
				Default is <literal>false</literal>.
				<programlisting>public final
OpenCReport\Part::set_suppress_pageheader_firstpage(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartpageheader">
			<title>Get the part's page header</title>
			<para>
				Get the part's page header <literal>&lt;Output&gt;</literal>
				section. See <xref linkend="phpoutputclass"/> and
				<xref linkend="outputnode"/>.
				<programlisting>public final
OpenCReport\Part::page_header():
                     ?OpenCReport\Output;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartpageheadersetreport">
			<title>Set the report object for the part's page header</title>
			<para>
				Set the report object for the part's page header.
				This will add the internal association between
				the part's page header and the report, and
				expressions in the part page header may reference
				report query column identifiers and report user variables.
				Therefore it is only recommended for single-part,
				single-report reports.
				<programlisting>public final
OpenCReport\Part::page_header_set_report(
                     OpenCReport\Report $report):
                     void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartpagefooter">
			<title>Get the part's page footer</title>
			<para>
				Get the part's page footer <literal>&lt;Output&gt;</literal>
				section. See <xref linkend="phpoutputclass"/> and
				<xref linkend="outputnode"/>.
				<programlisting>public final
OpenCReport\Part::page_footer():
                     ?OpenCReport\Output;</programlisting>
			</para>
		</sect2>
		<sect2 id="phppartpagefootersetreport">
			<title>Set the report object for the part's page footer</title>
			<para>
				Set the report object for the part's page footer.
				This will add the internal association between
				the part's page footer and the report, and
				expressions in the part page footer may reference
				report query column identifiers and report user variables.
				Therefore it is only recommended for single-part,
				single-report reports.
				<programlisting>public final
OpenCReport\Part::page_footer_set_report(
                     OpenCReport\Report $report):
                     void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phppartrowclass">
		<title>The OpenCReport\Row class</title>
		<para>
			<programlisting>class OpenCReport\Row {
    public final get_next():
                     ?OpenCReport\Row;

    public final column_new():
                     OpenCReport\Column;

    public final column_get_first():
                     ?OpenCReport\Column;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_newpage(
                     ?string $expr_string = null): void;

    public final set_layout(
                     ?string $expr_string = null): void;
}</programlisting>
		</para>
		<sect2 id="phprowgetnext">
			<title>Get the next part row</title>
			<para>
				Get the next object in the chain of part rows.
				This method may only be used on an object created
				with <literal>OpenCReport\Part::row_get_first()</literal>,
				i.e. one that was internally marked as an iterator
				object.
				<programlisting>public final
OpenCReport\Row::get_next():
                     ?OpenCReport\Row;</programlisting>
			</para>
		</sect2>
		<sect2 id="phprowcolnew">
			<title>Create a new part column for the row</title>
			<para>
				For class methods of <literal>OpenCReport\Column</literal>,
				see <xref linkend="phppartcolclass"/>.
				<programlisting>public final
OpenCReport\Row::column_new():
                     OpenCReport\Column;</programlisting>
			</para>
		</sect2>
		<sect2 id="phprowcolgetfirst">
			<title>Get first column of a part row</title>
			<para>
				Get the first column from the part row.
				The object is marked internally as an iterator.
				For class methods of <literal>OpenCReport\Column</literal>,
				see <xref linkend="phppartcolclass"/>
				<programlisting>public final
OpenCReport\Row::column_get_first():
                     ?OpenCReport\Column;</programlisting>
			</para>
		</sect2>
		<sect2 id="phprowsetsuppress">
			<title>Set suppression for the part row</title>
			<para>
				<programlisting>public final
OpenCReport\Row:set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phprowsetnewpage">
			<title>Set new page for the part row</title>
			<para>
				When set to <literal>yes</literal>,
				the part row will start on a new page.
				<programlisting>public final
OpenCReport\Row:set_newpage(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phprowsetlayout">
			<title>Set layout type for the part row</title>
			<para>
				<programlisting>public final
OpenCReport\Row::set_layout(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phppartcolclass">
		<title>The OpenCReport\Column class</title>
		<para>
			<programlisting>class OpenCReport\Column {
    public final get_next():
                     ?OpenCReport\Column;

    public final report_new():
                     OpenCReport\Report;

    public final report_get_first():
                     ?OpenCReport\Report;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_width(
                     ?string $expr_string = null): void;

    public final set_width(
                     ?string $expr_string = null): void;

    public final set_border_width(
                     ?string $expr_string = null): void;

    public final set_border_color(
                     ?string $expr_string = null): void;

    public final set_detail_columns(
                     ?string $expr_string = null): void;

    public final set_column_padding(
                     ?string $expr_string = null): void;
}</programlisting>
		</para>
		<sect2 id="phpcolgetnext">
			<title>Get next column</title>
			<para>
				Get the next object in the chain of part columns.
				This method may only be used on an object created
				with <literal>OpenCReport\Row::column_get_first()</literal>,
				i.e. one that was internally marked as an iterator
				object.
				<programlisting>public final
OpenCReport\Column::get_next():
                     ?OpenCReport\Column;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolreportnew">
			<title>Create a new report in the column</title>
			<para>
				For class methods of <literal>OpenCReport\Report</literal>,
				see <xref linkend="phpreportclass"/>.
				<programlisting>public final
OpenCReport\Column::report_new():
                     OpenCReport\Report;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolreportgetfirst">
			<title>Get first report of a part column</title>
			<para>
				Get the first report from the part column.
				The object is marked internally as an iterator.
				For class methods of <literal>OpenCReport\Report</literal>,
				see <xref linkend="phpreportclass"/>
				<programlisting>public final
OpenCReport\Column::report_get_first():
                     ?OpenCReport\Report;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetsuppress">
			<title>Set part column suppression</title>
			<para>
				<programlisting>public final
OpenCReport\Column::set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetwidth">
			<title>Set part column width</title>
			<para>
				Set the width of the whole part column.
				If an inner report is wider than the column
				width, it's rendering is truncated.
				<programlisting>public final
OpenCReport\Column::set_width(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetheight">
			<title>Set part column height</title>
			<para>
				Set the part column height. During report
				execution, the column height is calculated
				for rendering. Inner reports and the height of
				their lines that would be rendered are added.
				New lines of a report that would exceed the
				part column height are not rendered and the report
				is rendered partially. The data shown in rendered
				lines are identical in both cases, whether or not
				the pre-set height is set. When the set column height
				is reached, further inner reports are not rendered.
				Default is unset, i.e. every inner report is
				fully rendered.
				<programlisting>public final
OpenCReport\Column::set_height(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetborderwidth">
			<title>Set border width</title>
			<para>
				Set the border width around the part column.
				The width is in points (1/72 inches).
				Default is 0, i.e. a border is not rendered
				around the part column.
				<programlisting>public final
OpenCReport\Column::set_border_width(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetbordercolor">
			<title>Set border color</title>
			<para>
				Set the border color around the part column.
				Only used if the border width is set.
				<programlisting>public final
OpenCReport\Column::set_border_color(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetdetailcols">
			<title>Set number of detail columns</title>
			<para>
				Set the number of detail columns in
				the part column. Inner reports inside the
				part column may be narrow and visually wasteful
				with empty areas on the page. In this case,
				when a page break would occur, a column break
				would occur instead. Only reaching the last
				column would result in a page break.
				<programlisting>public final
OpenCReport\Column::set_detail_columns(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpcolsetpadding">
			<title>Set column padding</title>
			<para>
				Set the padding between detail columns.
				It is used if the number of detail
				columns is greater than 1.
				<programlisting>public final
OpenCReport\Column::set_column_padding(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpreportclass">
		<title>The OpenCReport\Report class</title>
		<para>
			<programlisting>class OpenCReport\Report {
    public final get_next():
                     ?OpenCReport\Report;

    public final variable_new(
                     long $variable_type,
                     string $name,
                     string $expr,
                     ?string $reset_on_break_name = null):
                     OpenCReport\Variable;

    public final variable_new_full(
                     long $result_type,
                     string $name,
                     ?string $baseexpr = null,
                     ?string $intermedexpr = null,
                     ?string $intermed2expr = null,
                     ?string $resultexpr = null,
                     ?string $reset_on_break_name = null):
                     OpenCReport\Variable;

    public final expr_parse(
                     string $expr_string):
                     ?OpenCReport\Expr;

    public final expr_error(): ?string;

    public final resolve_variables(): void;

    public final evaluate_variables(): void;

    public final break_new(
                     ?string $name):
                     OpenCReport\Break;

    public final break_get(
                     string $break_name):
                     OpenCReport\Break;

    public final break_get_first():
                     ?OpenCReport\Break;

    public final resolve_breaks(): void;

    public final get_query_rownum(): long;

    public final add_start_cb(
                     string $callback): void;

    public final add_done_cb(
                     string $callback): void;

    public final add_new_row_cb(
                     string $callback): void;

    public final add_iteration_cb(
                     string $callback): void;

    public final add_precalculation_done_cb(
                     string $callback): void;

    public final equals(
                     OpenCReport\Report $report):
                     bool;

    public final set_main_query(
                     OpenCReport\Query $query): void;

    public final set_main_query_by_name(
                     string $query_name): void;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_iterations(
                     ?string $expr_string = null): void;

    public final set_font_name(
                     ?string $expr_string = null): void;

    public final set_font_size(
                     ?string $expr_string = null): void;

    public final set_height(
                     ?string $expr_string = null): void;

    public final set_fieldheader_priority(
                     ?string $expr_string = null): void;

    public final nodata(): OpenCReport\Output;
    public final header(): OpenCReport\Output;
    public final footer(): OpenCReport\Output;
    public final field_header(): OpenCReport\Output;
    public final field_details(): OpenCReport\Output;
}</programlisting>
		</para>
		<sect2 id="phpreportgetnext">
			<title>Get the next report</title>
			<para>
				Get the next object in the chain of reports.
				This method may only be used on an object created
				with <literal>OpenCReport\Column::report_get_first()</literal>,
				i.e. one that was internally marked as an iterator
				object.
				<programlisting>public final
OpenCReport\Report::get_next():
                     ?OpenCReport\Report;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportvarnew">
			<title>Create a new report variable</title>
			<para>
				Create a new variable of the specified type and
				name, using the expression to produce the value.
				Optionally a break name (see <xref linkend="breaks"/>)
				may be specified, where, upon a break change,
				the variable is reset. See <xref linkend="variables"/>.
				For class methods of
				<literal>OpenCReport\Variable</literal>,
				see <xref linkend="phpvariableclass"/>.
				<programlisting>public const OpenCReport\Report::VARIABLE_EXPRESSION;
public const OpenCReport\Report::VARIABLE_COUNT;
public const OpenCReport\Report::VARIABLE_COUNTALL;
public const OpenCReport\Report::VARIABLE_SUM;
public const OpenCReport\Report::VARIABLE_AVERAGE;
public const OpenCReport\Report::VARIABLE_AVERAGEALL;
public const OpenCReport\Report::VARIABLE_LOWEST;
public const OpenCReport\Report::VARIABLE_HIGHEST;

public final
OpenCReport\Report::variable_new(
                     long $variable_type,
                     string $name,
                     string $expr,
                     ?string $reset_on_break_name = null):
                     OpenCReport\Variable;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportvarnewfull">
			<title>Create a new custom report variable</title>
			<para>
				Create a new custom variable of the specified name,
				with total control over the base expression,
				intermediary expression(s) and the result expression.
				Optionally a break name (see <xref linkend="breaks"/>)
				may be specified, where, upon a break change,
				the variable is reset. See <xref linkend="variables"/>.
				For class methods of
				<literal>OpenCReport\Variable</literal>,
				see <xref linkend="phpvariableclass"/>.
				<programlisting>public final
OpenCReport\Report::variable_new_full(
                     long $result_type,
                     string $name,
                     ?string $baseexpr = null,
                     ?string $intermedexpr = null,
                     ?string $intermed2expr = null,
                     ?string $resultexpr = null,
                     ?string $reset_on_break_name = null):
                     OpenCReport\Variable;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportexprparse">
			<title>Parse and expression for the report</title>
			<para>
				Parse and expression for the report.
				If the expression fails to parse, the
				method returns <literal>NULL</literal>
				and the error is found in
				<literal>OpenCReport\Report::expr_parse()</literal>.
				<programlisting>public final
OpenCReport\Report::expr_parse(
                     string $expr_string):
                     ?OpenCReport\Expr;</programlisting>
			</para>
			<para>
				The main difference between
				<literal>OpenCReport::expr_parse()</literal>
				(see <xref linkend="phpparseexpr"/>)
				and this method is that the former may not
				reference a report variable identifier.
				Since the expression for the former method is not
				associated with a report, report variable identifiers
				in the expression may not be resolved.
				The same applies to any function that is related
				to report internal details, e.g. the
				<literal>brrownum()</literal> function
				(see <xref linkend="brrownumfunc"/>:
				the expression is not associated with a report with
				breaks, the break name will not be found.
			</para>
		</sect2>
		<sect2 id="phpreportexprerror">
			<title>Get the error after a failed expression parsing</title>
			<para>
				<programlisting>public final
OpenCReport\Report::expr_error(): ?string;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportresolvevars">
			<title>Resolve variables of the report</title>
			<para>
				Resolve all variables of the report.
				This method may be useful to implement
				a custom report executor. The equivalent
				C function is used internally. This method is
				used by unit tests.
				<programlisting>public final
OpenCReport\Report::resolve_variables(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportevalvars">
			<title>Evaluate variables of the report</title>
			<para>
				This method may be useful to implement
				a custom report executor. The equivalent
				C function is used internally. This method is
				used by unit tests.
				<programlisting>public final
OpenCReport\Report::evaluate_variables(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportbreaknew">
			<title>Create a new report break</title>
			<para>
				Create a new report break. A break
				is the basis for grouping data.
				See <xref linkend="breaks"/>.
				For the class methods of
				<literal>OpenCReport\Break</literal>,
				see <xref linkend="phpbreakclass"/>.
				<programlisting>public final
OpenCReport\Report::break_new(
                     ?string $name):
                     OpenCReport\Break;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportbreakget">
			<title>Get a report break by its name</title>
			<para>
				Get a previously created break
				using its name. The object that's created
				this way is <emphasis>not</emphasis> marked
				as an iterator, so
				<literal>OpenCReport\Break::get_next()</literal>
				may not be used on it.
				<programlisting>public final
OpenCReport\Report::break_get(
                     string $break_name):
                     OpenCReport\Break;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportbreakgetfirst">
			<title>Get the first report break</title>
			<para>
				Get the first break object in the
				chain of breaks of the report.
				The object is marked internally
				as an iterator, so
				<literal>OpenCReport\Break::get_next()</literal>
				may be used on it.
				<programlisting>public final
OpenCReport\Report::break_get_first():
                     ?OpenCReport\Break;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportresolvebreaks">
			<title>Resolve breaks of the report</title>
			<para>
				Resolve all breaks of the report.
				It may be useful to create a custom
				report executor. The equivalent C
				function is used internally. Used by
				unit tests.
				<programlisting>public final
OpenCReport\Report::resolve_breaks(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportgetqueryrownum">
			<title>Get the current row number of the main query</title>
			<para>
				Get the current row number of the report's main query.
				Used by unit tests.
				<programlisting>public final
OpenCReport\Report::get_query_rownum(): long;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportaddstartcb">
			<title>Add a "report start" callback</title>
			<para>
				Add a "report start" callback to the report.
				The callback is called when the report starts
				during report execution.
				<programlisting>public final
OpenCReport\Report::add_start_cb(
                     string $callback): void;</programlisting>
			</para>
			<para>
				The callback function interface must follow this:
				<programlisting>function
my_callback(OpenCReport $o, OpenCReport\Report $r): void;
</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportadddonecb">
			<title>Add a "report done" callback</title>
			<para>
				Add a "report done" callback to the report.
				The callback is called when the report is done
				during report execution.
				<programlisting>public final
OpenCReport\Report::add_done_cb(
                     string $callback): void;</programlisting>
			</para>
			<para>
				The callback function interface must follow this:
				<programlisting>function
my_callback(OpenCReport $o, OpenCReport\Report $r): void;
</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportaddnewrowcb">
			<title>Add a "new row" callback</title>
			<para>
				Add a "new row" callback to the report.
				The callback is called for every data row
				for the report during report execution.
				<programlisting>public final
OpenCReport\Report::add_new_row_cb(
                     string $callback): void;</programlisting>
			</para>
			<para>
				The callback function interface must follow this:
				<programlisting>function
my_callback(OpenCReport $o, OpenCReport\Report $r): void;
</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportadditerationcb">
			<title>Add an "iteration done" callback</title>
			<para>
				Add an "iteration done" callback to the report.
				The callback is called after every iteration
				for the report during report execution.
				<programlisting>public final
OpenCReport\Report::add_iteration_cb(
                     string $callback): void;</programlisting>
			</para>
			<para>
				The callback function interface must follow this:
				<programlisting>function
my_callback(OpenCReport $o, OpenCReport\Report $r): void;
</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportaddprecalcdonecb">
			<title>Add a "precalculation done" callback</title>
			<para>
				Add a "precalculation done" callback to the report.
				The callback is called after precalculation is done
				for the report during report execution.
				<programlisting>public final
OpenCReport\Report::add_precalculation_done_cb(
                     string $callback): void;</programlisting>
			</para>
			<para>
				The callback function interface must follow this:
				<programlisting>function
my_callback(OpenCReport $o, OpenCReport\Report $r): void;
</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportequals">
			<title>Check whether two report objects are the same</title>
			<para>
				Check whether the main object's internal C
				representation is the same as the passed-in
				object's internal representation.
				<programlisting>public final
OpenCReport\Report::equals(
                     OpenCReport\Report $report):
                     bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetmainquery">
			<title>Set the report's main query</title>
			<para>
				Set the report's main query to
				the passed-in <literal>OpenCReport\Query</literal>.
				<programlisting>public final
OpenCReport\Report::set_main_query(
                     OpenCReport\Query $query): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetmainquerybyname">
			<title>Set the report's main query by name</title>
			<para>
				Set the report's main query using
				the query name.
				<programlisting>public final
OpenCReport\Report::set_main_query_by_name(
                     string $query_name): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetsuppress">
			<title>Set the report suppression</title>
			<para>
				Set the report's suppression.
				The expression must evaluate too a
				numeric value. It's zero or non-zero
				value will decide whether the report
				is suppressed, i.e. not calculated and
				not rendered in the output.
				<programlisting>public final
OpenCReport\Report::public final set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetiterations">
			<title>Set number of iterations for the report</title>
			<para>
				Set the number of iterations for the report.
				The report will be calculated and rendered
				this many times. Default is 1.
				<programlisting>public final
OpenCReport\Report::set_iterations(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetfontname">
			<title>Set the font name for the report</title>
			<para>
				Set the font name for the report.
				The report font name will be used
				for any child elements that don't specify
				the font name themselves.
				<programlisting>public final
OpenCReport\Report::set_font_name(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetfontsize">
			<title>Set the font size for the report</title>
			<para>
				Set the font size for the report.
				The report font size will be used
				for any child elements that don't specify
				the font size themselves.
				<programlisting>public final
OpenCReport\Report::set_font_size(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetheight">
			<title>Set the report height</title>
			<para>
				Set the report height. During report
				execution, the report height is calculated
				for rendering. Height of lines that would be
				rendered are added. New lines that would
				exceed the report height are not rendered.
				The data shown in rendered lines are identical
				in both cased, whether or not the report height
				is set. Default is unset, i.e. every line
				is rendered and the number of lines determine
				the report height,
				<programlisting>public final
OpenCReport\Report::set_height(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportsetfhprio">
			<title>Set the report's field header prioroty</title>
			<para>
				Set the report's field header priority.
				See <xref linkend="reportfhpriority"/> for explanation.
				<programlisting>public final
OpenCReport\Report::set_fieldheader_priority(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpreportgetoutput">
			<title>Get output sections of the report</title>
			<para>
				Get the output sections of the report.
				See <xref linkend="nodatanode"/>,
				<xref linkend="repheader"/>,
				<xref linkend="repfooter"/> and
				<xref linkend="detailnode"/>.
				For class methods of <literal></literal>,
				see <xref linkend="phpoutputclass"/>.
				<programlisting>public final
OpenCReport\Report::nodata(): OpenCReport\Output;

public final
OpenCReport\Report::header(): OpenCReport\Output;

public final
OpenCReport\Report::footer(): OpenCReport\Output;

public final
OpenCReport\Report::field_header(): OpenCReport\Output;

public final
OpenCReport\Report::field_details(): OpenCReport\Output;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpvariableclass">
		<title>The OpenCReport\Variable class</title>
		<para>
			<programlisting>class OpenCReport\Variable {
    public final baseexpr():
                     ?OpenCReport\Expr;

    public final intermedexpr():
                     ?OpenCReport\Expr;

    public final intermed2expr():
                     ?OpenCReport\Expr;

    public final resultexpr():
                     ?OpenCReport\Expr;

    public final set_precalculate(
                     ?string $expr_string = null):
                     void;

    public final resolve(): void;
    public final eval(): void;
}</programlisting>
		</para>
		<sect2 id="phpvarbaseexpr">
			<title>Get the base expression of a variable</title>
			<para>
				Used by unit tests.
				For class methods of <literal>OpenCReport\Expr</literal>,
				see <xref linkend="phpexprclass"/>
				<programlisting>public final
OpenCReport\Variable::baseexpr():
                     ?OpenCReport\Expr;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpvarintermedexpr">
			<title>Get the first intermediary expression of a variable</title>
			<para>
				Used by unit tests.
				For class methods of <literal>OpenCReport\Expr</literal>,
				see <xref linkend="phpexprclass"/>
				<programlisting>public final
OpenCReport\Variable::intermedexpr():
                     ?OpenCReport\Expr;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpvarintermed2expr">
			<title>Get the second intermediary expression of a variable</title>
			<para>
				Used by unit tests.
				For class methods of <literal>OpenCReport\Expr</literal>,
				see <xref linkend="phpexprclass"/>
				<programlisting>public final
OpenCReport\Variable::intermed2expr():
                     ?OpenCReport\Expr;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpvarresultexpr">
			<title>Get the result expression of a variable</title>
			<para>
				Used by unit tests.
				For class methods of <literal>OpenCReport\Expr</literal>,
				see <xref linkend="phpexprclass"/>
				<programlisting>public final
OpenCReport\Variable::resultexpr():
                     ?OpenCReport\Expr;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpvarsetprecalc">
			<title>Set the variable precalculated</title>
			<para>
				Set the variable precalculated.
				A precalculated variable's value (or set of values)
				is calculated during the precalculation phase
				of report execution. When the report is being
				rendered, the precalculated values are used.
				This allows using an end value in a header,
				e.g. a report header may contain a summary of
				bottom line values. Similarly, break headers
				may show values that would otherwise be shown
				only in break footer sections for variables
				that are reset on a break.
				<programlisting>public final
OpenCReport\Variable::set_precalculate(
                     ?string $expr_string = null):
                     void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpvarresolve">
			<title>Resolve expressions of a variable</title>
			<para>
				Resolve the base, intermediary and result expressions
				of a single variable. Used by unit tests.
				<programlisting>public final
OpenCReport\Variable::resolve(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpvareval">
			<title>Evaluate expressions of a variable</title>
			<para>
				Evaluate the base, intermediary and result expressions
				of a single variable. Used by unit tests.
				<programlisting>public final
OpenCReport\Variable::eval(): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpbreakclass">
		<title>The OpenCReport\Break class</title>
		<para>
			<programlisting>class OpenCReport\Break {
    public final get_next():
                     ?OpenCReport\Break;

    public final breakfield_add(
                     OpenCReport\Expr $breakfield_expr):
                     void;

    public final check_fields(): bool;

    public final reset_vars(): void;

    public final add_trigger_cb(
                     ?string $callback):
                     void;

    public final name(): string;

    public final header(): OpenCReport\Output;
    public final footer(): OpenCReport\Output;
}</programlisting>
		</para>
		<sect2 id="phpbreakgetnext">
			<title>Get next break</title>
			<para>
				Get the next break object from the chain of
				breaks in the report this break belongs to.
				This method may only be called on an
				object that was marked as an iterator,
				i.e. one that was created by
				<literal>OpenCReport\Report::break_get_first()</literal>.
				<programlisting>public final
OpenCReport\Break::get_next():
                     ?OpenCReport\Break;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpbreakbfadd">
			<title>Add a breakfield to a break</title>
			<para>
				Add a breakfield to a break.
				A break may consists of multiple breakfields.
				A break triggers if any of the breakfields
				change from one data line to another.
				<programlisting>public final
OpenCReport\Break::breakfield_add(
                     OpenCReport\Expr $breakfield_expr):
                     void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpbreakcheckfields">
			<title>Check breakfields</title>
			<para>
				Check breakfields of a break.
				This method returns <literal>true</literal> if the break
				triggers, i.e. field values for the current data row
				do not match the values for the previous data row.
				It also the triggers for the first row when there is
				no previous row.
				It is used internally by the report executor
				and also used by unit tests. It may be useful
				to implement a custom report executor.
				<programlisting>public final
OpenCReport\Break::check_fields(): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpbreakresetvars">
			<title>Reset variables associated with a break</title>
			<para>
				Reset report variables associated with a break.
				Such variables were created with specifying the
				"reset on break" break name. These variables
				restart from their initial values.
				It is used internally by the report executor
				and also used by unit tests. It may be useful
				to implement a custom report executor.
				<programlisting>public final
OpenCReport\Break::reset_vars(): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpbreakaddtriggercb">
			<title>Add a "trigger" callback to a break</title>
			<para>
				Add a "trigger" callback to the break.
				<programlisting>public final
OpenCReport\Break::add_trigger_cb(
                     ?string $callback):
                     void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpbreakname">
			<title>Get the name of a break</title>
			<para>
				Get the name of a break. It may be useful
				if the breaks were added via a report
				XML descriptor but variables are added
				afterwards from code.
				<programlisting>public final
OpenCReport\Break::name(): string;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpbreakoutputs">
			<title>Get output sections of a break</title>
			<para>
				Get the header and footer sections of a break.
				See also <xref linkend="breakheadernode"/> and
				<xref linkend="breakfooternode"/>.
				For class methods of <literal>OpenCReport\Output</literal>,
				see <xref linkend="phpoutputclass"/>
				<programlisting>public final
OpenCReport\Break::header(): OpenCReport\Output;

public final
OpenCReport\Break::footer(): OpenCReport\Output;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpoutputclass">
		<title>The OpenCReport\Output class</title>
		<para>
			<programlisting>class OpenCReport\Output {
    public final set_suppress(
                     ?string $expr_string = null): void;

    public final add_line():
                     ?OpenCReport\Line;

    public final add_hline():
                     ?OpenCReport\HorizontalLine;

    public final add_image():
                     ?OpenCReport\Image;

    public final add_image_end(): void;
}</programlisting>
		</para>
		<sect2 id="phpoutputsetsuppress">
			<title>Set suppression of the output section</title>
			<para>
				Set suppression of the output section.
				The expression must evaluate to a numeric
				value which will be treated as a boolean,
				i.e. 0 or non-0. The default is <literal>false</literal>,
				i.e. the section is not suppressed.
				<programlisting>public final
OpenCReport\Output::set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpoutputaddline">
			<title>Add a (text) line</title>
			<para>
				Add a (text) line to the output section.
				A line may have children elements, like
				<literal>OpenCReport\Text</literal> and
				<literal>OpenCReport\Image</literal>.
				(See <xref linkend="phptextclass"/> and <xref
				linkend="phpimageclass"/>.)
				For class methods of <literal>OpenCReport\Line</literal>,
				see <xref linkend="phplineclass"/>.
				<programlisting>public final
OpenCReport\Output::add_line():
                     ?OpenCReport\Line;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpoutputaddhline">
			<title>Add a horizontal line</title>
			<para>
				Add a horizontal line (a visual separator)
				to the output section.
				For class methods of <literal>OpenCReport\HorizontalLine</literal>,
				see <xref linkend="phplineclass"/>.
				<programlisting>public final
OpenCReport\Output::add_hline():
                     ?OpenCReport\HorizontalLine;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpoutputaddimage">
			<title>Add an image</title>
			<para>
				Add an image to the output section.
				The image will indent every subsequent
				elements in the section, except other images.
				For class methods of <literal>OpenCReport\Image</literal>,
				see <xref linkend="phplineclass"/>.
				<programlisting>public final
OpenCReport\Output::add_image():
                     ?OpenCReport\Image;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpoutputaddimageend">
			<title>Add an image end marker</title>
			<para>
				Add an image end marker to the output section.
				Subsequent elements in the section won't be indented
				and will be drawn vertically below the previous image.
				<programlisting>public final
OpenCReport\Output::add_image_end(): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phplineclass">
		<title>The OpenCReport\Line class</title>
		<para>
			<programlisting>class OpenCReport\Line {
    public final set_font_name(
                     ?string $expr_string = null): void;

    public final set_font_size(
                     ?string $expr_string = null): void;

    public final set_bold(
                     ?string $expr_string = null): void;

    public final set_italic(
                     ?string $expr_string = null): void;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_color(
                     ?string $expr_string = null): void;

    public final set_bgcolor(
                     ?string $expr_string = null): void;

    public final add_text():
                     ?OpenCReport\Text;

    public final add_image():
                     ?OpenCReport\Image;
}</programlisting>
		</para>
		<sect2 id="phplinesetfontname">
			<title>Set the font name for the line</title>
			<para>
				Set the font name for the line.
				This font will be used for child text elements
				that don't set the font name themselves.
				<programlisting>public final
OpenCReport\Line::set_font_name(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplinesetfontsize">
			<title>Set the font size for the line</title>
			<para>
				Set the font size for the line.
				This font size will be used for child text elements
				that don't set the font size themselves.
				<programlisting>public final
OpenCReport\Line::set_font_size(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplinesetbold">
			<title>Set the font's bold flag for the line</title>
			<para>
				Set the font's bold flag for the line.
				The expression must evaluate to a numeric
				value that is treated as a boolean, i.e. 0 or non-0.
				Default is <literal>false</literal>.
				This bold flag value will be used for child text elements
				that don't set it themselves.
				<programlisting>public final
OpenCReport\Line::set_bold(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplinesetitalic">
			<title>Set the font's italic flag for the line</title>
			<para>
				Set the font's italic flag for the line.
				The expression must evaluate to a numeric
				value that is treated as a boolean, i.e. 0 or non-0.
				Default is <literal>false</literal>.
				This italic flag value will be used for child text elements
				that don't set it themselves.
				<programlisting>public final
OpenCReport\Line::set_italic(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplinesetsuppress">
			<title>Set line suppression</title>
			<para>
				Set the suppression flag for the line.
				The expression must evaluate to a numeric
				value that is treated as a boolean, i.e. 0 or non-0.
				Default is <literal>false</literal>,
				i.e. not suppressed. When set to a non-0 value
				(i.e. <literal>true</literal>), the whole line
				with all its child elements (text or image) will
				be suppressed, i.e. not rendered.
				<programlisting>public final
OpenCReport\Line::set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplinesetcolor">
			<title>Set text color for the line</title>
			<para>
				Set text color for the line.
				See <xref linkend="colorspec"/>.
				This text color will be used for child elements
				that don't set the text color themselves.
				<programlisting>public final
OpenCReport\Line::set_color(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplinesetbgcolor">
			<title>Set background color for the line</title>
			<para>
				Set background color for the line.
				See <xref linkend="colorspec"/>.
				This background color will be used for child elements
				that don't set the background color themselves.
				<programlisting>public final
OpenCReport\Line::set_bgcolor(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplineaddtext">
			<title>Add a text element to the line</title>
			<para>
				Add a child text element to the line.
				For class methods  of <literal>OpenCReport\Text</literal>,
				see <xref linkend="phptextclass"/>.
				<programlisting>public final
OpenCReport\Line::add_text():
                     ?OpenCReport\Text;</programlisting>
			</para>
		</sect2>
		<sect2 id="phplineaddimage">
			<title>Add an image element to the line</title>
			<para>
				Add a child image element to the line.
				For class methods  of <literal>OpenCReport\Image</literal>,
				see <xref linkend="phpimageclass"/>.
				<programlisting>public final
OpenCReport\Line::add_image():
                     ?OpenCReport\Image;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phphlineclass">
		<title>The OpenCReport\HorizontalLine class</title>
		<para>
			<programlisting>class OpenCReport\HorizontalLine {
    public final set_size(
                     ?string $expr_string = null): void;

    public final set_indent(
                     ?string $expr_string = null): void;

    public final set_length(
                     ?string $expr_string = null): void;

    public final set_font_size(
                     ?string $expr_string = null): void;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_color(
                     ?string $expr_string = null): void;
}</programlisting>
		</para>
		<sect2 id="phphlinesetsize">
			<title>Set the line width</title>
			<para>
				Set the line width in points.
				Also see <xref linkend="hlinewidth"/>
				<programlisting>public final
OpenCReport\HorizontalLine::set_size(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phphlinesetindent">
			<title>Set the line indentation</title>
			<para>
				Set the line indentation, i.e. starting point
				to the right of the left side of the report.
				Also see <xref linkend="hlineindent"/>
				<programlisting>public final
OpenCReport\HorizontalLine::set_indent(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phphlinesetlength">
			<title>Set the line length</title>
			<para>
				Set the line length.
				See <xref linkend="hlinelength"/> and
				<xref linkend="sizeunit"/>.
				<programlisting>public final
OpenCReport\HorizontalLine::set_length(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phphlinesetfontsize">
			<title>Set the line's font size</title>
			<para>
				Set the line's font size. This font size
				is used in calculating the line length.
				See <xref linkend="hlinefontsize"/>
				<programlisting>public final
OpenCReport\HorizontalLine::set_font_size(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phphlinesetsuppress">
			<title>Set the suppression flag for the line</title>
			<para>
				Set the suppression flag for the line.
				The expression must evaluate to a numeric
				value that is treated as a boolean, i.e. 0 or non-0.
				When set to <literal>true</literal>, the line
				is not rendered. Default is <literal>false</literal>.
				<programlisting>public final
OpenCReport\HorizontalLine::set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phphlinesetcolor">
			<title>Set the line color</title>
			<para>
				Set the line color.
				See <xref linkend="colorspec"/>.
				<programlisting>public final
OpenCReport\HorizontalLine::set_color(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phpimageclass">
		<title>The OpenCReport\Image class</title>
		<para>
			<programlisting>class OpenCReport\Image {
    public final set_value(
                     ?string $expr_string = null): void;

    public final set_suppress(
                     ?string $expr_string = null): void;

    public final set_type(
                     ?string $expr_string = null): void;

    public final set_width(
                     ?string $expr_string = null): void;

    public final set_height(
                     ?string $expr_string = null): void;

    public final set_alignment(
                     ?string $expr_string = null): void;

    public final set_bgcolor(
                     ?string $expr_string = null): void;

    public final set_text_width(
                     ?string $expr_string = null): void;
}</programlisting>
		</para>
		<sect2 id="phpimagesetvalue">
			<title>Set the file name of the image</title>
			<para>
				Set the file name of the image.
				The file name may be and absolute path,
				relative to the work directory of the application,
				or relative to any of the paths added with
				<literal>OpenCReport::add_search_path()</literal>.
				(See <xref linkend="phpaddsearchpath"/>.)
				<programlisting>public final
OpenCReport\Image::set_value(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesetsuppress">
			<title>Set the suppression flag for the image</title>
			<para>
				Set the suppression flag for the image.
				The expression must evaluate to a numeric
				value that is treated as a boolean, i.e. 0 or non-0.
				Default is <literal>false</literal>.
				<programlisting>public final
OpenCReport\Image::set_suppress(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesettype">
			<title>Set the image type</title>
			<para>
				Set the image file type.
				Usually it's auto-detected and not needed.
				<programlisting>public final
OpenCReport\Image::set_type(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesetwidth">
			<title>Set the image width</title>
			<para>
				Set the image width. This setting
				is used when the image element is
				a direct child of an output section.
				See <xref linkend="imagewidth"/>.
				<programlisting>public final
OpenCReport\Image::set_width(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesetheight">
			<title>Set the image height</title>
			<para>
				Set the image height. This setting
				is used when the image element is
				a direct child of an output section.
				See <xref linkend="imagewidth"/>.
				<programlisting>public final
OpenCReport\Image::set_height(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesetalignment">
			<title>Set the image alignment</title>
			<para>
				Set the image alignment. This setting
				is used when the image element is
				a child of a text line.
				See <xref linkend="imagealign"/>.
				<programlisting>public final
OpenCReport\Image::set_alignment(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesetbgcolor">
			<title>Set the image background color</title>
			<para>
				Set the image background color. This setting
				is used when the image element is
				a child of a text line.
				See <xref linkend="imagebgcolor"/>.
				<programlisting>public final
OpenCReport\Image::set_bgcolor(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phpimagesettextwidth">
			<title>Set the image "text width"</title>
			<para>
				Set the image "text width". This setting
				is used when the image element is
				a child of a text line.
				See <xref linkend="imagetextwidth"/>.
				<programlisting>public final
OpenCReport\Image::set_text_width(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phptextclass">
		<title>The OpenCReport\Text class</title>
		<para>
			<programlisting>class OpenCReport\Text {
    public final set_value_string(
                     ?string $expr_string = null): void;

    public final set_value_expr(
                     ?string $expr_string = null): void;

    public final set_value_delayed(
                     ?string $expr_string = null): void;

    public final set_format(
                     ?string $expr_string = null): void;

    public final set_translate(
                     ?string $expr_string = null): void;

    public final set_width(
                     ?string $expr_string = null): void;

    public final set_alignment(
                     ?string $expr_string = null): void;

    public final set_color(
                     ?string $expr_string = null): void;

    public final set_bgcolor(
                     ?string $expr_string = null): void;

    public final set_font_name(
                     ?string $expr_string = null): void;

    public final set_font_size(
                     ?string $expr_string = null): void;

    public final set_bold(
                     ?string $expr_string = null): void;

    public final set_italic(
                     ?string $expr_string = null): void;

    public final set_link(
                     ?string $expr_string = null): void;

    public final set_memo(
                     ?string $expr_string = null): void;

    public final set_memo_wrap_chars(
                     ?string $expr_string = null): void;

    public final set_memo_max_lines(
                     ?string $expr_string = null): void;
}</programlisting>
		</para>
		<sect2 id="phptextsetvaluestring">
			<title>Set literal value</title>
			<para>
				Set the literal value for the text element.
				<programlisting>public final
OpenCReport\Text::set_value_string(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetvalueexpr">
			<title>Set expression value</title>
			<para>
				Set the expression value for the text element.
				And expression may depend on data row values.
				See <xref linkend="expressions"/>.
				<programlisting>public final
OpenCReport\Text::set_value_expr(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetvaluedelayed">
			<title>Set delayed flag for the field expression</title>
			<para>
				Set delayed flag for the field expression.
				When set to <literal>true</literal>, the field
				expression's last value is calculated during
				the precalculation phase of executing the report
				and this precalculated value is used during
				rendering the report.
				<programlisting>public final
OpenCReport\Text::set_value_delayed(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetformat">
			<title>Set the format string for the field expression</title>
			<para>
				Set the format string for the field expression.
				This format string will be used instead of
				the default formats for specific types.
				See <xref linkend="formatting"/>
				<programlisting>public final
OpenCReport\Text::set_format(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetxlate">
			<title>Set the translation flag for the field expression</title>
			<para>
				Set the translation flag for the field expression.
				When set to <literal>true</literal>, the field
				value will be translated according to the locale
				and translation settings.
				See <xref linkend="phplocalemethods"/>
				<programlisting>public final
OpenCReport\Text::set_translate(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetwidth">
			<title>Set the field width</title>
			<para>
				Set the field width.
				See <xref linkend="textelemwidth"/>
				<programlisting>public final
OpenCReport\Text::set_width(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetalign">
			<title>Set the field alignment</title>
			<para>
				Set the field alignment.
				See <xref linkend="textelemalign"/>
				<programlisting>public final
OpenCReport\Text::set_alignment(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetcolor">
			<title>Set the field text color</title>
			<para>
				Set the field text color.
				See <xref linkend="textcolor"/>
				<programlisting>public final
OpenCReport\Text::set_color(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetbgcolor">
			<title>Set the field background color</title>
			<para>
				Set the field background color.
				See <xref linkend="textbgcolor"/>
				<programlisting>public final
OpenCReport\Text::set_bgcolor(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetfontname">
			<title>Set the field font name</title>
			<para>
				Set the field font name.
				See <xref linkend="textelemfontname"/>
				<programlisting>public final
OpenCReport\Text::set_font_name(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetfontsize">
			<title>Set the field font size</title>
			<para>
				Set the field font size.
				See <xref linkend="textelemfontsize"/>
				<programlisting>public final
OpenCReport\Text::set_font_size(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetbold">
			<title>Set the field's bold flag</title>
			<para>
				Set the field's bold flag.
				See <xref linkend="textbold"/>
				<programlisting>public final
OpenCReport\Text::set_bold(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetitalic">
			<title>Set the field's italic flag</title>
			<para>
				Set the field's italic flag.
				See <xref linkend="textitalic"/>
				<programlisting>public final
OpenCReport\Text::set_italic(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetlink">
			<title>Set the field's link</title>
			<para>
				Set the field's link URL.
				When set, the text field becomes a link
				with the specified URL.
				See <xref linkend="weblink"/>
				<programlisting>public final
OpenCReport\Text::set_link(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetmemo">
			<title>Set the field's memo flag</title>
			<para>
				Set the field's memo (multi-line text) flag.
				When set to <literal>true</literal>,
				the text field becomes a multi-line field.
				See <xref linkend="memo"/>
				<programlisting>public final
OpenCReport\Text::set_memo(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetmemowrap">
			<title>Set the field's "wrap at characters" flag</title>
			<para>
				Set the field's "wrap at characters" flag.
				Only used when the memo flag is set to
				<literal>true</literal>.
				Default is <literal>false</literal>, the text
				is wrapped at word boundaries.
				When set to <literal>true</literal>, text is
				wrapped at character boundaries with hyphenation.
				See <xref linkend="memowrap"/>
				<programlisting>public final
OpenCReport\Text::set_memo_wrap_chars(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="phptextsetmemomaxlines">
			<title>Set the field's maximum number of lines</title>
			<para>
				Set the field's maximum number of lines.
				Only used when the memo flag is set to
				<literal>true</literal>. The text field's value
				is only rendered up to the set number of lines.
				Default is unset, the text is rendered fully.
				See <xref linkend="memorowlimit"/>
				<programlisting>public final
OpenCReport\Text::set_memo_max_lines(
                     ?string $expr_string = null): void;</programlisting>
			</para>
		</sect2>
	</sect1>
	<sect1 id="phprlibcompat">
		<title>RLIB compatibility API</title>
		<para>
			These functions mimic the behaviour
			of the RLIB PHP API but their declaration
			differ in a way that the RLIB compatibility
			API in OpenCReports create and use
			<literal>OpenCReport</literal> objects,
			making the OpenCReports methods and
			RLIB compatibility functions inter-operable.
		</para>
		<sect2 id="rlibinit">
			<title>Initialize a report</title>
			<para>
				<programlisting>function
rlib_init(): ?OpenCReport;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibdestroy">
			<title>Destroy a report</title>
			<para>
				<programlisting>function
rlib_free(OpenCReport $r): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibgetlibver">
			<title>Get library version</title>
			<para>
				<programlisting>function
rlib_version(void): string;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddmariads">
			<title>Add a MySQL/MariaDB datasource</title>
			<para>
				This function is mostly equivalent to
				<literal>OpenCReport::datasource_add_mariadb()</literal>
				except that this function does not have a
				<literal>port</literal> parameter and it
				doesn't handle the port the way RLIB handled
				it as an afterthought, i.e. the value of
				<literal>$host</literal> could have a
				<literal>:port</literal> suffix. Only
				the default port will be used, which may be
				set in the MySQL or MariaDB configuration.
				<programlisting>function
rlib_add_datasource_mysql(
                     OpenCReport $r,
                     string $source_name,
                     string $host,
                     string $user,
                     string $password,
                     string $dbname):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddmariads2">
			<title>Add a MySQL/MariaDB datasource from an INI group</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::datasource_add_mariadb2()</literal>.
				<programlisting>function
rlib_add_datasource_mysql_from_group(
                     OpenCReport $r,
                     string $source_name,
                     string $group,
                     ?string $option_file = null):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddpgds">
			<title>Add a PostgreSQL datasource</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::datasource_add_postgresql2()</literal>.
				<programlisting>function
rlib_add_datasource_postgres(
                     OpenCReport $r,
                     string $source_name,
                     ?string $connection_info = null):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddodbcds">
			<title>Add an ODBC datasource</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::datasource_add_odbc()</literal>.
				<programlisting>function
rlib_add_datasource_odbc(
                     OpenCReport $r,
                     string $source_name,
                     string $dbname,
                     ?string $user, = null,
                     ?string $password = null):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddarrayds">
			<title>Add an array datasource</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::datasource_add_array()</literal>.
				<programlisting>function
rlib_add_datasource_array(
                     OpenCReport $r,
                     string $source_name):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddxmlds">
			<title>Add an XML datasource</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::datasource_add_xml()</literal>.
				<programlisting>function
rlib_add_datasource_xml(
                     OpenCReport $r,
                     string $source_name):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddcsvds">
			<title>Add a CSV datasource</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::datasource_add_csv()</literal>.
				<programlisting>function
rlib_add_datasource_csv(
                     OpenCReport $r,
                     string $source_name):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddquery">
			<title>Add a query</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport\Datasource::query_add()</literal>
				with a different order of parameters.
				The query name is the last parameter.
				<programlisting>function
rlib_add_query_as(
                     OpenCReport $r,
                     string $source_name,
                     string $array_or_file_or_sql,
                     string $name):
                     OpenCReport\Datasource;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddfollower">
			<title>Add a resultset follower</title>
			<para>
				This function is about equivalent to
				<literal>OpenCReport\Query::add_follower()</literal>.
				The <literal>$leader</literal> and
				<literal>$follower</literal> are query
				names.
				<programlisting>function
rlib_add_resultset_follower(
                     OpenCReport $r,
                     string $leader,
                     string $follower): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddn1follower">
			<title>Add a resultset N:1 follower</title>
			<para>
				This function is about equivalent to
				<literal>OpenCReport\Query::add_follower_n_to_1()</literal>.
				The former allows an arbitrary match expression,
				while the RLIB compatibility function
				will use the <literal>$leader_field = $follower_field</literal>
				expression. Similarly to the above
				function, <literal>$leader</literal> and
				<literal>$follower</literal> are query
				names.
				<programlisting>function
rlib_add_resultset_follower_n_to_1(
                     OpenCReport $r,
                     string $leader,
                     string $leader_field,
                     string $follower,
                     string $follower_field): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetdsencoding">
			<title>Set datasource encoding</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport\Datasource::set_encoding()</literal>.
				See <xref linkend="phpdssetencoding"/>
				<programlisting>function
rlib_set_datasource_encoding(
                     OpenCReport $r,
                     string $name,
                     string $encoding): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibloadreport">
			<title>Add a report XML</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::parse_xml()</literal>.
				<programlisting>function
rlib_add_report(
                     OpenCReport $r,
                     string $filename): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibparsexmlfrombuffer">
			<title>Add a report XML from buffer</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::parse_xml_from_buffer()</literal>.
				<programlisting>function
rlib_add_report_from_buffer(
                     OpenCReport $r,
                     string $buffer): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddsearchpath">
			<title>Add a search path</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::add_search_path()</literal>.
				<programlisting>function
rlib_add_search_path(
                     OpenCReport $r,
                     string $path): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetlocale">
			<title>Set locale</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::set_locale()</literal>.
				<programlisting>function
rlib_set_locale(
                     OpenCReport $r,
                     string $locale): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetupxlate">
			<title>Setup translation</title>
			<para>
				This function is equivalent to
				<literal>OpenCReport::bindtextdomain()</literal>.
				<programlisting>function
rlib_bindtextdomain(
                     OpenCReport $r,
                     string $domain,
                     string $dirname): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetoutputformat">
			<title>Set output format</title>
			<para>
				This function is about equivalent to
				<literal>OpenCReport::set_output_format()</literal>
				but accepts textual format names (like
				<literal>pdf</literal> instead of the
				numeric constants like <literal>OpenCReport::OUTPUT_PDF</literal>
				<programlisting>function
rlib_set_output_format_from_text(
                     OpenCReport $r,
                     string $format): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibadduserfunc">
			<title>Add a custom report function</title>
			<para>
				This function is the RLIB compatible
				variant of <literal>OpenCReport::function_add()</literal>.
				Unlike the OpenCReports API, the function
				added by this function does not have
				the control knobs to optimize it properly.
				After this function returns, subsequently
				parsed expressions may use a function
				name passed in with <literal>$name</literal>.
				The PHP function name is in <literal>$function</literal>
				<programlisting>function
rlib_add_function(
                     OpenCReport $r,
                     string $name,
                     string $function,
                     long $params): void;</programlisting>
			</para>
			<para>
				The interface of the PHP function must follow the
				below prototype. It must contain the exact number
				of arguments passed in via <literal>$params</literal>,
				i.e. it may not pass <literal>-1</literal> to indicate
				variadic arguments.
				<programlisting>function my_function($arg1, $arg2, ...)</programlisting>
			</para>
			<para>
				The function implementation may return
				any PHP base type (<literal>string</literal>,
				<literal>long</literal>, <literal>double</literal>
				or <literal>bool</literal>).
			</para>
		</sect2>
		<sect2 id="rlibsetoutputencoding">
			<title>Set output encoding</title>
			<para>
				This function silently does nothing.
				For PDF, it's not relevant. Other
				(CURRENTLY NOT IMPLEMENTED) output formats
				will all use UTF-8.
				<programlisting>function
rlib_set_output_encoding(
                     OpenCReport $r,
                     string $encoding): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibaddreportparam">
			<title>Add a report parameter</title>
			<para>
				This function silently does nothing.
				Currently no output format (other than PDF)
				are implemented and there was no need for
				report parameters yet in OpenCReports.
				<programlisting>function
rlib_add_parameter(
                     OpenCReport $r,
                     string $param,
                     string $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetoutputparam">
			<title>Set an output parameter</title>
			<para>
				This function silently does nothing.
				Currently no output format (other than PDF)
				are implemented and there was no need for
				output parameters yet in OpenCReports.
				<programlisting>function
rlib_set_output_parameter(
                     OpenCReport $r,
                     string $param,
                     string $value): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibrefresharray">
			<title>Refresh array query contents</title>
			<para>
				This function is equivalent to executing
				<xref linkend="phprefreshquery"/>.
				The same limitations apply.
				<programlisting>function
rlib_query_refresh(?OpenCReport $r = null): void;</programlisting>
			</para>
			<para>
				OpenCReports allows calling this function
				with no parameters or a <literal>NULL</literal>
				parameter.
			</para>
		</sect2>
		<sect2 id="rlibaddeventcb">
			<title>Add an event callback</title>
			<para>
				This function adds a callback for
				the specified <literal>$signal</literal>
				in an RLIB compatible way. The signal
				name may be <literal>row_change</literal>,
				<literal>report_done</literal>,
				<literal>report_start</literal>,
				<literal>report_iteration</literal>,
				<literal>part_iteration</literal> or
				<literal>precalculation_done</literal>.
				<programlisting>function
rlib_signal_connect(
                     OpenCReport $r,
                     string $signal,
                     string $function): void;</programlisting>
			</para>
			<para>
				The PHP function prototype must follow this:
				<programlisting>function my_callback()</programlisting>
			</para>
			<para>
				This function is different from the
				methods that add specific callback
				types for parts, reports, breaks, etc.
				in that the callback is added to the toplevel
				<literal>OpenCReport</literal> object context,
				meaning that a <literal>report_start</literal>
				callback will be called for every report
				in case there are multiple reports in the same
				context. Similarly, the same
				<literal>part_iteration</literal> callback
				will be called for every part in a multi-part
				report.
			</para>
			<para>
				Since there is no way to know which part or
				which report triggers the callback, it is recommended
				to use <literal>rlib_signal_connect()</literal>
				for single-part single-report reports. For
				more special purposes, the callback creation
				class methods are recommended.
			</para>
		</sect2>
		<sect2 id="rlibrunreport">
			<title>Execute the report</title>
			<para>
				It is equivalent to <literal>OpenCReport::execute()</literal>
				<programlisting>function
rlib_execute(OpenCReport $r): bool;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibdumpreport">
			<title>Dump the report output</title>
			<para>
				It is equivalent to <literal>OpenCReport::spool()</literal>
				<programlisting>function
rlib_spool(OpenCReport $r): ?string;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibgetcontenttype">
			<title>Get content type</title>
			<para>
				It is equivalent to <literal>OpenCReport::get_content_type()</literal>
				<programlisting>function
rlib_get_content_type(OpenCReport $r): ?string;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetradix">
			<title>Set radix character</title>
			<para>
				This function silently does nothing.
				Formatting numbers correctly follow the
				locale information regarding the decimal
				separator.
				<programlisting>function
rlib_set_radix_character(OpenCReport $r): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibcompileexpr">
			<title>Compile and evaluate an expression</title>
			<para>
				<programlisting>function
rlib_compile_infix(string $expr_string):
                     string|double|null;</programlisting>
			</para>
			<para>
				Since only the expression string is passed
				but not the <literal>$r</literal> resource
				in RLIB, the compatibility implementation
				of this function is equivalent to the
				sequence of creating an internal
				<literal>OpenCReport</literal> object,
				parsing, optimizing and evaluating the
				expression, converting its result to
				a PHP base type, then destroying the
				internal object. For this reason, the
				expression may not reference any query
				columns or report variables.
			</para>
		</sect2>
		<sect2 id="rlibaddgraphregion">
			<title>Add graph background region</title>
			<para>
				This function silently does nothing.
				GRAPHING IS NOT IMPLEMENTED YET.
				<programlisting>function
rlib_graph_add_bg_region(
                     OpenCReport $r,
                     string $graph,
                     string $region,
                     string $color,
                     double $start,
                     double $end): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibclearregion">
			<title>Clear graph background region</title>
			<para>
				This function silently does nothing.
				GRAPHING IS NOT IMPLEMENTED YET.
				<programlisting>function
rlib_graph_clear_bg_region(
                     OpenCReport $r,
                     string $graph): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetgraphminortick">
			<title>Set graph minor tick</title>
			<para>
				This function silently does nothing.
				GRAPHING IS NOT IMPLEMENTED YET.
				<programlisting>function
rlib_graph_set_x_minor_tick(
                     OpenCReport $r,
                     string $graph,
                     string $x): void;</programlisting>
			</para>
		</sect2>
		<sect2 id="rlibsetgraphminortickloc">
			<title>Set graph minor tick by location</title>
			<para>
				This function silently does nothing.
				GRAPHING IS NOT IMPLEMENTED YET.
				<programlisting>function
rlib_graph_set_x_minor_tick_by_location(
                     OpenCReport $r,
                     string $graph,
                     double $location): void;</programlisting>
			</para>
		</sect2>
	</sect1>
</chapter>

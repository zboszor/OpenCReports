<chapter id="formatting" xreflabel="Formatting data">
	<title>Formatting</title>
	<sect1 id="formattingfuncs">
		<title>Formatting functions</title>
		<para>
			Formatting data can be done via the
			<xref linkend="formatfunc"/>, the
			<xref linkend="printffunc"/> and the
			<xref linkend="formatattr"/>.
			After formatting, regardless of the data type
			that was formatted, the type of the result value
			is string. This string can be displayed in the
			report output or processed further as needed.
		</para>
	</sect1>
	<sect1 id="formatstrings">
		<title>Format strings</title>
		<para>
			OpenCReports supports the same set of
			format strings as RLIB, with extensions.
			RLIB and OpenCReports support:
			<itemizedlist>
				<listitem override="bullet">
					<para>
						legacy format strings for strings,
						numbers and datetime values
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						"new style" format strings with <literal>!</literal>
						prefix
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			The legacy and the "new style" format strings can only be
			used in the <xref linkend="formatfunc"/> and the
			<xref linkend="formatattr"/>, due to them being RLIB
			compatible. They can also be used in the
			<xref linkend="printffunc"/> in limited cases,
			i.e. when formatting a single data value.
		</para>
		<para>
			OpenCReports also supports a 2nd generation
			new style format strings with a prefix and a
			pair of brackets (<literal>{}</literal>) that
			embed the format strings. The 2nd generation
			format strings can also be used with the
			<xref linkend="printffunc"/> in a completely
			unambiguous manner.
		</para>
	</sect1>
	<sect1 id="legacyformatstrings">
		<title>Legacy format strings</title>
		<para>
			Legacy format strings are like in C, but not always
			identical.
		</para>
		<sect2 id="legacyformatstringstring">
			<title>Format string for strings</title>
			<para>
				To print a string, the <literal>%s</literal>
				format string can be used.
				Examples for using it in the
				<xref linkend="formatattr" /> can be found in the
				<xref linkend="formatattrexamples"/>.
			</para>
			<para>
				Example expressions for the <xref linkend="formatfunc"/>:
				<programlisting>format(query1.field1, '%s')
format(query1.field1, 'Look, there is a %s there!')</programlisting>
			</para>
			<para>
				Example expressions for <xref linkend="printffunc"/>:
				<programlisting>printf('%s, 'query1.field1')
printf('Look, there is a %s there!', query1.field1)</programlisting>
			</para>
			<para>
				Supplementary format string flags are supported. See
				the string flags in
				<ulink url="https://man7.org/linux/man-pages/man3/printf.3.html">printf(3)</ulink>
			</para>
		</sect2>
		<sect2 id="legacyformatstringnum">
			<title>Format string for numeric values</title>
			<para>
				To print a number, the <literal>%d</literal>
				format string can be used. As opposed to the
				C <literal>printf</literal> format specifier
				where <literal>%d</literal> is used for integers,
				this is used for printing fractions, too.
				Examples for using it in the
				<xref linkend="formatattr" /> can be found in the
				<xref linkend="formatattrexamples"/>.
			</para>
			<para>
				The same format string can be used for the
				the <xref linkend="formatfunc"/> and the
				<xref linkend="printffunc"/>, just like in
				the previous examples for strings.
			</para>
			<para>
				Supplementary format string flags are supported. See
				the decimal and float/double format flags in
				<ulink url="https://man7.org/linux/man-pages/man3/printf.3.html">printf(3)</ulink>
			</para>
		</sect2>
		<sect2 id="legacyformatstringdatetime">
			<title>Format string for datetime values</title>
			<para>
				RLIB approximated <literal>strftime()</literal>
				when printing a datetime value. OpenCReports
				<emphasis>uses</emphasis> <literal>strftime()</literal>.
				See the
				<ulink url="https://man7.org/linux/man-pages/man3/strftime.3.html">strftime()</ulink>
				function description for the complete description of
				format string flags.
			</para>
			<para>
				When a datetime field didn't have an explicit format string,
				RLIB used the US date format to print the datetime value.
				On the other hand, OpenCReports uses the locale specific
				date format if the report has a locale set.
			</para>
		</sect2>
	</sect1>
	<sect1 id="newformatstrings">
		<title>New style format strings</title>
		<para>
			RLIB supported "new style" format strings that allowed
			formatting numeric data as monetary values and allowed
			to disambiguate between format strings used for different
			data types. This was needed because some format flags
			are used in both <literal>printf()</literal>,
			<literal>strfmon()</literal> and <literal>strftime()</literal>.
		</para>
		<sect2 id="newformatstringsstring">
			<title>New style format string for strings</title>
			<para>
				This is an extension over RLIB, which didn't have
				such a notion. In OpenCReports, the new style flag
				is prefixed with <literal>!&amp;</literal>.
			</para>
		</sect2>
		<sect2 id="newformatstringsnum">
			<title>New style format string for numeric data</title>
			<para>
				The new style flag is the legacy flag prefixed with <literal>!#</literal>
			</para>
		</sect2>
		<sect2 id="newformatstringsmoney">
			<title>New style format string for monetary data</title>
			<para>
				There was way to format numeric data using the legacy
				formatting flags. The new style flag is prefixed with
				<literal>!$</literal> and uses the flags of
				<literal>strfmon()</literal>. See the
				<ulink url="https://man7.org/linux/man-pages/man3/strfmon.3.html">strfmon()</ulink>
				function for details.
			</para>
			<para>
				To print the correct currency name, the locale must be
				set for the report. Only one locale can be set, so
				a single currency name will be used for every value
				using monetary formatting.
			</para>
		</sect2>
		<sect2 id="newformatstringsdatetime">
			<title>New style format string for datetime values</title>
			<para>
				The new style flag is the legacy flags prefixed with
				<literal>!@</literal>. Formatting a datetime value uses
				<ulink url="https://man7.org/linux/man-pages/man3/strftime.3.html">strftime()</ulink>.
			</para>
		</sect2>
		<sect2 id="newformatstringexamples">
			<title>New style format string examples</title>
			<para>
				Examples for using these in the
				<xref linkend="formatattr" /> can be found in the
				<xref linkend="formatattrexamples"/>.
			</para>
		</sect2>
	</sect1>
	<sect1 id="newformatstringsgen2">
		<title>Second generation new style format strings</title>
		<para>
			This format string style builds upon the original
			new style format strings, with the addition of brackets
			that embed the underlying format strings.
		</para>
		<sect2 id="newformatstringsgen2string">
			<title>2nd gen new style format string for strings</title>
			<para>
				The format string format is the legacy format string
				embedded in <literal>!&amp;{...}</literal>.
			</para>
		</sect2>
		<sect2 id="newformatstringsgen2num">
			<title>2nd gen new style format string for numeric data</title>
			<para>
				The format string format is the legacy format string
				embedded in <literal>!#{...}</literal>
			</para>
		</sect2>
		<sect2 id="newformatstringsgen2money">
			<title>2nd gen new style format string for monetary data</title>
			<para>
				The format string format is the same as the first
				generation. Instead of just having a prefix, the
				<literal>strfmon()</literal> format string is embedded in
				<literal>!${...}</literal>
			</para>
			<para>
				Formatting monetary values uses <literal>strfmon()</literal>.
				See
				<ulink url="https://man7.org/linux/man-pages/man3/strfmon.3.html">strfmon(3)</ulink>
			</para>
			<para>
				To print the correct currency name, the locale must be
				set for the report. Only one locale can be set, so
				a single currency name will be used for every value
				using monetary formatting.
			</para>
		</sect2>
		<sect2 id="newformatstringsgen2datetime">
			<title>2nd gen new style format string for datetime values</title>
			<para>
				The format string format is embedded in
				<literal>!@{...}</literal>. Formatting a datetime value uses
				<literal>strftime()</literal>.
			</para>
		</sect2>
		<sect2 id="newformatstringexamples2">
			<title>2nd gen new style format string examples</title>
			<para>
				Examples for using these in the
				<xref linkend="formatattr" /> can be found in the
				<xref linkend="formatattrexamples"/>.
			</para>
		</sect2>
	</sect1>
	<sect1 id="swissarmyknife">
		<title>The swiss army knife of formatting</title>
		<para>
			The <xref linkend="printffunc"/> is the most versatile
			formatting function in OpenCReports. It does not exist
			in RLIB. Using the second generation format strings
			makes it completely unambiguous.
		</para>
		<para>
			The <literal>printf()</literal> function in OpenCReports
			allows formatting every data type into a common result string.
			Example:
			<programlisting>printf('You had %d %s on !@{%Y-%m-%d} '
      'and %d %s on !@{%Y-%m-%d} in your pocket.',
      6, 'apples', stodt('2022-05-01'),
      2, 'oranges', stodt('2022-05-02'))</programlisting>
			The result is:
			<programlisting>You had 6 apples on 2022-05-01 and 2 oranges on 2022-05-02 in your pocket.</programlisting>
		</para>
	</sect1>
</chapter>

<chapter id="functions" xreflabel="Functions">
	<title>Functions</title>
	<sect1 id="funcsintro">
		<title>Introduction</title>
		<para>
			This section lists the functions supported by OpenCReports
			in topics, and alphabetically in their topic.
		</para>
		<para>
			Most functions below operate in this way, unless noted otherwise:
			<itemizedlist>
				<listitem>
					<para>
						numeric and bitwise functions with more than two operands
						take their first operand and perform the same operation
						using the second, third, etc. operands repeatedly.
					</para>
				</listitem>
				<listitem>
					<para>
						if any of the operands is an error (resulting from
						runtime processing of a subexpression), then the
						result will use the exact error of the first operand
						that is an error.
					</para>
				</listitem>
				<listitem>
					<para>
						if any of the operands is NULL (e.g. the data source
						is SQL and the field value is SQL NULL) then the
						result will also be NULL.
					</para>
				</listitem>
				<listitem>
					<para>
						Boolean logic functions treat their operands with
						0 being false and anything else (even fractions less
						than 0.5) as true.
					</para>
				</listitem>
				<listitem>
					<para>
						Bitwise functions treat their operands as 64-bit
						numeric values, with rounding if they are fractions.
					</para>
				</listitem>
				<listitem>
					<para>
						String arithmetics operate on UTF-8 encoded strings
						and count in number of UTF-8 characters instead of
						byte length.
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</sect1>
	<sect1 id="arithfuncs">
		<title>Arithmetic functions</title>
		<sect2 id="absfunc">
			<title>abs()</title>
			<para>
				Absolute value. Operator <literal>|...|</literal>
				is a shortcut for this function.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="divfunc">
			<title>div()</title>
			<para>
				Division. Operator <literal>/</literal> is a shortcut for
				this function. It takes two or more numeric operands.
				The way it works is: take the first operand and divide
				it by the second and subsequent operands in sequence.
			</para>
		</sect2>
		<sect2 id="factorialfunc">
			<title>factorial()</title>
			<para>
				Factorial function. It takes one numeric operand.
				The postfix operator <literal>!</literal> is the alias for
				this function.
			</para>
		</sect2>
		<sect2 id="fmodfunc">
			<title>fmod()</title>
			<para>
				The result to the value of <literal>x - ny</literal>
				(<literal>x</literal> and <literal>y</literal> being
				its two numeric operands), rounded according to the
				report rounding mode set via <literal>ocrpt_set_rounding_mode()</literal>,
				where <literal>n</literal> is the integer quotient of
				<literal>x</literal> divided by <literal>y</literal>,
				<literal>n</literal> is rounded toward zero.
				It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="modfunc">
			<title>mod()</title>
			<para>
				An alias of <literal>remainder()</literal>.
				The operator <literal>%</literal> is the shortcut
				of this function. It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="mulfunc">
			<title>mul()</title>
			<para>
				Multiplication. Operator <literal>*</literal> is a shortcut for
				this function. It takes two or more numeric operands.
			</para>
		</sect2>
		<sect2 id="remainderfunc">
			<title>remainder()</title>
			<para>
				The result to the value of <literal>x - ny</literal>
				(<literal>x</literal> and <literal>y</literal> being
				its two numeric operands), rounded according to the
				report rounding mode set via <literal>ocrpt_set_rounding_mode()</literal>,
				where <literal>n</literal> is the integer quotient of
				<literal>x</literal> divided by <literal>y</literal>,
				<literal>n</literal> is rounded toward to the nearest integer.
				It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="subfunc">
			<title>sub()</title>
			<para>
				Subtraction. Operator <literal>-</literal> is a shortcut for
				this function. It takes two or more numeric operands.
			</para>
		</sect2>
		<sect2 id="uminusfunc">
			<title>uminus()</title>
			<para>
				Unary minus. Changes the sign of its numeric operand
				from positive to negative, or vice versa. Operator unary
				<literal>-</literal> is the shortcut of this function.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="uplusfunc">
			<title>uplus()</title>
			<para>
				Unary plus. Leaves the sign of its numeric operand
				as is. Operator unary <literal>+</literal> is the shortcut
				of this function. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="bitwisefuncs">
		<title>Bitwise functions</title>
		<sect2 id="andfunc">
			<title>and()</title>
			<para>
				Bitwise AND. Operator <literal>&amp;</literal> is a shortcut for
				this function. It takes two or more numeric operands.
			</para>
		</sect2>
		<sect2 id="notfunc">
			<title>not()</title>
			<para>
				Bitwise NOT. Prefix operator <literal>~</literal> is
				the shortcut for this function. It returns the bit-by-bit
				negated value of its operand. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="orfunc">
			<title>or()</title>
			<para>
				Bitwise OR. Operator <literal>|</literal> is a shortcut for
				this function. It takes two or more numeric operands.
			</para>
		</sect2>
		<sect2 id="shlfunc">
			<title>shl()</title>
			<para>
				Bitwise shift left. Shifts the first operand left with the
				number of bits set indicated the second operand. The operand
				<literal>&lt;&lt;</literal> is the shortcut for this
				function. It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="shrfunc">
			<title>shr()</title>
			<para>
				Bitwise shift right. Shifts the first operand right with the
				number of bits indicated by the second operand. The operand
				<literal>&gt;&gt;</literal> is the shortcut for this
				function. It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="xorfunc">
			<title>xor()</title>
			<para>
				Bitwise exclusive OR. It takes two or more numeric operands.
			</para>
		</sect2>
	</sect1>
	<sect1 id="boolfuncs">
		<title>Boolean logic functions</title>
		<sect2 id="landfunc" xreflabel="Boolean AND">
			<title>land()</title>
			<para>
				Boolean logic AND. Operator <literal>&amp;&amp;</literal> is a
				shortcut for this function. It takes two or more numeric
				operands that are treated as boolean logic values. The
				function is executed until the result is fully determined,
				i.e. it stops at the first false value.
			</para>
		</sect2>
		<sect2 id="lnotfunc">
			<title>lnot()</title>
			<para>
				Boolean logic NOT. Prefix operator <literal>!</literal> is
				the shortcut for this function. It returns the negated
				boolean value of its operand. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="lorfunc" xreflabel="Boolean OR">
			<title>lor()</title>
			<para>
				Boolean logic OR. Operator <literal>||</literal> is a shortcut for
				this function. It takes two or more numeric operands that
				are treated as boolean logic values, with 0 being false and
				true for anything else. The function is executed until the result is
				determined fully, i.e. it stops at the first true value.
			</para>
		</sect2>
	</sect1>
	<sect1 id="cmpfuncs">
		<title>Comparison functions</title>
		<sect2 id="eqfunc">
			<title>eq()</title>
			<para>
				Equivalence. Operators <literal>=</literal> and
				<literal>==</literal> are a shortcuts for this function.
				It takes two operands of the same type: numeric, string
				or datetime. The result is numeric value 1 or 0, if the
				two operands are equal or non-equal, respectively.
			</para>
		</sect2>
		<sect2 id="gefunc">
			<title>ge()</title>
			<para>
				Greater-or-equal. It takes two operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&gt;=</literal> is the shortcut for
				this function.
			</para>
		</sect2>
		<sect2 id="gtfunc">
			<title>gt()</title>
			<para>
				Greater-than. It takes two operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&gt;</literal> is the shortcut for
				this function.
			</para>
		</sect2>
		<sect2 id="lefunc">
			<title>le()</title>
			<para>
				Less-or-equal. It takes two operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&lt;=</literal> is the shortcut for
				this function.
			</para>
		</sect2>
		<sect2 id="ltfunc">
			<title>lt()</title>
			<para>
				Less-than. It takes two operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>&lt;</literal> is the shortcut for this
				function.
			</para>
		</sect2>
		<sect2 id="nefunc">
			<title>ne()</title>
			<para>
				Not equal. It takes two operands of the same type,
				which can be either numeric, string or datetime operands.
				The operator <literal>!=</literal> and <literal>&lt;&gt;</literal>
				are shortcuts for it.
			</para>
		</sect2>
	</sect1>
	<sect1 id="roundingfuncs">
		<title>Rounding and related functions</title>
		<sect2 id="ceilfunc">
			<title>ceil()</title>
			<para>
				Rounds its operand to the next higher or equal integer.
				It takes one numeric operands.
			</para>
		</sect2>
		<sect2 id="floorfunc">
			<title>floor()</title>
			<para>
				Rounds its operand to the next lower or equal integer.
				It takes one numeric operands.
			</para>
		</sect2>
		<sect2 id="rintfunc">
			<title>rint()</title>
			<para>
				Rounds its operand using the rounding mode set via
				<literal>ocrpt_set_rounding_mode()</literal>.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="roundfunc">
			<title>round()</title>
			<para>
				Rounds its operand to the nearest representable integer,
				rounding halfway cases away from zero.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="truncfunc">
			<title>trunc()</title>
			<para>
				Rounds its operand to the next representable integer toward
				zero. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="explogfuncs">
		<title>Exponential, logarithmic and related functions</title>
		<sect2 id="expfunc">
			<title>exp()</title>
			<para>
				It takes one numeric operand and returns the exponential 
				of the operand.
			</para>
		</sect2>
		<sect2 id="exp10func">
			<title>exp10()</title>
			<para>
				It takes one numeric operand and returns 10 to the power
				of the operand.
			</para>
		</sect2>
		<sect2 id="exp2func">
			<title>exp2()</title>
			<para>
				It takes one numeric operand and returns 2 to the power
				of the operand.
			</para>
		</sect2>
		<sect2 id="lnfunc">
			<title>ln()</title>
			<para>
				Alias for <literal>log()</literal>.
			</para>
		</sect2>
		<sect2 id="logfunc">
			<title>log()</title>
			<para>
				Natural logarithm. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="log10func">
			<title>log10()</title>
			<para>
				Base-10 logarithm. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="log2func">
			<title>log2()</title>
			<para>
				Base-2 logarithm. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="powfunc">
			<title>pow()</title>
			<para>
				This function raises the first operand to the power of its
				second operand. It takes two numeric operands.
				Operator <literal>^</literal> is the shortcut for
				this function.
			</para>
		</sect2>
		<sect2 id="sqrfunc">
			<title>sqr()</title>
			<para>
				Square. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="sqrtfunc">
			<title>sqrt()</title>
			<para>
				Square root. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="trigfuncs">
		<title>Trigonometric functions</title>
		<sect2 id="acosfunc">
			<title>acos()</title>
			<para>
				Arc-cosine function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="asinfunc">
			<title>asin()</title>
			<para>
				Arc-sine function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="atanfunc">
			<title>atan()</title>
			<para>
				Arc-tangent function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="cosfunc">
			<title>cos()</title>
			<para>
				Cosine function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="cotfunc">
			<title>cot()</title>
			<para>
				Cotangent function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="cscfunc">
			<title>csc()</title>
			<para>
				Cosecant function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="secfunc">
			<title>sec()</title>
			<para>
				Secant. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="sinfunc">
			<title>sin()</title>
			<para>
				Sine. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="tanfunc">
			<title>tan()</title>
			<para>
				Tangent. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="stringfuncs">
		<title>String functions</title>
		<sect2 id="concatfunc">
			<title>concat()</title>
			<para>
				String concatenation. It takes two or more string operands.
			</para>
		</sect2>
		<sect2 id="leftfunc">
			<title>left()</title>
			<para>
				Returns the leftmost N characters of a string.
				It takes two operands, the first operand is the string,
				the second is the numeric that is handled as an integer
				and used to determine the returned string length.
			</para>
		</sect2>
		<sect2 id="lowerfunc">
			<title>lower()</title>
			<para>
				Lowercase conversion. It takes one string operand.
			</para>
		</sect2>
		<sect2 id="midfunc">
			<title>mid()</title>
			<para>
				Return characters from the middle of the string.
				It takes three operands, the first operand is the string,
				the second and third are numeric values that are handled
				as an integers. The second operand is the offset to start
				from and the third operand is the length of the result
				string in UTF-8 characters. The offset is 1-based just like
				in BASIC, with offset value 0 being identical to 1.
				Negative offsets count from the right end of the string,
				i.e. <literal>mid(s,-n,n)</literal> is equivalent to
				<literal>right(s,n)</literal>.
			</para>
		</sect2>
		<sect2 id="properfunc">
			<title>proper()</title>
			<para>
				This function takes one string operand. The function
				returns the string converted lowecase, except the first
				letter of the first word, which will be uppercase.
			</para>
		</sect2>
		<sect2 id="rightfunc">
			<title>right()</title>
			<para>
				Returns the rightmost N characters of a string.
				It takes two operands, the first operand is the string,
				the second is the numeric that is handled as an integer
				and used to determine the returned string length.
			</para>
		</sect2>
		<sect2 id="strlenfunc">
			<title>strlen()</title>
			<para>
				It takes one string operand. The function returns
				the number of (UTF-8) characters in the string.
			</para>
		</sect2>
		<sect2 id="upperfunc">
			<title>upper()</title>
			<para>
				It takes one string operand. This function converts
				the string to uppercase.
			</para>
		</sect2>
	</sect1>
	<sect1 id="datetimefuncs">
		<title>Datetime functions</title>
		<sect2 id="chgdateoffunc">
			<title>chgdateof()</title>
			<para>
				It takes two datetime operands.
				Changes the date part of the first operand to
				the date part of the second operand.
			</para>
		</sect2>
		<sect2 id="chgtimeoffunc">
			<title>chgtimeof()</title>
			<para>
				It takes two datetime operands.
				Changes the time part of the first operand to
				the date part of the second operand.
			</para>
		</sect2>
		<sect2 id="datefunc">
			<title>date()</title>
			<para>
				Returns the current date. It takes zero operands.
			</para>
		</sect2>
		<sect2 id="dateoffunc">
			<title>dateof()</title>
			<para>
				It takes one datetime operand.
				It returns date part of the datetime operand.
			</para>
		</sect2>
		<sect2 id="dayfunc">
			<title>day()</title>
			<para>
				It takes one datetime operand.
				It returns the day of month value as a number.
			</para>
		</sect2>
		<sect2 id="dimfunc">
			<title>dim()</title>
			<para>
				It takes one datetime operand. Given the year and month
				values of the datetime, this function returns the
				number of days in the month. E.g. for February in a leap
				year, it returns 29.
			</para>
		</sect2>
		<sect2 id="dtosfunc">
			<title>dtos()</title>
			<para>
				Datetime to string. It takes one datetime operand.
				The date part of the datetime is formatted according
				to the date format of the currently set locale.
			</para>
		</sect2>
		<sect2 id="dtosffunc">
			<title>dtosf()</title>
			<para>
				Datetime to formatted string. It takes two operands:
				one datetime and one string. It takes the second (string)
				operand as a format string and formats the datetime
				value according to the format string.
				If the second operand is NULL or empty string,
				this function behaves like <literal>dtos()</literal>.
				Otherwise it behaves like <literal>format()</literal>
				with the operands reversed.
			</para>
		</sect2>
		<sect2 id="gettimeinsecsfunc">
			<title>gettimeinsecs()</title>
			<para>
				It takes one datetime operand. It converts the time part
				of the datetime to seconds elapsed from 00:00:00.
			</para>
		</sect2>
		<sect2 id="intervalfunc">
			<title>interval()</title>
			<para>
				Convert the parameter(s) to an interval subtype of
				the datetime type. It takes either one string operand
				or six numeric operands. In the first case, the string
				is parsed for interval values, like <literal>1 year</literal>
				or <literal>2 months</literal>, etc., and sets the specific
				datetime part values. In the second case, the six numeric
				operands are the values for the datetime parts, in the order
				of years, months, days, hours, minutes and seconds.
			</para>
		</sect2>
		<sect2 id="monthfunc">
			<title>month()</title>
			<para>
				Returns the month value of a datetime. It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="nowfunc">
			<title>now()</title>
			<para>
				Returns the current timestamp in a datetime value.
				It is run only once during running the report and
				the same value is used everywhere where this function
				is used. Practically, it is the time of generating
				the report. It takes zero operands.
			</para>
		</sect2>
		<sect2 id="settimeinsecsfunc">
			<title>settimeinsecs()</title>
			<para>
				It takes two operands, the first operand is a datetime,
				the second is numeric. This function returns a datetime
				where the first operand's time part is changed to
				<literal>N</literal> seconds
				after 00:00:00, with <literal>N</literal> being the
				second operand.
			</para>
		</sect2>
		<sect2 id="stdwiyfunc">
			<title>stdwiy()</title>
			<para>
				It takes one datetime operand. This function returns
				the  ISO-8601 week number of the operand as a decimal
				number, range 01 to 53, where week 1 is the first week
				that has at least 4 days in the new year.
			</para>
		</sect2>
		<sect2 id="stodfunc">
			<title>stod()</title>
			<para>
				Alias for <literal>stodt()</literal>.
			</para>
		</sect2>
		<sect2 id="stodtfunc">
			<title>stodt()</title>
			<para>
				It takes one string operand. This function parses
				the string and tries to convert it to a datetime value.
				It is smart enough to recognize locale specific formats
				and standard ISO-8601 formats. Handles whole datetime,
				date-only and time-only values in the string.
			</para>
		</sect2>
		<sect2 id="stodtsqlfunc">
			<title>stodtsql()</title>
			<para>
				Alias for <literal>stodt()</literal>.
			</para>
		</sect2>
		<sect2 id="timeoffunc">
			<title>timeof()</title>
			<para>
				It takes one datetime operand.
				It returns time part of the datetime operand.
			</para>
		</sect2>
		<sect2 id="tstodfunc">
			<title>tstod()</title>
			<para>
				Alias for <literal>stodt()</literal>.
			</para>
		</sect2>
		<sect2 id="wiyfunc">
			<title>wiy()</title>
			<para>
				It takes one datetime operand. This function returns
				the week number of the operand as a decimal number,
				range 00 to 53, starting with the first Sunday as
				the first day of week 01.
			</para>
		</sect2>
		<sect2 id="wiy1func">
			<title>wiy1()</title>
			<para>
				It takes one datetime operand. This function returns
				the week number of the operand as a decimal number,
				range 00 to 53, starting with the first Monday as
				the first day of week 01.
			</para>
		</sect2>
		<sect2 id="wiyofunc">
			<title>wiyo()</title>
			<para>
				It takes two operands, one datetime and one numeric.
				This function returns the week number of the first
				operand as a decimal number, range 00 to 53, starting
				with the specified day number as the first day.
				(0 = Sunday, 1 = Monday, 2 = Tuesday, ...)
			</para>
		</sect2>
		<sect2 id="yearfunc">
			<title>year()</title>
			<para>
				It takes one datetime operand. This function returns
				the year value of the operand as a numeric value.
			</para>
		</sect2>
	</sect1>
	<sect1 id="multitypefuncs">
		<title>Type agnostic functions</title>
		<sect2 id="addfunc">
			<title>add()</title>
			<para>
				Addition. Operator <literal>+</literal> is a shortcut for
				this function. It takes two or more operands of the same
				type, with all of them being either numeric or string.
				For string operands, it is equivalent with concatenation,
				i.e. <literal>concat()</literal>.
			</para>
		</sect2>
		<sect2 id="decfunc">
			<title>dec()</title>
			<para>
				Decrement by one. It takes one numeric operand.
				The operator <literal>--</literal> is the shortcut for it,
				either as prefix or postfix operator.
			</para>
		</sect2>
		<sect2 id="incfunc">
			<title>inc()</title>
			<para>
				Increment by one. It takes one numeric operand.
				The operator <literal>++</literal> is the shortcut for it,
				either as prefix or postfix operator.
			</para>
		</sect2>
	</sect1>
	<sect1 id="formatfuncs">
		<title>Formatting and conversion functions</title>
		<sect2 id="formatfunc" xreflabel="format function">
			<title>format()</title>
			<para>
				It takes two operands, the first operand is of any type,
				the second operand is a string. This function formats
				the first value according to the second operand as a
				format string. If the first operand doesn't match the
				expected type in the format string, an error is returned.
			</para>
			<para>
				It an RLIB compatibility function and is a special case
				of the <literal>printf()</literal> function.
				See also <xref linkend="formatting"/>
			</para>
		</sect2>
		<sect2 id="printffunc" xreflabel="printf function">
			<title>printf()</title>
			<para>
				This function takes one or more operands. The first
				operand is a string and used as the format string.
				Subsequent operands have to be of the expected type
				according to the format string, otherwise an error
				is returned. If everything is correct, it returns
				the formatted data as a string.
			</para>
		</sect2>
		<sect2 id="strfunc">
			<title>str()</title>
			<para>
				It takes three numeric operands. The first operand
				is converted to a string with the length and number
				of decimal digits specified by the second and the
				third operands, respectively.
			</para>
		</sect2>
		<sect2 id="valfunc">
			<title>val()</title>
			<para>
				Numeric value. If a string operand is given, it returns
				the converted numeric value. The value of a numeric operand
				is passed through as is.
				It takes one numeric or string operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="miscfuncs">
		<title>Miscellaneous functions</title>
		<sect2 id="brrownumfunc" xreflabel="Break row number function">
			<title>brrownum()</title>
			<para>
				Current row number of a break since it was last triggered.
				It takes one string operand which is the name of the break.
				The row number restarts from 1 at every break boundary.
			</para>
		</sect2>
		<sect2 id="errorfunc">
			<title>error()</title>
			<para>
				Returns an artificially generated error. It takes one
				string operand. The result will use the string operand's
				value as error message. Good for unit testing OpenCReports
				as done in the <literal>ocrpt_expr_test</literal> example.
			</para>
		</sect2>
		<sect2 id="evalfunc">
			<title>eval()</title>
			<para>
				It takes one string operand, which must be an expression
				string. The expression is parsed. If it's correct, it is
				inserted into the parent expression in place of the
				function call. If there is a syntax error, the error is
				re-thrown for the main expression.
			</para>
			<para>
				This is a pseudo-function. The grammar detects its usage
				and converts the embedded expression string into a regular
				subexpression, like if it was inside parenthesis in the
				parent expression contents. This allows the subexpression
				to be optimized in the parent expression context.
			</para>
			<para>
				Fox example, the expression <literal>3 * eval('1 + 2')</literal>
				is optimized into the numeric constant <literal>9</literal>.
			</para>
			<para>
				Note, that the grammar transformation only takes place if
				there is no user defined function with the same name.
				In this case, the user defined function is used.
			</para>
		</sect2>
		<sect2 id="fxpvalfunc">
			<title>fxpval()</title>
			<para>
				Compatibility function for RLIB. It takes two operands.
				The type of the first operand may be string containing
				a numeric value or numeric. If it's a string, then it will
				be converted to numeric first. The type of the second operand
				is numeric. The function divides the value of the first
				operand with 10 to the power of the value of the second
				operand. One use case is that if the data contains prices
				in cents, then <literal>fxpval(data, 2)</literal> puts the
				decimal separator to the correct place.
			</para>
		</sect2>
		<sect2 id="iiffunc" xreflabel="iif() function">
			<title>iif()</title>
			<para>
				It's equivalent to the <xref linkend="ternaryop"/> in
				function form. It takes three operands of which the first one
				is numeric, the second and third operands can be of any type.
				If the first operand is non-zero (i.e.: "true") then
				the result will be the value of the second operand,
				else it will be the third operand.
				The trinary operator <literal>exp1 ? exp2 : exp3</literal>
				is the shortcut for this function.
			</para>
		</sect2>
		<sect2 id="isnullfunc">
			<title>isnull()</title>
			<para>
				Returns numeric 1 if the operand is NULL, 0 otherwise.
				It takes one operand of any type.
			</para>
		</sect2>
		<sect2 id="nullfunc">
			<title>null()</title>
			<para>
				Generate NULL value using the type of its operand.
				It takes one operand of any type.
			</para>
		</sect2>
		<sect2 id="nulldtfunc">
			<title>nulldt()</title>
			<para>
				Generate NULL of the datetime type. It takes no operands.
			</para>
		</sect2>
		<sect2 id="nullnfunc">
			<title>nulln()</title>
			<para>
				Generate NULL of the numeric type. It takes no operands.
			</para>
		</sect2>
		<sect2 id="nullsfunc">
			<title>nulls()</title>
			<para>
				Generate NULL of the string type. It takes no operands.
			</para>
		</sect2>
		<sect2 id="prevvalfunc">
			<title>prevval()</title>
			<para>
				This function accepts one subexpression and
				returns the subexpression's previous value, i.e.
				the value generated for the previous query row.
				If there is no previous value row, the result
				of this function is an error.
			</para>
			<para>
				This function allows showing carried over values
				e.g. in page headers.
			</para>
		</sect2>
		<sect2 id="randomfunc">
			<title>random()</title>
			<para>
				Generate a pseudo-random numeric value between 0 and 1.
				It takes no operands.
			</para>
		</sect2>
		<sect2 id="rownumfunc" xreflabel="Primary query row number function">
			<title>rownum()</title>
			<para>
				It takes either zero operands or one string operand.
				If zero operands are passed, it returns the current
				row number of the dataset. If one string operand is
				passed, then it returns the current row number in
				the named query of the dataset. See the follower
				queries.
			</para>
		</sect2>
		<sect2 id="translatefunc" xreflabel="translate()">
			<title>translate()</title>
			<para>
				Translates its operand according to the translation
				and locale settings using <literal>dgettext()</literal>
				from Gettext. It takes one string operand.
			</para>
		</sect2>
		<sect2 id="translate2func" xreflabel="translate2()">
			<title>translate2()</title>
			<para>
				Translates its operands according to the translation
				and locale settings using <literal>dngettext()</literal>
				from Gettext. It takes three operands.
				The first two operands are strings, for the singular
				and plural strings. The third operand is the number
				that determines which translation form is used.
			</para>
		</sect2>
	</sect1>
</chapter>

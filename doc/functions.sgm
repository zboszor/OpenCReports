<chapter id="functions" xreflabel="Functions">
	<title>Functions</title>
	<sect1 id="funcsintro">
		<title>Introduction</title>
		<para>
			This section lists the functions supported by OpenCReports
			in topics, and alphabetically in their topic.
		</para>
		<para>
			Most functions below operate in this way, unless noted otherwise:
			<itemizedlist>
				<listitem>
					<para>
						numeric and bitwise functions with more than two operands
						take their first operand and perform the same operation
						using the second, third, etc. operands repeatedly.
					</para>
				</listitem>
				<listitem>
					<para>
						if any of the operands is an error (resulting from
						runtime processing of a subexpression), then the
						result will use the exact error of the first operand
						that is an error.
					</para>
				</listitem>
				<listitem>
					<para>
						if any of the operands is NULL (e.g. the data source
						is SQL and the field value is SQL NULL) then the
						result will also be NULL.
					</para>
				</listitem>
				<listitem>
					<para>
						Boolean logic functions treat their operands with
						0 being false and anything else (even fractions less
						than 0.5) as true.
					</para>
				</listitem>
				<listitem>
					<para>
						Bitwise functions treat their operands as 64-bit
						numeric values, with rounding if they are fractions.
					</para>
				</listitem>
				<listitem>
					<para>
						String arithmetics operate on UTF-8 encoded strings
						and count in number of UTF-8 characters instead of
						byte length.
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</sect1>
	<sect1 id="arithfuncs">
		<title>Arithmetic functions</title>
		<sect2 id="absfunc">
			<title>abs()</title>
			<para>
				Absolute value. It takes one numeric operand.
				Operator <literal>|...|</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="divfunc">
			<title>div()</title>
			<para>
				Division. It takes two or more numeric operands.
				The way it works is: take the first operand and divide
				it by the second and subsequent operands in sequence.
				Operator <literal>/</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="factorialfunc">
			<title>factorial()</title>
			<para>
				Factorial function. It takes one numeric operand.
				The postfix operator <literal>!</literal> is the alias for
				this function.
			</para>
		</sect2>
		<sect2 id="fmodfunc">
			<title>fmod()</title>
			<para>
				The result to the value of <literal>x - ny</literal>
				(<literal>x</literal> and <literal>y</literal> being
				its two numeric operands), rounded according to the
				report's rounding mode, where <literal>n</literal> is
				the integer quotient of <literal>x</literal> divided by
				<literal>y</literal>, <literal>n</literal> is rounded
				toward zero. It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="modfunc">
			<title>mod()</title>
			<para>
				An alias of <literal>remainder()</literal>.
				It takes two numeric operands.
				Operator <literal>%</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="mulfunc">
			<title>mul()</title>
			<para>
				Multiplication. It takes two or more numeric operands.
				Operator <literal>*</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="remainderfunc">
			<title>remainder()</title>
			<para>
				The result to the value of <literal>x - ny</literal>
				(<literal>x</literal> and <literal>y</literal> being
				its two numeric operands), rounded according to the
				report's rounding mode, where <literal>n</literal> is the
				integer quotient of <literal>x</literal> divided by
				<literal>y</literal>, <literal>n</literal> is rounded
				toward to the nearest integer. It takes two numeric operands.
			</para>
		</sect2>
		<sect2 id="uminusfunc">
			<title>uminus()</title>
			<para>
				Unary minus. Changes the sign of its numeric operand
				from positive to negative, or vice versa.
				It takes one numeric operand.
				Operator unary <literal>-</literal> is a shortcut of this function.
			</para>
		</sect2>
		<sect2 id="uplusfunc">
			<title>uplus()</title>
			<para>
				Unary plus. Leaves the sign of its numeric operand
				as is. It takes one numeric operand.
				Operator unary <literal>+</literal> is a shortcut of this function.
			</para>
		</sect2>
	</sect1>
	<sect1 id="bitwisefuncs">
		<title>Bitwise functions</title>
		<sect2 id="andfunc">
			<title>and()</title>
			<para>
				Bitwise AND. It takes two or more numeric operands.
				Operator <literal>&amp;</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="notfunc">
			<title>not()</title>
			<para>
				Bitwise NOT. It takes one numeric operand.
				It returns the bit-by-bit negated value of its operand.
				Prefix operator <literal>~</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="orfunc">
			<title>or()</title>
			<para>
				Bitwise OR. It takes two or more numeric operands.
				Operator <literal>|</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="shlfunc">
			<title>shl()</title>
			<para>
				Bitwise shift left. It takes two numeric operands.
				Shifts the first operand left with the number of bits
				specified by the second operand.
				The operand <literal>&lt;&lt;</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="shrfunc">
			<title>shr()</title>
			<para>
				Bitwise shift right. It takes two numeric operands.
				Shifts the first operand right with the number of bits
				specified by the second operand.
				The operand <literal>&gt;&gt;</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="xorfunc">
			<title>xor()</title>
			<para>
				Bitwise exclusive OR. It takes two or more numeric operands.
			</para>
		</sect2>
	</sect1>
	<sect1 id="boolfuncs">
		<title>Boolean logic functions</title>
		<sect2 id="landfunc" xreflabel="Boolean AND">
			<title>land()</title>
			<para>
				Boolean logic AND. It takes two or more numeric operands
				that are treated as boolean logic values.
				The function is executed until the result is fully determined,
				i.e. it stops at the first false value.
				Operator <literal>&amp;&amp;</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="lnotfunc">
			<title>lnot()</title>
			<para>
				Boolean logic NOT.  It takes one numeric operand.
				It returns the negated boolean value of its operand.
				Prefix operator <literal>!</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="lorfunc" xreflabel="Boolean OR">
			<title>lor()</title>
			<para>
				Boolean logic OR. It takes two or more numeric operands
				that are treated as boolean logic values.
				The function is executed until the result is fully determined,
				i.e. it stops at the first true value.
				Operator <literal>||</literal> is a shortcut for this function.
			</para>
		</sect2>
	</sect1>
	<sect1 id="cmpfuncs">
		<title>Comparison functions</title>
		<sect2 id="eqfunc">
			<title>eq()</title>
			<para>
				Equal. It takes two operands of the same type: numeric, string
				or datetime. The result is numeric value 1 or 0, if the
				two operands are equal or non-equal, respectively.
				The operators <literal>=</literal> and <literal>==</literal> are shortcuts for this function.
			</para>
		</sect2>
		<sect2 id="gefunc">
			<title>ge()</title>
			<para>
				Greater-or-equal. It takes two operands of the same type,
				which can be either numeric, string or datetime.
				The operator <literal>&gt;=</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="gtfunc">
			<title>gt()</title>
			<para>
				Greater-than. It takes two operands of the same type,
				which can be either numeric, string or datetime.
				The operator <literal>&gt;</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="lefunc">
			<title>le()</title>
			<para>
				Less-or-equal. It takes two operands of the same type,
				which can be either numeric, string or datetime.
				The operator <literal>&lt;=</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="ltfunc">
			<title>lt()</title>
			<para>
				Less-than. It takes two operands of the same type,
				which can be either numeric, string or datetime.
				The operator <literal>&lt;</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="nefunc">
			<title>ne()</title>
			<para>
				Not equal. It takes two operands of the same type,
				which can be either numeric, string or datetime.
				The operator <literal>!=</literal> and <literal>&lt;&gt;</literal> are shortcuts for this function.
			</para>
		</sect2>
	</sect1>
	<sect1 id="roundingfuncs">
		<title>Rounding and related functions</title>
		<sect2 id="ceilfunc">
			<title>ceil()</title>
			<para>
				Rounds its operand to the next higher or equal integer.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="floorfunc">
			<title>floor()</title>
			<para>
				Rounds its operand to the next lower or equal integer.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="rintfunc">
			<title>rint()</title>
			<para>
				Rounds its operand using the report's rounding mode.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="roundfunc">
			<title>round()</title>
			<para>
				Rounds its operand to the nearest representable integer,
				rounding halfway cases away from zero.
				It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="truncfunc">
			<title>trunc()</title>
			<para>
				Rounds its operand to the next representable integer toward
				zero. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="explogfuncs">
		<title>Exponential, logarithmic and related functions</title>
		<sect2 id="expfunc">
			<title>exp()</title>
			<para>
				Natural exponential. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="exp10func">
			<title>exp10()</title>
			<para>
				Base-10 exponential. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="exp2func">
			<title>exp2()</title>
			<para>
				Base-2 exponential. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="lnfunc">
			<title>ln()</title>
			<para>
				Alias for <literal>log()</literal>.
			</para>
		</sect2>
		<sect2 id="logfunc">
			<title>log()</title>
			<para>
				Natural logarithm. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="log10func">
			<title>log10()</title>
			<para>
				Base-10 logarithm. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="log2func">
			<title>log2()</title>
			<para>
				Base-2 logarithm. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="powfunc">
			<title>pow()</title>
			<para>
				This function raises the first operand to the power of its
				second operand. It takes two numeric operands.
				Operator <literal>^</literal> is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="sqrfunc">
			<title>sqr()</title>
			<para>
				Square. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="sqrtfunc">
			<title>sqrt()</title>
			<para>
				Square root. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="trigfuncs">
		<title>Trigonometric functions</title>
		<sect2 id="acosfunc">
			<title>acos()</title>
			<para>
				Arc-cosine function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="asinfunc">
			<title>asin()</title>
			<para>
				Arc-sine function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="atanfunc">
			<title>atan()</title>
			<para>
				Arc-tangent function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="cosfunc">
			<title>cos()</title>
			<para>
				Cosine function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="cotfunc">
			<title>cot()</title>
			<para>
				Cotangent function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="cscfunc">
			<title>csc()</title>
			<para>
				Cosecant function. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="secfunc">
			<title>sec()</title>
			<para>
				Secant. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="sinfunc">
			<title>sin()</title>
			<para>
				Sine. It takes one numeric operand.
			</para>
		</sect2>
		<sect2 id="tanfunc">
			<title>tan()</title>
			<para>
				Tangent. It takes one numeric operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="stringfuncs">
		<title>String functions</title>
		<sect2 id="concatfunc" xreflabel="concat() function">
			<title>concat()</title>
			<para>
				Concatenate strings.
				It takes two or more string operands.
			</para>
		</sect2>
		<sect2 id="leftfunc">
			<title>left()</title>
			<para>
				Return the leftmost N characters of a string.
				It takes two operands, the first operand is a string,
				the second is the string length, a numeric integer.
			</para>
		</sect2>
		<sect2 id="lowerfunc">
			<title>lower()</title>
			<para>
				Convert to lowercase. It takes one string operand.
			</para>
		</sect2>
		<sect2 id="midfunc">
			<title>mid()</title>
			<para>
				Return characters from the middle of the string.
				It takes three operands, the first operand is a string,
				the second and third are numeric integer values,
				start offset and length, respectively.
				The offset is 1-based just like in BASIC, with the
				offset value 0 being identical to 1.
				Negative offsets count from the right end of the string,
				i.e. <literal>mid(s,-n,n)</literal> is equivalent to
				<literal>right(s,n)</literal>.
			</para>
		</sect2>
		<sect2 id="properfunc">
			<title>proper()</title>
			<para>
				Return the string converted lowecase, except the first
				letter of the first word, which will be uppercase.
				This function takes one string operand.
			</para>
		</sect2>
		<sect2 id="rightfunc">
			<title>right()</title>
			<para>
				Return the rightmost N characters of a string.
				It takes two operands, the first operand is a string,
				the second is the string length, a numeric integer.
			</para>
		</sect2>
		<sect2 id="strlenfunc">
			<title>strlen()</title>
			<para>
				Return the number of characters in the string.
				It takes one string operand.
			</para>
		</sect2>
		<sect2 id="upperfunc">
			<title>upper()</title>
			<para>
				Convert to uppercase.
				It takes one string operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="datetimefuncs">
		<title>Datetime functions</title>
		<sect2 id="chgdateoffunc">
			<title>chgdateof()</title>
			<para>
				Change the date part of the first operand to
				the date part of the second operand.
				It takes two datetime operands.
			</para>
		</sect2>
		<sect2 id="chgtimeoffunc">
			<title>chgtimeof()</title>
			<para>
				Change the time part of the first operand to
				the date part of the second operand.
				It takes two datetime operands.
			</para>
		</sect2>
		<sect2 id="datefunc">
			<title>date()</title>
			<para>
				Return the current date. It takes zero operands.
			</para>
		</sect2>
		<sect2 id="dateoffunc">
			<title>dateof()</title>
			<para>
				Return the date part.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="dayfunc">
			<title>day()</title>
			<para>
				Return the day of month value as a number.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="dimfunc">
			<title>dim()</title>
			<para>
				Returns the number of days in the month according to
				the year and month values of the operand.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="dtosfunc" xreflabel="dtos() function">
			<title>dtos()</title>
			<para>
				Convert a datetime to string.
				The date part of the datetime is formatted according
				to the date format of the currently set locale.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="dtosffunc">
			<title>dtosf()</title>
			<para>
				Convert a datetime to formatted string.
				It takes two operands, one datetime and one string.
				It takes the second (string) operand as a format string and
				formats the datetime value according to the format string.
				If the second operand is NULL or empty string,
				this function behaves like the <xref linkend="dtosfunc"/>.
				Otherwise it behaves like the <xref linkend="formatfunc"/>
				with the operands reversed.
			</para>
		</sect2>
		<sect2 id="gettimeinsecsfunc">
			<title>gettimeinsecs()</title>
			<para>
				Convert the time part of the datetime to seconds elapsed
				from 00:00:00. It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="intervalfunc">
			<title>interval()</title>
			<para>
				Convert the parameter(s) to an interval subtype of
				the datetime type. It takes either one string operand,
				or six numeric operands.
			</para>
			<para>
				In the first case, the string is parsed for interval values,
				like <literal>1 year</literal> or <literal>2 months</literal>,
				etc., and sets the specific datetime part values.
			</para>
			<para>
				In the second case, the six numeric operands are the values
				for the datetime parts, in the order of years, months, days,
				hours, minutes and seconds.
			</para>
		</sect2>
		<sect2 id="monthfunc">
			<title>month()</title>
			<para>
				Return the month value of a datetime. It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="nowfunc">
			<title>now()</title>
			<para>
				Return the current timestamp in a datetime value.
				It takes zero operands.
			</para>
			<para>
				The "current timestamp" is determined at the beginning
				of generating the report. This function returns the same
				stable value for the lifetime of the report.
			</para>
		</sect2>
		<sect2 id="settimeinsecsfunc">
			<title>settimeinsecs()</title>
			<para>
				Return a datetime with the time part of a datetime changed
				to the specified seconds after 00:00:00.
				It takes two operands, the first operand is a datetime,
				the second is a numeric integer.
			</para>
		</sect2>
		<sect2 id="stdwiyfunc">
			<title>stdwiy()</title>
			<para>
				Return the  ISO-8601 week number of a datetime as a decimal
				number, range 01 to 53, where week 1 is the first week
				that has at least 4 days in the new year.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="stodfunc">
			<title>stod()</title>
			<para>
				Alias for <literal>stodt()</literal>.
			</para>
		</sect2>
		<sect2 id="stodtfunc">
			<title>stodt()</title>
			<para>
				Convert a string to a datetime value.
				It takes one string operand.
			</para>
			<para>
				This function is smart enough to recognize locale
				specific and standard ISO-8601 formats. It handles
				whole datetime, date-only and time-only values in
				the string.
			</para>
		</sect2>
		<sect2 id="stodtsqlfunc">
			<title>stodtsql()</title>
			<para>
				Alias for <literal>stodt()</literal>.
			</para>
		</sect2>
		<sect2 id="timeoffunc">
			<title>timeof()</title>
			<para>
				Return time part of the datetime operand.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="tstodfunc">
			<title>tstod()</title>
			<para>
				Alias for <literal>stodt()</literal>.
			</para>
		</sect2>
		<sect2 id="wiyfunc">
			<title>wiy()</title>
			<para>
				Return the week number of the operand as a decimal number,
				range 00 to 53, starting with the first Sunday as
				the first day of week 01.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="wiy1func">
			<title>wiy1()</title>
			<para>
				Return the week number of the operand as a decimal number,
				range 00 to 53, starting with the first Monday as
				the first day of week 01.
				It takes one datetime operand.
			</para>
		</sect2>
		<sect2 id="wiyofunc">
			<title>wiyo()</title>
			<para>
				This function returns the week number of the first
				operand as a decimal number, range 00 to 53, starting
				with the specified day number as the first day.
				(0 = Sunday, 1 = Monday, 2 = Tuesday, ...)
				It takes two operands, the first is a datetime, the
				second is a numeric integer.
			</para>
		</sect2>
		<sect2 id="yearfunc">
			<title>year()</title>
			<para>
				Return the year value of the operand as a numeric value.
				It takes one datetime operand.
			</para>
		</sect2>
	</sect1>
	<sect1 id="multitypefuncs">
		<title>Type agnostic functions</title>
		<sect2 id="addfunc">
			<title>add()</title>
			<para>
				Add the operands. It takes two or more operands of different
				types and returns the sensible result for cases that make
				sense. It throws an error for invalid cases.
				Operator <literal>+</literal> is a shortcut for this function.
			</para>
			<para>
				For <literal>numeric</literal> arguments, it's the arithmetic
				addition.
			</para>
			<para>
				For <literal>string</literal> arguments, it is equivalent
				to concatenation, i.e. the <xref linkend="concatfunc"/>.
			</para>
			<para>
				Certain combinations of <literal>datetime</literal>
				and <literal>numeric</literal> arguments make sense.
				<itemizedlist>
					<listitem>
						<para>
							normal <literal>datetime</literal> and
							<literal>numeric</literal> added together
							results in the <literal>datetime</literal>
							value increased by the specified number of
							seconds or days, depending on whether the
							<literal>datetime</literal> value
							<emphasis>has valid time part or not</emphasis>,
							respectively
						</para>
					</listitem>
					<listitem>
						<para>
							the interval subtype of <literal>datetime</literal>
							and <literal>numeric</literal> added together
							results in the <literal>datetime</literal>
							value increased by the specified number of
							seconds
						</para>
					</listitem>
					<listitem>
						<para>
							normal <literal>datetime</literal> and
							the interval subtype of the <literal>datetime</literal>
							added together results in the
							normal <literal>datetime</literal> value increased
							by the specified time interval
						</para>
					</listitem>
					<listitem>
						<para>
							two intervals added together results in
							the first interval increased by the 
							second interval
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="decfunc">
			<title>dec()</title>
			<para>
				Decrement by one. It takes one numeric or datetime operand.
				The operator <literal>--</literal> is the shortcut for it,
				either as prefix or postfix operator.
			</para>
		</sect2>
		<sect2 id="incfunc">
			<title>inc()</title>
			<para>
				Increment by one. It takes one numeric or datetime operand.
				The operator <literal>++</literal> is the shortcut for it,
				either as prefix or postfix operator.
			</para>
		</sect2>
		<sect2 id="subfunc">
			<title>sub()</title>
			<para>
				Subtract the second, etc. operands from the first.
				It takes two or more operands of different types and
				returns the sensible result for cases that make
				sense. It throws an error for invalid cases.
				Operator <literal>-</literal> is a shortcut for this function.
			</para>
			<para>
				For <literal>numeric</literal> arguments, it's simply
				the arithmetic subtraction.
			</para>
			<para>
				For <literal>string</literal> arguments, it throws an error.
			</para>
			<para>
				Certain combinations of <literal>datetime</literal>
				and <literal>numeric</literal> arguments make sense.
				<itemizedlist>
					<listitem>
						<para>
							a <literal>numeric</literal> value subtracted
							from a normal <literal>datetime</literal>
							results in the <literal>datetime</literal>
							value decreased by the specified number of
							seconds or days, depending on whether the
							<literal>datetime</literal> value
							<emphasis>has valid time part or not</emphasis>,
							respectively
						</para>
					</listitem>
					<listitem>
						<para>
							a <literal>numeric</literal> value subtracted
							from the interval subtype of <literal>datetime</literal>
							results in the <literal>datetime</literal>
							value decreased by the specified number of
							seconds
						</para>
					</listitem>
					<listitem>
						<para>
							an interval value subtracted from a normal
							<literal>datetime</literal> value
							results in the normal <literal>datetime</literal>
							value decreased by the specified time interval
						</para>
					</listitem>
					<listitem>
						<para>
							two intervals subtracted results in
							the first interval decreased by the
							second interval
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
	<sect1 id="formatfuncs">
		<title>Formatting and conversion functions</title>
		<sect2 id="formatfunc" xreflabel="format() function">
			<title>format()</title>
			<para>
				It takes two operands, the first operand is of any type,
				the second operand is a string. This function formats
				the first value according to the second operand as a
				format string. If the first operand doesn't match the
				expected type in the format string, an error is returned.
			</para>
			<para>
				It an RLIB compatibility function and is a special case
				of the <literal>printf()</literal> function.
				See <xref linkend="formatting"/>.
			</para>
		</sect2>
		<sect2 id="printffunc" xreflabel="printf function">
			<title>printf()</title>
			<para>
				This function takes one or more operands. The first
				operand is a string and used as the format string.
				Subsequent operands have to be of the expected type
				according to the format string, otherwise an error
				is returned. If everything is correct, it returns
				the formatted data as a string.
				See <xref linkend="formatting"/>.
			</para>
		</sect2>
		<sect2 id="strfunc">
			<title>str()</title>
			<para>
				It takes three numeric operands. The first operand
				is converted to a string with the length and number
				of decimal digits specified by the second and the
				third operands, respectively.
			</para>
		</sect2>
		<sect2 id="valfunc">
			<title>val()</title>
			<para>
				Numeric value. It takes one numeric or string operand.
			</para>
			<para>
				If a string value is passed, and it can be converted
				to a numeric value successfully, then it returns
				the converted numeric value.
			</para>
			<para>
				The value of a numeric operand is passed through as is.
			</para>
		</sect2>
	</sect1>
	<sect1 id="miscfuncs">
		<title>Miscellaneous functions</title>
		<sect2 id="brrownumfunc" xreflabel="Break row number function">
			<title>brrownum()</title>
			<para>
				Current row number of a break since its last break boundary.
				The row number restarts from 1 at every break boundary.
				It takes one string operand, the name of the break.
			</para>
		</sect2>
		<sect2 id="errorfunc">
			<title>error()</title>
			<para>
				Return an artificially generated error. It takes one
				string operand, the error message. Used by unit tests
				but it may be useful in some other cases.
			</para>
		</sect2>
		<sect2 id="evalfunc">
			<title>eval()</title>
			<para>
				Parse an expression string. If it's correct, it is
				inserted into the parent expression in place of the
				function call. If there is a syntax error, the error is
				re-thrown for the main expression.
				It takes one string operand.
			</para>
			<para>
				This is a pseudo-function. The grammar detects its use
				and converts the embedded expression string into a regular
				subexpression, like if it was inside parenthesis in the
				parent expression contents. This allows the subexpression
				to be optimized in the parent expression context.
			</para>
			<para>
				Fox example, the expression <literal>3 * eval('1 + 2')</literal>
				is optimized into the numeric constant <literal>9</literal>.
			</para>
			<para>
				Note, that the grammar transformation only takes place if
				there is no user defined function with the same name.
				In this case, the user defined function is used.
			</para>
		</sect2>
		<sect2 id="fxpvalfunc">
			<title>fxpval()</title>
			<para>
				Move the decimal separator to the left by the specified
				number of digits. It takes two operands. The first operand
				may either be a string containing a numeric value, or a numeric.
				If it's a string, then it will be converted to numeric first.
				The second operand is numeric.
			</para>
			<para>
				It is an RLIB compatibility function.
				The function divides the numeric value of the first operand
				with 10 to the power of the value of the second operand.
				One use case is that if the value of the first operand contains
				prices in cents, then <literal>fxpval(data, 2)</literal> puts the
				decimal separator to the correct place.
			</para>
		</sect2>
		<sect2 id="iiffunc" xreflabel="iif() function">
			<title>iif()</title>
			<para>
				Ternary function. It takes three operands of which the first
				one is numeric, the second and third operands can be of any
				type. If the first operand is non-zero (i.e.: "true") then
				it returns the second operand, otherwise the third operand.
				The ternary operator <literal>exp1 ? exp2 : exp3</literal>
				is a shortcut for this function.
			</para>
		</sect2>
		<sect2 id="isnullfunc">
			<title>isnull()</title>
			<para>
				Returns numeric 1 if the operand is NULL, 0 otherwise.
				It takes one operand of any type.
			</para>
		</sect2>
		<sect2 id="nullfunc">
			<title>null()</title>
			<para>
				Generate NULL value using the type of its operand.
				It takes one operand of any type.
			</para>
		</sect2>
		<sect2 id="nulldtfunc">
			<title>nulldt()</title>
			<para>
				Generate NULL of the datetime type. It takes zero operands.
			</para>
		</sect2>
		<sect2 id="nullnfunc">
			<title>nulln()</title>
			<para>
				Generate NULL of the numeric type. It takes zero operands.
			</para>
		</sect2>
		<sect2 id="nullsfunc">
			<title>nulls()</title>
			<para>
				Generate NULL of the string type. It takes zero operands.
			</para>
		</sect2>
		<sect2 id="prevvalfunc">
			<title>prevval()</title>
			<para>
				Return the previous value. It takes one operand
				of any type.
			</para>
			<para>
				The interesting use case for this function is non-constant
				expressions. It returns the operand's previous value, i.e.
				the value generated for the previous query row.
				If there is no previous value row, the result is an error.
				This function allows showing values carried over from
				the previous page to be shown in a header section of the
				current page.
			</para>
		</sect2>
		<sect2 id="randomfunc">
			<title>random()</title>
			<para>
				Generate a pseudo-random numeric value between 0 and 1.
				It takes zero operands.
			</para>
		</sect2>
		<sect2 id="rownumfunc" xreflabel="Query row number function">
			<title>rownum()</title>
			<para>
				Return the row number of a query in the report.
				It takes either zero operands or one string operand.
				If zero operands are passed, it returns the current
				row number of the primary query. If a string operand
				is passed, then it returns the current row number of
				the query with that name. See <xref linkend="queries"/>.
			</para>
		</sect2>
		<sect2 id="translatefunc" xreflabel="translate()">
			<title>translate()</title>
			<para>
				Translate the operand.
				It takes one string operand.
			</para>
			<para>
				This function returns the translated version of the string
				operand according to translation and locale settings using
				<literal>dgettext()</literal> from Gettext.
			</para>
		</sect2>
		<sect2 id="translate2func" xreflabel="translate2()">
			<title>translate2()</title>
			<para>
				Translate the operands using singular and plural variants
				and the number of the object in the statement.
				It takes three operands.
				The first two operands are strings, for the singular
				and plural strings. The third operand is the number
				that determines which translation form is used.
			</para>
			<para>
				This function translates its operands according to the
				translation and locale settings using
				<literal>dngettext()</literal> from Gettext.
			</para>
		</sect2>
	</sect1>
</chapter>

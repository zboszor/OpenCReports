<chapter id="breaks" xreflabel="Report breaks">
	<title>Report breaks</title>
	<sect1 id="groupingdata">
		<title>Grouping data</title>
		<para>
			OpenCReports, being a report generator,
			works on tabular data: the data consists of ordered (named)
			columns and ordered or unordered rows.
		</para>
		<para>
			It is often necessary to group data by certain properties.
			Imagine a list of employees of a company, grouped by their
			departments, pay grade, or location of employment. A report
			may show the list of the employees with visual separation
			according to any of these properties.
		</para>
		<para>
			Multiple groupings may be prioritized (nested):
			<orderedlist>
				<listitem>
					<para>
						by department
					</para>
				</listitem>
				<listitem>
					<para>
						by pay grade
					</para>
				</listitem>
			</orderedlist>
			With the above, in each department, subgrouping would separate
			employees according to the pay grade in that department.
		</para>
		<para>
			For this to work, the rows of data must be fed to
			the report generator in a certain order. For example,
			in SQL the ordering can be done by:
			<programlisting>SELECT ...
ORDER BY department,paygrade,employee;</programlisting>
		</para>
		<para>
			This grouping of data is called a <emphasis>break</emphasis>
			in a report generator.
		</para>
	</sect1>
	<sect1 id="reportbreaks">
		<title>Report breaks in OpenCReports</title>
		<para>
			<xref linkend="expressions"/> can reference data via the
			column names of a row. Arbitrary expressions may be used
			to watch for changes in the value of the expression data
			breaks. Breaks occurs on the boundary of changes in the
			expression value.
		</para>
		<para>
			Prioritization (nesting) of breaks is done according their order
			of declaration. See <xref linkend="breaksnode"/> and
			<xref linkend="breaknode"/>.
		</para>
		<para>
			Visual separation is optionally helped with break headers
			and footers. See <xref linkend="breakheadernode"/> and
			<xref linkend="breakfooternode"/>.
		</para>
	</sect1>
	<sect1 id="uservarreset">
		<title>Resetting a variable on break boundaries</title>
		<para>
			It may also be useful to use a regular or precalculated
			variable that only considers data rows in break ranges.
			For example printing a running average for detail rows
			in breaks, or printing the total average calculated for
			a break range in the header for that period.
		</para>
		<para>
			For this purpose, variables may be reset on break boundaries.
			See examples of such variables in
			<xref linkend="resetonbreak"/> and
			<xref linkend="precalcvarattr"/> in the
			<xref linkend="variablenode"/> section of the
			<xref linkend="xmldescriptor"/> chapter.
		</para>
	</sect1>
	<sect1 id="breakexample">
		<title>Example</title>
		<para>
			Examples cannot be understood without
			the context in which they are used.
			<xref linkend="breaksexample"/> can be found
			at the end of the <xref linkend="breaksnode"/> section
			of the <xref linkend="xmldescriptor"/> chapter.
		</para>
	</sect1>
</chapter>

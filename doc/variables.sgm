<chapter id="variables" xreflabel="Report variables">
	<title>Report variables</title>
	<sect1 id="uservarintro">
		<title>Introduction to report variables</title>
		<para>
			In OpenCReports, there are a few
			variable types:
			<itemizedlist>
				<listitem override="bullet">
					<para>
						expression variables, practically
						named aliases for <xref linkend="expressions"/>
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						pre-defined numeric operations for
						simple statistics, like summing, counting,
						or averaging a data series, or finding the
						highest or lowest values in a data series
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						custom variables where the data type and
						the operation on the data are user-defined
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			Variables may be reset at break boundaries.
			See <xref linkend="breaks"/> and the <xref linkend="resetonbreak"/>.
		</para>
	</sect1>
	<sect1 id="exprvar" xreflabel="Expression variable">
		<title>Expression variables</title>
		<para>
			The value of an expression variable is calculated from
			the expression using current row of data from the query.
		</para>
		<para>
			This can be thought of as a kind of shortcut. A variable may use
			a long expression. Other expressions may use the same long
			expression as a subexpression, i.e. part of themselves.
			Typing the same long expression over and over is error-prone.
			The variable allows typing the expression once, then
			the variable can be used in other expressions.
			This not only saves on typing. The expression value of the
			variable is calculated once, and referencing the variable
			simply uses the already calculated value, thereby saving
			report execution time.
		</para>
		<sect2 id="exprvariterative">
			<title>Variables with iterative expressions</title>
			<para>
				An expression may be iterative,  where the new value
				is derived from the previous value of itself.
				See <xref linkend="exprself"/>.
			</para>
		</sect2>
		<sect2 id="exprvarexamples">
			<title>Expression variable examples</title>
			<para>
				Examples cannot be understood without
				the context in which they are used.
				<xref linkend="xmlvarexamples"/> are in the
				<xref linkend="variablenode"/> section of the
				<xref linkend="xmldescriptor"/> chapter.
			</para>
		</sect2>
	</sect1>
	<sect1 id="uservarsimple">
		<title>Variable types for simple statistics</title>
		<para>
			There are pre-defined variable types for
			performing simple statistic calculations.
			All of them (except data series counting)
			operate on numeric values and use iterative
			expressions internally.
		</para>
		<para>
			The pre-defined variables types are as below:
			<itemizedlist>
				<listitem>
					<para>
						Summing a data series. The variable type is
						<literal>sum</literal>.
					</para>
				</listitem>
				<listitem>
					<para>
						Counting a data series. The variable type is
						<literal>count</literal> or
						<literal>countall</literal>.
						The difference between the two
						is that plain <literal>count</literal>
						does not count NULL data, while
						<literal>countall</literal> does.
						It's equivalent to the difference between
						<literal>COUNT(query1.field1)</literal> and
						<literal>COUNT(*)</literal> in
						<literal>SQL</literal>.
						The former doesn't count NULL (empty) values,
						the latter does.
					</para>
				</listitem>
				<listitem>
					<para>
						Averaging in a data series.
						Averaging uses two running expressions
						behind the scenes. One is the
						<literal>sum</literal> of
						data, the other is the <literal>count</literal>
						of data. The sum is divided by the count.
					</para>
					<para>
						Here, two different calculation is possible
						again, depending on which counting method is used,
						see above. NULL data contributes 0 to the sum,
						but the count (the denominator in the division)
						may differ. The result depends on this detail.
					</para>
					<para>
						For this reason, <literal>average</literal> and
						<literal>averageall</literal> variable types exist.
					</para>
				</listitem>
				<listitem>
					<para>
						Highest and lowest values of a data series.
						Finding the highest and lowest values in a
						data series is done by the <literal>highest</literal>
						and the <literal>lowest</literal> variable types.
					</para>
					<para>
						NULL values don't contribute to the result
						of either variable type, so in an all-NULL
						series, each variable will give a NULL result,
						i.e. empty when displayed.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<sect2 id="simplevarexamples">
			<title>Statistics variable examples</title>
			<para>
				Examples cannot be understood without
				the context in which they are used.
				<xref linkend="xmlvarexamples"/> are in the
				<xref linkend="variablenode"/> section of the
				<xref linkend="xmldescriptor"/> chapter.
			</para>
		</sect2>
	</sect1>
	<sect1 id="customvar" xreflabel="Custom variables">
		<title>Custom variables</title>
		<para>
			As seen in <xref linkend="exprvar"/>s
			and also in the <xref linkend="xmlvarexamples"/>,
			variables are not mysterious. They can be
			iterative or non-iterative and their operation
			can be spelled out. On the other hand, the
			pre-defined variables for doing simple statistics
			may be limiting. Maybe we need an iteratively
			calculated value that uses a different type than
			<literal>numeric</literal>. This is where
			<literal>custom</literal> variables may be
			useful.
		</para>
		<para>
			For a <literal>custom</literal> variable, all
			details can be freely defined:
			<itemizedlist>
				<listitem override="bullet">
					<para>
						the base type: <literal>numeric</literal>,
						<literal>string</literal> or
						<literal>datetime</literal>;
						<literal>number</literal> is also
						accepted as an alias for
						<literal>numeric</literal>
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						the base expression
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						two intermediary expressions that both may use
						the base expression's result, and the second
						intermediary may also use the first one's result
					</para>
				</listitem>
				<listitem override="bullet">
					<para>
						the result expression that may use all three
						expressions' results
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			See the <xref linkend="xmlcustomvarexample"/> on how the
			<literal>average</literal> type variable
			can be spelled out as a custom variable.
		</para>
	</sect1>
	<sect1 id="precalcvar" xreflabel="Precalculated variables">
		<title>Precalculated variables</title>
		<para>
			By default, variables produce results that are
			valid for the data rows they are derived from.
			Iterative variables variable produce results
			that are valid for the current row and preceding
			rows.
		</para>
		<para>
			Usually, we are not interested in the
			<emphasis>running average</emphasis>, only
			in the average of the whole data series.
		</para>
		<para>
			This is where the <emphasis>precalculated</emphasis>
			variables come in.
		</para>
		<para>
			A variable can be set to be precalculated via the
			<xref linkend="precalcvarattr"/>.
		</para>
		<para>
			As it was already mentioned for <xref linkend="precalcexpr"/>
			expressions, the report goes through the data set twice.
			At the end of the first run, the value of precalculated
			variables computed for the last row are kept. In the
			second run, the same value is supplied for every data row.
			The value of such a precalculated variable can be displayed
			in a report header, which is shown before any report details
			to inform the reader in advance without having to look
			at the last page.
		</para>
		<para>
			See <xref linkend="precalcvarattr"/> for an example.
		</para>
		<para>
			Variables can reference other variables. When
			certain combinations are encountered, it's necessary
			to calculate the variables' values in multiple
			rounds. For example, when a precalculated variable
			is referenced by another precalculated variable that
			also has its ignore expression set (especially if
			the ignore expression references that other
			variable), or its value is reset on a break boundary,
			the referred variable's value needs to be computed
			first, in order for the referring variable value
			to be intuitively correct.
		</para>
	</sect1>
</chapter>

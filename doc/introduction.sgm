<chapter id="introduction" xreflabel="Introduction and concepts">
	<title>Introduction and concepts</title>
	<sect1 id="rlib" xreflabel="RLIB">
		<title>The predecessor: RLIB</title>
		<para>
			The idea to write <ulink url="https://github.com/zboszor/OpenCReports">OpenCReports</ulink>
			started with my getting acqauinted with <ulink url="https://sourceforge.net/projects/rlib/">RLIB</ulink>
			in 2005 and working with it (and on it) for a very long time,
			with the original implementors finally losing interest in
			developing RLIB further. This was around
			2018. Even the original documentation site for RLIB was retired.
			But thanks to the Internet Archive,
			<ulink url="https://web.archive.org/web/20131116192438/http://newrlib.sicom.com/~rlib/index.php/Main_Page">it may still be read</ulink>
		</para>
		<para>
			To overcome some of the shortcomings seen in
			RLIB, its <emphasis>ideas</emphasis> were used for a completely
			new implementation with high level of compatibility
			to the original.
		</para>
		<para>
			RLIB is a report generator library,
			so is OpenCReports. In this documentation,
			a lot of references contain comparisons to
			RLIB.
		</para>
		<para>
			The name OpenCReports came from the fact
			that it's implemented in the C programming language in an
			open way, and using a free software license.
		</para>
	</sect1>
	<sect1 id="concepts" xreflabel="Concepts">
		<title>Concepts</title>
		<sect2 id="whatisarepgen">
			<title>What is a report generator?</title>
			<para>
				A report generator uses a tabular data source, which contains
				rows and columns of data. The columns have labels or names.
				(An SQL database query is such a tabular data source.)
				It also uses some kind of description that specifies how
				to display the data. The input data is transformed into
				various output formats, some for human viewing, some for
				further machine processing. Such output formats may be PDF,
				HTML, XML, plain text or CSV.
			</para>
		</sect2>
		<sect2 id="xmlbaseddesc">
			<title>XML based report description</title>
			<para>
				The XML file format is widely used. It can describe
				structured data in a hierarchy with names for its
				sections or "nodes".
			</para>
			<para>
				OpenCReports uses an RLIB-compatible report description
				with extensions. See <xref linkend="xmldescriptor"/> and the
				<ulink url="https://web.archive.org/web/20131116192438/http://newrlib.sicom.com/~rlib/index.php/Main_Page">RLIB documentation</ulink>
			</para>
		</sect2>
		<sect2 id="comprehensiveapi">
			<title>Comprehensive API for report creation</title>
			<para>
				The <xref linkend="lowlevelapi"/> allows creating a report purely
				via program code. The <xref linkend="highlevelapi"/> allows loading
				an XML report description that contains all details
				about the report, including database access. Mixing
				the high and low level APIs allows a balance anywhere
				between the two extremes. For example, load the report
				description, which contains the complete layout, and pass
				database access details via program code. As a comparison,
				RLIB's API and report description allowed neither extremes:
				it relied on the report description to provide the layout,
				with data access and other supplementary details controlled
				from programming code.
			</para>
		</sect2>
		<sect2 id="strictparser">
			<title>Strict expression parser</title>
			<para>
				OpenCReports uses a Flex/Bison based expression parser.
				The expression grammar doesn't allow incorrect expressions.
				See the <xref linkend="expressions"/> chapter.
			</para>
		</sect2>
		<sect2 id="expropt">
			<title>Expression optimization</title>
			<para>
				OpenCReports does some expression optimization
				to reduce runtime cost of computing expression
				values. For example, in <literal>a*2/3</literal>
				the part <literal>2/3</literal> is two constants
				in a division. This is precomputed into a single
				constant as an optimization. Naturally, only
				mathematically valid optimizations are performed.
			</para>
		</sect2>
		<sect2 id="repvars">
			<title>Report variables</title>
			<para>
				OpenCReports supports standard report variables
				for calculating sums, minimum, maximum and average values
				or custom defined ones. See <xref linkend="variables"/>
			</para>
			<para>
				Report variables can also be used as manual expression
				optimization. A common subexpression can be moved to
				a report variable from multiple expressions,
				which in turn is computed once, and its result is used
				in the expressions referencing it.
			</para>
		</sect2>
		<sect2 id="repbreaks">
			<title>Report breaks</title>
			<para>
				A report break is a form of data grouping based on
				value changes. A break (break boundary) occurs when the
				value of a watched expression changes from one
				data row to the next. OpenCReports supports report breaks
				defined on arbitrary expressions. Report variables can
				reset their value on break boundaries. See
				<xref linkend="breaks"/> and <xref linkend="breaksnode"/>.
			</para>
		</sect2>
		<sect2 id="setoffuncs">
			<title>Extensive and extensible set of functions</title>
			<para>
				OpenCReports has many operators and functions to
				be used in expressions. See <xref linkend="opsandfunc"/>
				in the <xref linkend="expressions"/> chapter.
			</para>
			<para>
				Custom functions can also be added to a report by
				programming code. Custom functions may override stock
				functions.
			</para>
		</sect2>
		<sect2 id="utf8strings">
			<title>UTF-8 string handling</title>
			<para>
				OpenCReports exclusively uses UTF-8 for strings.
				Input data must be in UTF-8 and output formats
				also use UTF-8. This allows text from different
				languages appear in the same report, provided that
				an applicable font is available.
			</para>
		</sect2>
		<sect2 id="highprecnumerics">
			<title>High precision numeric data type</title>
			<para>
				OpenCReports uses a high precision numeric data type.
				This allows scientific computation or monetary
				calculations even with late stage
				<ulink url="https://en.wikipedia.org/wiki/Hyperinflation">hyperinflation</ulink>
				prices.
				See <xref linkend="numericconstants"/> in
				the <xref linkend="expressions"/> chapter and the
				<xref linkend="numerictuning"/> part in the
				<xref linkend="lowlevelapi"/> chapter.
			</para>
		</sect2>
		<sect2 id="datetimetypes">
			<title>Datetime and interval data types</title>
			<para>
				OpenCReports handles both timestamp and time interval
				data types. The latter allows adding or subtracting a
				custom time period to and from timestamp data.
				See <xref linkend="datetimeconstants"/> in the
				<xref linkend="expressions"/> chapter.
			</para>
		</sect2>
		<sect2 id="autoconv">
			<title>Automatic input data conversion</title>
			<para>
				For maximum portability, databases provide their
				data in strings. They also indicate the column type.
				OpenCReports detects the columns' data type
				and applies the conversion automatically.
			</para>
		</sect2>
		<sect2 id="alignments">
			<title>Versatile field alignment and multi-row fields</title>
			<para>
				In the report output, fields may have a fixed width in
				which they are displayed. Some field values are longer
				than the field width. When displaying them in a single
				row, fields may be left-, right- or center-aligned
				to show the interesting part of the value or for visual
				reasons.
			</para>
			<para>
				Fields longer than the designated width may be wrapped
				either at word or character boundaries. This way, they
				become multi-row fields. Multi-row fields are also called
				"memo" fields. Such fields may wrap lines at word boundaries
				or break words at some character. Multi-row fields have
				configurable line number limits. Memo fields can break
				over to the next column or to the next page. Hyphenation
				is done automatically when using character wrapping. Memo
				fields may also use <emphasis>justified</emphasis> alignment.
			</para>
		</sect2>
		<sect2 id="multicolrep">
			<title>Multi-column reports</title>
			<para>
				OpenCReports supports both single- and multi-column layout
				in its PDF output format. Other output formats may only
				use single-column layout.
			</para>
		</sect2>
		<sect2 id="layoutdetails">
			<title>Miscellaneous layout details</title>
			<para>
				OpenCReports implements an RLIB compatibility mode for
				sizing report layout details, which uses a mix of units,
				mostly based on character widths (making it dependent on
				the font size used) mixed with points (1/72th inch) for
				some report elements.
			</para>
			<para>
				OpenCReports also has a new, consistent size calculation
				method where everything is measured in points (1/72th inch).
			</para>
			<para>
				OpenCReports supports both fixed and proportional fonts
				even with using the RLIB compatible size settings.
			</para>
		</sect2>
		<sect2 id="outputformats">
			<title>Multiple output formats</title>
			<para>
				OpenCReports supports several output formats:
				PDF, HTML, CSV, TXT, XML and JSON.
			</para>
		</sect2>
		<sect2 id="unittests">
			<title>Extensive set of unit tests</title>
			<para>
				The unit tests ensure that OpenCReports' features keep
				working when adding new features or fixes. Units tests
				exercise many aspects of the high and low level API,
				report description handling, runtime behavior and output
				generation.
			</para>
		</sect2>
		<sect2 id="stddeps">
			<title>Standard Linux dependencies</title>
			<para>
				OpenCReports uses
				<ulink url="https://gitlab.gnome.org/GNOME/libxml2/-/wikis/home">LibXML2</ulink>,
				<ulink url="https://juliastrings.github.io/utf8proc/">utf8proc</ulink>,
				<ulink url="https://www.mpfr.org">MPFR</ulink>,
				<ulink url="http://packages.qa.debian.org/libp/libpaper.html">libpaper</ulink>,
				<ulink url="https://github.com/rgamble/libcsv">libcsv</ulink>,
				<ulink url="http://lloyd.github.com/yajl/">yajl</ulink>,
				<ulink url="https://www.cairographics.org">Cairo</ulink>,
				<ulink url="https://pango.gnome.org">Pango</ulink>,
				<ulink url="https://wiki.gnome.org/Projects/LibRsvg">librsvg2</ulink>,
				<ulink url="https://gitlab.gnome.org/GNOME/gdk-pixbuf">gdk-pixbuf2</ulink>,
				<ulink url="https://www.postgresql.org">PostgreSQL</ulink>,
				<ulink url="https://mariadb.com">MariaDB</ulink>
				and
				<ulink url="http://www.unixodbc.org">unixODBC</ulink>.
			</para>
			<para>
				For running the unit tests,
				<ulink url="https://www.ghostscript.com">Ghostscript</ulink>
				and <literal>compare</literal> from
				<ulink url="https://imagemagick.org">Imagemagick</ulink>
				are also needed.
			</para>
			<para>
				<literal>xmllint</literal>, <literal>xsltproc</literal>
				and <literal>fop</literal> are used to generate the
				documentation.
			</para>
		</sect2>
	</sect1>
	<sect1 id="planned">
		<title>OpenCReports planned features</title>
		<sect2 id="graphs">
			<title>Graph and chart support in HTML and PDF output</title>
			<para>
				Currently Gantt chart and various graph types (like
				barchart, pie chart and their various subtypes) are
				not supported.
			</para>
		</sect2>
		<sect2 id="visualeditor">
			<title>Visual editor for report XML descriptions</title>
			<para>
				There are other report generators on the market with
				nice GUIs to create the report visually.
			</para>
		</sect2>
	</sect1>
</chapter>
